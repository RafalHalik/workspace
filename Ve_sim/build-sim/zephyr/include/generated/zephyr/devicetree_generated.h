/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   /home/user/C4.3_firmware/C4.3_workspace/apps/Ve_sim/build-sim/zephyr/zephyr.dts.pre
 *
 * Directories with bindings:
 *   /home/user/C4.3_firmware/C4.3_workspace/dts/bindings, $ZEPHYR_BASE/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /adc
 *   2   /aliases
 *   3   /can
 *   4   /can_loopback0
 *   5   /chosen
 *   6   /counter
 *   7   /dma
 *   8   /drv8844
 *   9   /eeprom
 *   10  /espi@300
 *   11  /i2c@21
 *   12  /i2c@100
 *   13  /lp5018
 *   14  /gpio@900
 *   15  /keys
 *   16  /lvgl_button_input
 *   17  /lvgl_encoder_input
 *   18  /lvgl_keypad_input
 *   19  /input-sdl-touch
 *   20  /lvgl_pointer
 *   21  /qdec
 *   22  /rng
 *   23  /rtc
 *   24  /sdl_dc
 *   25  /uart
 *   26  /uart_1
 *   27  /udc0
 *   28  /cpus
 *   29  /cpus/cpu@0
 *   30  /gpio@800
 *   31  /fake_io
 *   32  /fake_io/bkled
 *   33  /fake_io/bm0_button
 *   34  /fake_io/bm1_button
 *   35  /fake_io/board_button_0
 *   36  /fake_io/board_button_1
 *   37  /fake_io/board_button_2
 *   38  /fake_io/board_button_3
 *   39  /fake_io/board_button_4
 *   40  /fake_io/buzzer_en
 *   41  /fake_io/can1_stb
 *   42  /fake_io/digital_in_1_hi
 *   43  /fake_io/digital_in_1_low
 *   44  /fake_io/digital_in_2_hi
 *   45  /fake_io/digital_in_2_low
 *   46  /fake_io/digital_in_3_hi
 *   47  /fake_io/digital_in_3_low
 *   48  /fake_io/digital_in_4_hi
 *   49  /fake_io/digital_in_4_low
 *   50  /fake_io/display_power
 *   51  /fake_io/display_reset
 *   52  /fake_io/ignition_input
 *   53  /fake_io/nafe_pwr_en
 *   54  /fake_io/power_5v_enable
 *   55  /fake_io/usb_id_input
 *   56  /fake_io/vref_ctrl
 *   57  /flash-controller@0
 *   58  /flash-controller@0/flash@0
 *   59  /flash-controller@0/flash@0/partitions
 *   60  /flash-controller@0/flash@0/partitions/partition@0
 *   61  /flash-controller@0/flash@0/partitions/partition@c000
 *   62  /flash-controller@0/flash@0/partitions/partition@75000
 *   63  /flash-controller@0/flash@0/partitions/partition@de000
 *   64  /flash-controller@0/flash@0/partitions/partition@fc000
 *   65  /gpio@900/sdl_gpio
 *   66  /keys/button0
 *   67  /keys/button1
 *   68  /keys/button_enter
 *   69  /keys/button_left
 *   70  /keys/button_right
 *   71  /keys/encoder_button
 *   72  /leds
 *   73  /leds/led_0
 *   74  /lpuart_10
 *   75  /lpuart_10/modbus_0
 *   76  /spi@200
 *   77  /spi@200/nafe13388@0
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/* Used to remove brackets from around a single argument */
#define DT_DEBRACKET_INTERNAL(...) __VA_ARGS__

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"

/* Helpers for dealing with node labels: */
#define DT_N_NODELABEL_NUM 0
#define DT_N_FOREACH_NODELABEL(fn) 
#define DT_N_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_CHILD_NUM 34
#define DT_N_CHILD_NUM_STATUS_OKAY 32
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_leds) fn(DT_N_S_lvgl_pointer) fn(DT_N_S_cpus) fn(DT_N_S_flash_controller_0) fn(DT_N_S_eeprom) fn(DT_N_S_i2c_100) fn(DT_N_S_spi_200) fn(DT_N_S_espi_300) fn(DT_N_S_uart) fn(DT_N_S_uart_1) fn(DT_N_S_rng) fn(DT_N_S_counter) fn(DT_N_S_gpio_800) fn(DT_N_S_gpio_900) fn(DT_N_S_udc0) fn(DT_N_S_sdl_dc) fn(DT_N_S_input_sdl_touch) fn(DT_N_S_can_loopback0) fn(DT_N_S_can) fn(DT_N_S_rtc) fn(DT_N_S_adc) fn(DT_N_S_dma) fn(DT_N_S_qdec) fn(DT_N_S_keys) fn(DT_N_S_lvgl_button_input) fn(DT_N_S_lvgl_encoder_input) fn(DT_N_S_lvgl_keypad_input) fn(DT_N_S_lpuart_10) fn(DT_N_S_drv8844) fn(DT_N_S_lp5018) fn(DT_N_S_i2c_21) fn(DT_N_S_fake_io)
#define DT_N_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lvgl_pointer) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_eeprom) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_i2c_100) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_spi_200) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_espi_300) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_uart) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_uart_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_rng) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_counter) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_800) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_900) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_udc0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sdl_dc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_input_sdl_touch) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_can_loopback0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_can) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_rtc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_adc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_dma) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_qdec) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lvgl_button_input) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lvgl_encoder_input) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lvgl_keypad_input) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lpuart_10) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_drv8844) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lp5018) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_i2c_21) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_lvgl_pointer, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_flash_controller_0, __VA_ARGS__) fn(DT_N_S_eeprom, __VA_ARGS__) fn(DT_N_S_i2c_100, __VA_ARGS__) fn(DT_N_S_spi_200, __VA_ARGS__) fn(DT_N_S_espi_300, __VA_ARGS__) fn(DT_N_S_uart, __VA_ARGS__) fn(DT_N_S_uart_1, __VA_ARGS__) fn(DT_N_S_rng, __VA_ARGS__) fn(DT_N_S_counter, __VA_ARGS__) fn(DT_N_S_gpio_800, __VA_ARGS__) fn(DT_N_S_gpio_900, __VA_ARGS__) fn(DT_N_S_udc0, __VA_ARGS__) fn(DT_N_S_sdl_dc, __VA_ARGS__) fn(DT_N_S_input_sdl_touch, __VA_ARGS__) fn(DT_N_S_can_loopback0, __VA_ARGS__) fn(DT_N_S_can, __VA_ARGS__) fn(DT_N_S_rtc, __VA_ARGS__) fn(DT_N_S_adc, __VA_ARGS__) fn(DT_N_S_dma, __VA_ARGS__) fn(DT_N_S_qdec, __VA_ARGS__) fn(DT_N_S_keys, __VA_ARGS__) fn(DT_N_S_lvgl_button_input, __VA_ARGS__) fn(DT_N_S_lvgl_encoder_input, __VA_ARGS__) fn(DT_N_S_lvgl_keypad_input, __VA_ARGS__) fn(DT_N_S_lpuart_10, __VA_ARGS__) fn(DT_N_S_drv8844, __VA_ARGS__) fn(DT_N_S_lp5018, __VA_ARGS__) fn(DT_N_S_i2c_21, __VA_ARGS__) fn(DT_N_S_fake_io, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lvgl_pointer, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_eeprom, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_i2c_100, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_spi_200, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_espi_300, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_uart, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_uart_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_rng, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_counter, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_800, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_900, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_udc0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sdl_dc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_input_sdl_touch, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_can_loopback0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_can, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_rtc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_adc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_dma, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_qdec, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lvgl_button_input, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lvgl_encoder_input, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lvgl_keypad_input, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lpuart_10, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_drv8844, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lp5018, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_i2c_21, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_leds) fn(DT_N_S_lvgl_pointer) fn(DT_N_S_cpus) fn(DT_N_S_flash_controller_0) fn(DT_N_S_eeprom) fn(DT_N_S_i2c_100) fn(DT_N_S_spi_200) fn(DT_N_S_espi_300) fn(DT_N_S_uart) fn(DT_N_S_uart_1) fn(DT_N_S_rng) fn(DT_N_S_counter) fn(DT_N_S_gpio_800) fn(DT_N_S_gpio_900) fn(DT_N_S_udc0) fn(DT_N_S_sdl_dc) fn(DT_N_S_input_sdl_touch) fn(DT_N_S_can) fn(DT_N_S_rtc) fn(DT_N_S_adc) fn(DT_N_S_dma) fn(DT_N_S_qdec) fn(DT_N_S_keys) fn(DT_N_S_lvgl_button_input) fn(DT_N_S_lvgl_encoder_input) fn(DT_N_S_lvgl_keypad_input) fn(DT_N_S_lpuart_10) fn(DT_N_S_drv8844) fn(DT_N_S_lp5018) fn(DT_N_S_i2c_21)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lvgl_pointer) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_eeprom) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_i2c_100) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_spi_200) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_espi_300) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_uart) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_uart_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_rng) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_counter) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_800) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_900) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_udc0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sdl_dc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_input_sdl_touch) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_can) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_rtc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_adc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_dma) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_qdec) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lvgl_button_input) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lvgl_encoder_input) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lvgl_keypad_input) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lpuart_10) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_drv8844) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lp5018) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_i2c_21)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_lvgl_pointer, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_flash_controller_0, __VA_ARGS__) fn(DT_N_S_eeprom, __VA_ARGS__) fn(DT_N_S_i2c_100, __VA_ARGS__) fn(DT_N_S_spi_200, __VA_ARGS__) fn(DT_N_S_espi_300, __VA_ARGS__) fn(DT_N_S_uart, __VA_ARGS__) fn(DT_N_S_uart_1, __VA_ARGS__) fn(DT_N_S_rng, __VA_ARGS__) fn(DT_N_S_counter, __VA_ARGS__) fn(DT_N_S_gpio_800, __VA_ARGS__) fn(DT_N_S_gpio_900, __VA_ARGS__) fn(DT_N_S_udc0, __VA_ARGS__) fn(DT_N_S_sdl_dc, __VA_ARGS__) fn(DT_N_S_input_sdl_touch, __VA_ARGS__) fn(DT_N_S_can, __VA_ARGS__) fn(DT_N_S_rtc, __VA_ARGS__) fn(DT_N_S_adc, __VA_ARGS__) fn(DT_N_S_dma, __VA_ARGS__) fn(DT_N_S_qdec, __VA_ARGS__) fn(DT_N_S_keys, __VA_ARGS__) fn(DT_N_S_lvgl_button_input, __VA_ARGS__) fn(DT_N_S_lvgl_encoder_input, __VA_ARGS__) fn(DT_N_S_lvgl_keypad_input, __VA_ARGS__) fn(DT_N_S_lpuart_10, __VA_ARGS__) fn(DT_N_S_drv8844, __VA_ARGS__) fn(DT_N_S_lp5018, __VA_ARGS__) fn(DT_N_S_i2c_21, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lvgl_pointer, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_eeprom, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_i2c_100, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_spi_200, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_espi_300, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_uart, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_uart_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_rng, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_counter, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_800, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_900, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_udc0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sdl_dc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_input_sdl_touch, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_can, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_rtc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_adc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_dma, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_qdec, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lvgl_button_input, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lvgl_encoder_input, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lvgl_keypad_input, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lpuart_10, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_drv8844, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_lp5018, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_i2c_21, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_ORD 0
#define DT_N_ORD_STR_SORTABLE 00000

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /adc */ \
	2, /* /aliases */ \
	3, /* /can */ \
	4, /* /can_loopback0 */ \
	5, /* /chosen */ \
	6, /* /counter */ \
	7, /* /dma */ \
	8, /* /drv8844 */ \
	9, /* /eeprom */ \
	10, /* /espi@300 */ \
	11, /* /i2c@21 */ \
	12, /* /i2c@100 */ \
	13, /* /lp5018 */ \
	14, /* /gpio@900 */ \
	15, /* /keys */ \
	16, /* /lvgl_button_input */ \
	17, /* /lvgl_encoder_input */ \
	18, /* /lvgl_keypad_input */ \
	19, /* /input-sdl-touch */ \
	20, /* /lvgl_pointer */ \
	21, /* /qdec */ \
	22, /* /rng */ \
	23, /* /rtc */ \
	24, /* /sdl_dc */ \
	25, /* /uart */ \
	26, /* /uart_1 */ \
	27, /* /udc0 */ \
	28, /* /cpus */ \
	30, /* /gpio@800 */ \
	31, /* /fake_io */ \
	57, /* /flash-controller@0 */ \
	72, /* /leds */ \
	74, /* /lpuart_10 */ \
	76, /* /spi@200 */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_zephyr_posix DT_N

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_RANGES_NUM 0
#define DT_N_FOREACH_RANGE(fn) 
#define DT_N_IRQ_NUM 0
#define DT_N_IRQ_LEVEL 0
#define DT_N_COMPAT_MATCHES_zephyr_posix 1
#define DT_N_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_COMPAT_MODEL_IDX_0 "posix"
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_P_compatible {"zephyr,posix"}
#define DT_N_P_compatible_IDX_0 "zephyr,posix"
#define DT_N_P_compatible_IDX_0_STRING_UNQUOTED zephyr,posix
#define DT_N_P_compatible_IDX_0_STRING_TOKEN zephyr_posix
#define DT_N_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_POSIX
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_LEN 1
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /adc
 *
 * Node identifier: DT_N_S_adc
 *
 * Binding (compatible = zephyr,adc-emul):
 *   $ZEPHYR_BASE/dts/bindings/adc/zephyr,adc-emul.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_adc_PATH "/adc"

/* Node's name with unit-address: */
#define DT_N_S_adc_FULL_NAME "adc"

/* Node parent (/) identifier: */
#define DT_N_S_adc_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_adc_CHILD_IDX 22

/* Helpers for dealing with node labels: */
#define DT_N_S_adc_NODELABEL_NUM 1
#define DT_N_S_adc_FOREACH_NODELABEL(fn) fn(adc0)
#define DT_N_S_adc_FOREACH_NODELABEL_VARGS(fn, ...) fn(adc0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_adc_CHILD_NUM 0
#define DT_N_S_adc_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_adc_FOREACH_CHILD(fn) 
#define DT_N_S_adc_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_adc_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_adc_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_adc_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_adc_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_adc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_adc_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_adc_ORD 1
#define DT_N_S_adc_ORD_STR_SORTABLE 00001

/* Ordinals for what this node depends on directly: */
#define DT_N_S_adc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_adc_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_adc_EXISTS 1
#define DT_N_INST_0_zephyr_adc_emul DT_N_S_adc
#define DT_N_NODELABEL_adc0         DT_N_S_adc

/* Macros for properties that are special in the specification: */
#define DT_N_S_adc_REG_NUM 0
#define DT_N_S_adc_RANGES_NUM 0
#define DT_N_S_adc_FOREACH_RANGE(fn) 
#define DT_N_S_adc_IRQ_NUM 0
#define DT_N_S_adc_IRQ_LEVEL 0
#define DT_N_S_adc_COMPAT_MATCHES_zephyr_adc_emul 1
#define DT_N_S_adc_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_adc_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_adc_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_adc_COMPAT_MODEL_IDX_0 "adc-emul"
#define DT_N_S_adc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_adc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_adc_P_wakeup_source 0
#define DT_N_S_adc_P_wakeup_source_EXISTS 1
#define DT_N_S_adc_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_adc_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_adc_P_status "okay"
#define DT_N_S_adc_P_status_STRING_UNQUOTED okay
#define DT_N_S_adc_P_status_STRING_TOKEN okay
#define DT_N_S_adc_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_adc_P_status_IDX_0 "okay"
#define DT_N_S_adc_P_status_IDX_0_EXISTS 1
#define DT_N_S_adc_P_status_ENUM_IDX 1
#define DT_N_S_adc_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_adc_P_status_ENUM_TOKEN okay
#define DT_N_S_adc_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_adc_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_adc, status, 0)
#define DT_N_S_adc_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_adc, status, 0)
#define DT_N_S_adc_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_adc, status, 0, __VA_ARGS__)
#define DT_N_S_adc_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_adc, status, 0, __VA_ARGS__)
#define DT_N_S_adc_P_status_LEN 1
#define DT_N_S_adc_P_status_EXISTS 1
#define DT_N_S_adc_P_compatible {"zephyr,adc-emul"}
#define DT_N_S_adc_P_compatible_IDX_0 "zephyr,adc-emul"
#define DT_N_S_adc_P_compatible_IDX_0_STRING_UNQUOTED zephyr,adc-emul
#define DT_N_S_adc_P_compatible_IDX_0_STRING_TOKEN zephyr_adc_emul
#define DT_N_S_adc_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_ADC_EMUL
#define DT_N_S_adc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_adc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_adc, compatible, 0)
#define DT_N_S_adc_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_adc, compatible, 0)
#define DT_N_S_adc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_adc, compatible, 0, __VA_ARGS__)
#define DT_N_S_adc_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_adc, compatible, 0, __VA_ARGS__)
#define DT_N_S_adc_P_compatible_LEN 1
#define DT_N_S_adc_P_compatible_EXISTS 1
#define DT_N_S_adc_P_zephyr_deferred_init 0
#define DT_N_S_adc_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_adc_P_nchannels 2
#define DT_N_S_adc_P_nchannels_EXISTS 1
#define DT_N_S_adc_P_ref_internal_mv 0
#define DT_N_S_adc_P_ref_internal_mv_EXISTS 1
#define DT_N_S_adc_P_ref_vdd_mv 0
#define DT_N_S_adc_P_ref_vdd_mv_EXISTS 1
#define DT_N_S_adc_P_ref_external0_mv 0
#define DT_N_S_adc_P_ref_external0_mv_EXISTS 1
#define DT_N_S_adc_P_ref_external1_mv 0
#define DT_N_S_adc_P_ref_external1_mv_EXISTS 1

/*
 * Devicetree node: /aliases
 *
 * Node identifier: DT_N_S_aliases
 */

/* Node's full path: */
#define DT_N_S_aliases_PATH "/aliases"

/* Node's name with unit-address: */
#define DT_N_S_aliases_FULL_NAME "aliases"

/* Node parent (/) identifier: */
#define DT_N_S_aliases_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_aliases_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_aliases_NODELABEL_NUM 0
#define DT_N_S_aliases_FOREACH_NODELABEL(fn) 
#define DT_N_S_aliases_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_aliases_CHILD_NUM 0
#define DT_N_S_aliases_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_aliases_FOREACH_CHILD(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_aliases_ORD 2
#define DT_N_S_aliases_ORD_STR_SORTABLE 00002

/* Ordinals for what this node depends on directly: */
#define DT_N_S_aliases_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_aliases_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_aliases_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_aliases_REG_NUM 0
#define DT_N_S_aliases_RANGES_NUM 0
#define DT_N_S_aliases_FOREACH_RANGE(fn) 
#define DT_N_S_aliases_IRQ_NUM 0
#define DT_N_S_aliases_IRQ_LEVEL 0
#define DT_N_S_aliases_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_aliases_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /can
 *
 * Node identifier: DT_N_S_can
 *
 * Binding (compatible = zephyr,native-linux-can):
 *   $ZEPHYR_BASE/dts/bindings/can/zephyr,native-linux-can.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_can_PATH "/can"

/* Node's name with unit-address: */
#define DT_N_S_can_FULL_NAME "can"

/* Node parent (/) identifier: */
#define DT_N_S_can_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_can_CHILD_IDX 20

/* Helpers for dealing with node labels: */
#define DT_N_S_can_NODELABEL_NUM 1
#define DT_N_S_can_FOREACH_NODELABEL(fn) fn(can0)
#define DT_N_S_can_FOREACH_NODELABEL_VARGS(fn, ...) fn(can0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_can_CHILD_NUM 0
#define DT_N_S_can_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_can_FOREACH_CHILD(fn) 
#define DT_N_S_can_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_can_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_can_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_can_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_can_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_can_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_can_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_can_ORD 3
#define DT_N_S_can_ORD_STR_SORTABLE 00003

/* Ordinals for what this node depends on directly: */
#define DT_N_S_can_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_can_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_can_EXISTS 1
#define DT_N_INST_0_zephyr_native_linux_can DT_N_S_can
#define DT_N_NODELABEL_can0                 DT_N_S_can

/* Macros for properties that are special in the specification: */
#define DT_N_S_can_REG_NUM 0
#define DT_N_S_can_RANGES_NUM 0
#define DT_N_S_can_FOREACH_RANGE(fn) 
#define DT_N_S_can_IRQ_NUM 0
#define DT_N_S_can_IRQ_LEVEL 0
#define DT_N_S_can_COMPAT_MATCHES_zephyr_native_linux_can 1
#define DT_N_S_can_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_can_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_can_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_can_COMPAT_MODEL_IDX_0 "native-linux-can"
#define DT_N_S_can_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_can_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_can_P_wakeup_source 0
#define DT_N_S_can_P_wakeup_source_EXISTS 1
#define DT_N_S_can_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_can_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_can_P_status "okay"
#define DT_N_S_can_P_status_STRING_UNQUOTED okay
#define DT_N_S_can_P_status_STRING_TOKEN okay
#define DT_N_S_can_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_can_P_status_IDX_0 "okay"
#define DT_N_S_can_P_status_IDX_0_EXISTS 1
#define DT_N_S_can_P_status_ENUM_IDX 1
#define DT_N_S_can_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_can_P_status_ENUM_TOKEN okay
#define DT_N_S_can_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_can_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_can, status, 0)
#define DT_N_S_can_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_can, status, 0)
#define DT_N_S_can_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_can, status, 0, __VA_ARGS__)
#define DT_N_S_can_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_can, status, 0, __VA_ARGS__)
#define DT_N_S_can_P_status_LEN 1
#define DT_N_S_can_P_status_EXISTS 1
#define DT_N_S_can_P_compatible {"zephyr,native-linux-can"}
#define DT_N_S_can_P_compatible_IDX_0 "zephyr,native-linux-can"
#define DT_N_S_can_P_compatible_IDX_0_STRING_UNQUOTED zephyr,native-linux-can
#define DT_N_S_can_P_compatible_IDX_0_STRING_TOKEN zephyr_native_linux_can
#define DT_N_S_can_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_NATIVE_LINUX_CAN
#define DT_N_S_can_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_can_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_can, compatible, 0)
#define DT_N_S_can_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_can, compatible, 0)
#define DT_N_S_can_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_can, compatible, 0, __VA_ARGS__)
#define DT_N_S_can_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_can, compatible, 0, __VA_ARGS__)
#define DT_N_S_can_P_compatible_LEN 1
#define DT_N_S_can_P_compatible_EXISTS 1
#define DT_N_S_can_P_zephyr_deferred_init 0
#define DT_N_S_can_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_can_P_host_interface "zcan0"
#define DT_N_S_can_P_host_interface_STRING_UNQUOTED zcan0
#define DT_N_S_can_P_host_interface_STRING_TOKEN zcan0
#define DT_N_S_can_P_host_interface_STRING_UPPER_TOKEN ZCAN0
#define DT_N_S_can_P_host_interface_IDX_0 "zcan0"
#define DT_N_S_can_P_host_interface_IDX_0_EXISTS 1
#define DT_N_S_can_P_host_interface_FOREACH_PROP_ELEM(fn) fn(DT_N_S_can, host_interface, 0)
#define DT_N_S_can_P_host_interface_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_can, host_interface, 0)
#define DT_N_S_can_P_host_interface_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_can, host_interface, 0, __VA_ARGS__)
#define DT_N_S_can_P_host_interface_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_can, host_interface, 0, __VA_ARGS__)
#define DT_N_S_can_P_host_interface_LEN 1
#define DT_N_S_can_P_host_interface_EXISTS 1

/*
 * Devicetree node: /can_loopback0
 *
 * Node identifier: DT_N_S_can_loopback0
 *
 * Binding (compatible = zephyr,can-loopback):
 *   $ZEPHYR_BASE/dts/bindings/can/zephyr,can-loopback.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_can_loopback0_PATH "/can_loopback0"

/* Node's name with unit-address: */
#define DT_N_S_can_loopback0_FULL_NAME "can_loopback0"

/* Node parent (/) identifier: */
#define DT_N_S_can_loopback0_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_can_loopback0_CHILD_IDX 19

/* Helpers for dealing with node labels: */
#define DT_N_S_can_loopback0_NODELABEL_NUM 1
#define DT_N_S_can_loopback0_FOREACH_NODELABEL(fn) fn(can_loopback0)
#define DT_N_S_can_loopback0_FOREACH_NODELABEL_VARGS(fn, ...) fn(can_loopback0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_can_loopback0_CHILD_NUM 0
#define DT_N_S_can_loopback0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_can_loopback0_FOREACH_CHILD(fn) 
#define DT_N_S_can_loopback0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_can_loopback0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_can_loopback0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_can_loopback0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_can_loopback0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_can_loopback0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_can_loopback0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_can_loopback0_ORD 4
#define DT_N_S_can_loopback0_ORD_STR_SORTABLE 00004

/* Ordinals for what this node depends on directly: */
#define DT_N_S_can_loopback0_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_can_loopback0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_can_loopback0_EXISTS 1
#define DT_N_INST_0_zephyr_can_loopback DT_N_S_can_loopback0
#define DT_N_NODELABEL_can_loopback0    DT_N_S_can_loopback0

/* Macros for properties that are special in the specification: */
#define DT_N_S_can_loopback0_REG_NUM 0
#define DT_N_S_can_loopback0_RANGES_NUM 0
#define DT_N_S_can_loopback0_FOREACH_RANGE(fn) 
#define DT_N_S_can_loopback0_IRQ_NUM 0
#define DT_N_S_can_loopback0_IRQ_LEVEL 0
#define DT_N_S_can_loopback0_COMPAT_MATCHES_zephyr_can_loopback 1
#define DT_N_S_can_loopback0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_can_loopback0_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_can_loopback0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_can_loopback0_COMPAT_MODEL_IDX_0 "can-loopback"
#define DT_N_S_can_loopback0_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_can_loopback0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_can_loopback0_P_wakeup_source 0
#define DT_N_S_can_loopback0_P_wakeup_source_EXISTS 1
#define DT_N_S_can_loopback0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_can_loopback0_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_can_loopback0_P_status "disabled"
#define DT_N_S_can_loopback0_P_status_STRING_UNQUOTED disabled
#define DT_N_S_can_loopback0_P_status_STRING_TOKEN disabled
#define DT_N_S_can_loopback0_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_can_loopback0_P_status_IDX_0 "disabled"
#define DT_N_S_can_loopback0_P_status_IDX_0_EXISTS 1
#define DT_N_S_can_loopback0_P_status_ENUM_IDX 2
#define DT_N_S_can_loopback0_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_can_loopback0_P_status_ENUM_TOKEN disabled
#define DT_N_S_can_loopback0_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_can_loopback0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_can_loopback0, status, 0)
#define DT_N_S_can_loopback0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_can_loopback0, status, 0)
#define DT_N_S_can_loopback0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_can_loopback0, status, 0, __VA_ARGS__)
#define DT_N_S_can_loopback0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_can_loopback0, status, 0, __VA_ARGS__)
#define DT_N_S_can_loopback0_P_status_LEN 1
#define DT_N_S_can_loopback0_P_status_EXISTS 1
#define DT_N_S_can_loopback0_P_compatible {"zephyr,can-loopback"}
#define DT_N_S_can_loopback0_P_compatible_IDX_0 "zephyr,can-loopback"
#define DT_N_S_can_loopback0_P_compatible_IDX_0_STRING_UNQUOTED zephyr,can-loopback
#define DT_N_S_can_loopback0_P_compatible_IDX_0_STRING_TOKEN zephyr_can_loopback
#define DT_N_S_can_loopback0_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_CAN_LOOPBACK
#define DT_N_S_can_loopback0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_can_loopback0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_can_loopback0, compatible, 0)
#define DT_N_S_can_loopback0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_can_loopback0, compatible, 0)
#define DT_N_S_can_loopback0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_can_loopback0, compatible, 0, __VA_ARGS__)
#define DT_N_S_can_loopback0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_can_loopback0, compatible, 0, __VA_ARGS__)
#define DT_N_S_can_loopback0_P_compatible_LEN 1
#define DT_N_S_can_loopback0_P_compatible_EXISTS 1
#define DT_N_S_can_loopback0_P_zephyr_deferred_init 0
#define DT_N_S_can_loopback0_P_zephyr_deferred_init_EXISTS 1

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_chosen_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_chosen_NODELABEL_NUM 0
#define DT_N_S_chosen_FOREACH_NODELABEL(fn) 
#define DT_N_S_chosen_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_chosen_CHILD_NUM 0
#define DT_N_S_chosen_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 5
#define DT_N_S_chosen_ORD_STR_SORTABLE 00005

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_RANGES_NUM 0
#define DT_N_S_chosen_FOREACH_RANGE(fn) 
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_IRQ_LEVEL 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /counter
 *
 * Node identifier: DT_N_S_counter
 *
 * Binding (compatible = zephyr,native-posix-counter):
 *   $ZEPHYR_BASE/dts/bindings/counter/zephyr,native-posix-counter.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_counter_PATH "/counter"

/* Node's name with unit-address: */
#define DT_N_S_counter_FULL_NAME "counter"

/* Node parent (/) identifier: */
#define DT_N_S_counter_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_counter_CHILD_IDX 13

/* Helpers for dealing with node labels: */
#define DT_N_S_counter_NODELABEL_NUM 1
#define DT_N_S_counter_FOREACH_NODELABEL(fn) fn(counter0)
#define DT_N_S_counter_FOREACH_NODELABEL_VARGS(fn, ...) fn(counter0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_counter_CHILD_NUM 0
#define DT_N_S_counter_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_counter_FOREACH_CHILD(fn) 
#define DT_N_S_counter_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_counter_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_counter_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_counter_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_counter_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_counter_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_counter_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_counter_ORD 6
#define DT_N_S_counter_ORD_STR_SORTABLE 00006

/* Ordinals for what this node depends on directly: */
#define DT_N_S_counter_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_counter_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_counter_EXISTS 1
#define DT_N_INST_0_zephyr_native_posix_counter DT_N_S_counter
#define DT_N_NODELABEL_counter0                 DT_N_S_counter

/* Macros for properties that are special in the specification: */
#define DT_N_S_counter_REG_NUM 0
#define DT_N_S_counter_RANGES_NUM 0
#define DT_N_S_counter_FOREACH_RANGE(fn) 
#define DT_N_S_counter_IRQ_NUM 0
#define DT_N_S_counter_IRQ_LEVEL 0
#define DT_N_S_counter_COMPAT_MATCHES_zephyr_native_posix_counter 1
#define DT_N_S_counter_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_counter_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_counter_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_counter_COMPAT_MODEL_IDX_0 "native-posix-counter"
#define DT_N_S_counter_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_counter_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_counter_P_wakeup_source 0
#define DT_N_S_counter_P_wakeup_source_EXISTS 1
#define DT_N_S_counter_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_counter_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_counter_P_status "okay"
#define DT_N_S_counter_P_status_STRING_UNQUOTED okay
#define DT_N_S_counter_P_status_STRING_TOKEN okay
#define DT_N_S_counter_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_counter_P_status_IDX_0 "okay"
#define DT_N_S_counter_P_status_IDX_0_EXISTS 1
#define DT_N_S_counter_P_status_ENUM_IDX 1
#define DT_N_S_counter_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_counter_P_status_ENUM_TOKEN okay
#define DT_N_S_counter_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_counter_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_counter, status, 0)
#define DT_N_S_counter_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_counter, status, 0)
#define DT_N_S_counter_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_counter, status, 0, __VA_ARGS__)
#define DT_N_S_counter_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_counter, status, 0, __VA_ARGS__)
#define DT_N_S_counter_P_status_LEN 1
#define DT_N_S_counter_P_status_EXISTS 1
#define DT_N_S_counter_P_compatible {"zephyr,native-posix-counter"}
#define DT_N_S_counter_P_compatible_IDX_0 "zephyr,native-posix-counter"
#define DT_N_S_counter_P_compatible_IDX_0_STRING_UNQUOTED zephyr,native-posix-counter
#define DT_N_S_counter_P_compatible_IDX_0_STRING_TOKEN zephyr_native_posix_counter
#define DT_N_S_counter_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_NATIVE_POSIX_COUNTER
#define DT_N_S_counter_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_counter_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_counter, compatible, 0)
#define DT_N_S_counter_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_counter, compatible, 0)
#define DT_N_S_counter_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_counter, compatible, 0, __VA_ARGS__)
#define DT_N_S_counter_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_counter, compatible, 0, __VA_ARGS__)
#define DT_N_S_counter_P_compatible_LEN 1
#define DT_N_S_counter_P_compatible_EXISTS 1
#define DT_N_S_counter_P_zephyr_deferred_init 0
#define DT_N_S_counter_P_zephyr_deferred_init_EXISTS 1

/*
 * Devicetree node: /dma
 *
 * Node identifier: DT_N_S_dma
 *
 * Binding (compatible = zephyr,dma-emul):
 *   $ZEPHYR_BASE/dts/bindings/dma/zephyr,dma-emul.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_dma_PATH "/dma"

/* Node's name with unit-address: */
#define DT_N_S_dma_FULL_NAME "dma"

/* Node parent (/) identifier: */
#define DT_N_S_dma_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_dma_CHILD_IDX 23

/* Helpers for dealing with node labels: */
#define DT_N_S_dma_NODELABEL_NUM 1
#define DT_N_S_dma_FOREACH_NODELABEL(fn) fn(dma)
#define DT_N_S_dma_FOREACH_NODELABEL_VARGS(fn, ...) fn(dma, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_dma_CHILD_NUM 0
#define DT_N_S_dma_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_dma_FOREACH_CHILD(fn) 
#define DT_N_S_dma_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_dma_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_dma_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_dma_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_dma_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_dma_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_dma_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_dma_ORD 7
#define DT_N_S_dma_ORD_STR_SORTABLE 00007

/* Ordinals for what this node depends on directly: */
#define DT_N_S_dma_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_dma_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_dma_EXISTS 1
#define DT_N_INST_0_zephyr_dma_emul DT_N_S_dma
#define DT_N_NODELABEL_dma          DT_N_S_dma

/* Macros for properties that are special in the specification: */
#define DT_N_S_dma_REG_NUM 0
#define DT_N_S_dma_RANGES_NUM 0
#define DT_N_S_dma_FOREACH_RANGE(fn) 
#define DT_N_S_dma_IRQ_NUM 0
#define DT_N_S_dma_IRQ_LEVEL 0
#define DT_N_S_dma_COMPAT_MATCHES_zephyr_dma_emul 1
#define DT_N_S_dma_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_dma_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_dma_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_dma_COMPAT_MODEL_IDX_0 "dma-emul"
#define DT_N_S_dma_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_dma_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_dma_P_wakeup_source 0
#define DT_N_S_dma_P_wakeup_source_EXISTS 1
#define DT_N_S_dma_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_dma_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_dma_P_compatible {"zephyr,dma-emul"}
#define DT_N_S_dma_P_compatible_IDX_0 "zephyr,dma-emul"
#define DT_N_S_dma_P_compatible_IDX_0_STRING_UNQUOTED zephyr,dma-emul
#define DT_N_S_dma_P_compatible_IDX_0_STRING_TOKEN zephyr_dma_emul
#define DT_N_S_dma_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_DMA_EMUL
#define DT_N_S_dma_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_dma_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_dma, compatible, 0)
#define DT_N_S_dma_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_dma, compatible, 0)
#define DT_N_S_dma_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_dma, compatible, 0, __VA_ARGS__)
#define DT_N_S_dma_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_dma, compatible, 0, __VA_ARGS__)
#define DT_N_S_dma_P_compatible_LEN 1
#define DT_N_S_dma_P_compatible_EXISTS 1
#define DT_N_S_dma_P_zephyr_deferred_init 0
#define DT_N_S_dma_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_dma_P_stack_size 4096
#define DT_N_S_dma_P_stack_size_EXISTS 1

/*
 * Devicetree node: /drv8844
 *
 * Node identifier: DT_N_S_drv8844
 *
 * Binding (compatible = zephyr,gpio-emul):
 *   $ZEPHYR_BASE/dts/bindings/gpio/zephyr,gpio-emul.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_drv8844_PATH "/drv8844"

/* Node's name with unit-address: */
#define DT_N_S_drv8844_FULL_NAME "drv8844"

/* Node parent (/) identifier: */
#define DT_N_S_drv8844_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_drv8844_CHILD_IDX 30

/* Helpers for dealing with node labels: */
#define DT_N_S_drv8844_NODELABEL_NUM 1
#define DT_N_S_drv8844_FOREACH_NODELABEL(fn) fn(drv8844)
#define DT_N_S_drv8844_FOREACH_NODELABEL_VARGS(fn, ...) fn(drv8844, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_drv8844_CHILD_NUM 0
#define DT_N_S_drv8844_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_drv8844_FOREACH_CHILD(fn) 
#define DT_N_S_drv8844_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_drv8844_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_drv8844_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_drv8844_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_drv8844_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_drv8844_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_drv8844_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_drv8844_ORD 8
#define DT_N_S_drv8844_ORD_STR_SORTABLE 00008

/* Ordinals for what this node depends on directly: */
#define DT_N_S_drv8844_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_drv8844_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_drv8844_EXISTS 1
#define DT_N_ALIAS_drv8844           DT_N_S_drv8844
#define DT_N_INST_2_zephyr_gpio_emul DT_N_S_drv8844
#define DT_N_NODELABEL_drv8844       DT_N_S_drv8844

/* Macros for properties that are special in the specification: */
#define DT_N_S_drv8844_REG_NUM 0
#define DT_N_S_drv8844_RANGES_NUM 0
#define DT_N_S_drv8844_FOREACH_RANGE(fn) 
#define DT_N_S_drv8844_IRQ_NUM 0
#define DT_N_S_drv8844_IRQ_LEVEL 0
#define DT_N_S_drv8844_COMPAT_MATCHES_zephyr_gpio_emul 1
#define DT_N_S_drv8844_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_drv8844_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_drv8844_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_drv8844_COMPAT_MODEL_IDX_0 "gpio-emul"
#define DT_N_S_drv8844_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_drv8844_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_drv8844_P_gpio_controller 1
#define DT_N_S_drv8844_P_gpio_controller_EXISTS 1
#define DT_N_S_drv8844_P_ngpios 32
#define DT_N_S_drv8844_P_ngpios_EXISTS 1
#define DT_N_S_drv8844_P_wakeup_source 0
#define DT_N_S_drv8844_P_wakeup_source_EXISTS 1
#define DT_N_S_drv8844_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_drv8844_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_drv8844_P_status "okay"
#define DT_N_S_drv8844_P_status_STRING_UNQUOTED okay
#define DT_N_S_drv8844_P_status_STRING_TOKEN okay
#define DT_N_S_drv8844_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_drv8844_P_status_IDX_0 "okay"
#define DT_N_S_drv8844_P_status_IDX_0_EXISTS 1
#define DT_N_S_drv8844_P_status_ENUM_IDX 1
#define DT_N_S_drv8844_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_drv8844_P_status_ENUM_TOKEN okay
#define DT_N_S_drv8844_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_drv8844_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_drv8844, status, 0)
#define DT_N_S_drv8844_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_drv8844, status, 0)
#define DT_N_S_drv8844_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_drv8844, status, 0, __VA_ARGS__)
#define DT_N_S_drv8844_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_drv8844, status, 0, __VA_ARGS__)
#define DT_N_S_drv8844_P_status_LEN 1
#define DT_N_S_drv8844_P_status_EXISTS 1
#define DT_N_S_drv8844_P_compatible {"zephyr,gpio-emul"}
#define DT_N_S_drv8844_P_compatible_IDX_0 "zephyr,gpio-emul"
#define DT_N_S_drv8844_P_compatible_IDX_0_STRING_UNQUOTED zephyr,gpio-emul
#define DT_N_S_drv8844_P_compatible_IDX_0_STRING_TOKEN zephyr_gpio_emul
#define DT_N_S_drv8844_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_GPIO_EMUL
#define DT_N_S_drv8844_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_drv8844_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_drv8844, compatible, 0)
#define DT_N_S_drv8844_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_drv8844, compatible, 0)
#define DT_N_S_drv8844_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_drv8844, compatible, 0, __VA_ARGS__)
#define DT_N_S_drv8844_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_drv8844, compatible, 0, __VA_ARGS__)
#define DT_N_S_drv8844_P_compatible_LEN 1
#define DT_N_S_drv8844_P_compatible_EXISTS 1
#define DT_N_S_drv8844_P_zephyr_deferred_init 0
#define DT_N_S_drv8844_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_drv8844_P_rising_edge 1
#define DT_N_S_drv8844_P_rising_edge_EXISTS 1
#define DT_N_S_drv8844_P_falling_edge 1
#define DT_N_S_drv8844_P_falling_edge_EXISTS 1
#define DT_N_S_drv8844_P_high_level 1
#define DT_N_S_drv8844_P_high_level_EXISTS 1
#define DT_N_S_drv8844_P_low_level 1
#define DT_N_S_drv8844_P_low_level_EXISTS 1

/*
 * Devicetree node: /eeprom
 *
 * Node identifier: DT_N_S_eeprom
 *
 * Binding (compatible = zephyr,sim-eeprom):
 *   $ZEPHYR_BASE/dts/bindings/mtd/zephyr,sim-eeprom.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_eeprom_PATH "/eeprom"

/* Node's name with unit-address: */
#define DT_N_S_eeprom_FULL_NAME "eeprom"

/* Node parent (/) identifier: */
#define DT_N_S_eeprom_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_eeprom_CHILD_IDX 6

/* Helpers for dealing with node labels: */
#define DT_N_S_eeprom_NODELABEL_NUM 1
#define DT_N_S_eeprom_FOREACH_NODELABEL(fn) fn(eeprom0)
#define DT_N_S_eeprom_FOREACH_NODELABEL_VARGS(fn, ...) fn(eeprom0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_eeprom_CHILD_NUM 0
#define DT_N_S_eeprom_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_eeprom_FOREACH_CHILD(fn) 
#define DT_N_S_eeprom_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_eeprom_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_eeprom_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_eeprom_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_eeprom_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_eeprom_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_eeprom_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_eeprom_ORD 9
#define DT_N_S_eeprom_ORD_STR_SORTABLE 00009

/* Ordinals for what this node depends on directly: */
#define DT_N_S_eeprom_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_eeprom_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_eeprom_EXISTS 1
#define DT_N_ALIAS_eeprom_0           DT_N_S_eeprom
#define DT_N_INST_0_zephyr_sim_eeprom DT_N_S_eeprom
#define DT_N_NODELABEL_eeprom0        DT_N_S_eeprom

/* Macros for properties that are special in the specification: */
#define DT_N_S_eeprom_REG_NUM 0
#define DT_N_S_eeprom_RANGES_NUM 0
#define DT_N_S_eeprom_FOREACH_RANGE(fn) 
#define DT_N_S_eeprom_IRQ_NUM 0
#define DT_N_S_eeprom_IRQ_LEVEL 0
#define DT_N_S_eeprom_COMPAT_MATCHES_zephyr_sim_eeprom 1
#define DT_N_S_eeprom_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_eeprom_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_eeprom_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_eeprom_COMPAT_MODEL_IDX_0 "sim-eeprom"
#define DT_N_S_eeprom_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_eeprom_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_eeprom_P_wakeup_source 0
#define DT_N_S_eeprom_P_wakeup_source_EXISTS 1
#define DT_N_S_eeprom_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_eeprom_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_eeprom_P_status "okay"
#define DT_N_S_eeprom_P_status_STRING_UNQUOTED okay
#define DT_N_S_eeprom_P_status_STRING_TOKEN okay
#define DT_N_S_eeprom_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_eeprom_P_status_IDX_0 "okay"
#define DT_N_S_eeprom_P_status_IDX_0_EXISTS 1
#define DT_N_S_eeprom_P_status_ENUM_IDX 1
#define DT_N_S_eeprom_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_eeprom_P_status_ENUM_TOKEN okay
#define DT_N_S_eeprom_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_eeprom_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_eeprom, status, 0)
#define DT_N_S_eeprom_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_eeprom, status, 0)
#define DT_N_S_eeprom_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_eeprom, status, 0, __VA_ARGS__)
#define DT_N_S_eeprom_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_eeprom, status, 0, __VA_ARGS__)
#define DT_N_S_eeprom_P_status_LEN 1
#define DT_N_S_eeprom_P_status_EXISTS 1
#define DT_N_S_eeprom_P_compatible {"zephyr,sim-eeprom"}
#define DT_N_S_eeprom_P_compatible_IDX_0 "zephyr,sim-eeprom"
#define DT_N_S_eeprom_P_compatible_IDX_0_STRING_UNQUOTED zephyr,sim-eeprom
#define DT_N_S_eeprom_P_compatible_IDX_0_STRING_TOKEN zephyr_sim_eeprom
#define DT_N_S_eeprom_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_SIM_EEPROM
#define DT_N_S_eeprom_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_eeprom_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_eeprom, compatible, 0)
#define DT_N_S_eeprom_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_eeprom, compatible, 0)
#define DT_N_S_eeprom_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_eeprom, compatible, 0, __VA_ARGS__)
#define DT_N_S_eeprom_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_eeprom, compatible, 0, __VA_ARGS__)
#define DT_N_S_eeprom_P_compatible_LEN 1
#define DT_N_S_eeprom_P_compatible_EXISTS 1
#define DT_N_S_eeprom_P_zephyr_deferred_init 0
#define DT_N_S_eeprom_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_eeprom_P_size 32768
#define DT_N_S_eeprom_P_size_EXISTS 1
#define DT_N_S_eeprom_P_read_only 0
#define DT_N_S_eeprom_P_read_only_EXISTS 1

/*
 * Devicetree node: /espi@300
 *
 * Node identifier: DT_N_S_espi_300
 *
 * Binding (compatible = zephyr,espi-emul-controller):
 *   $ZEPHYR_BASE/dts/bindings/espi/zephyr,espi-emul-controller.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_espi_300_PATH "/espi@300"

/* Node's name with unit-address: */
#define DT_N_S_espi_300_FULL_NAME "espi@300"

/* Node parent (/) identifier: */
#define DT_N_S_espi_300_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_espi_300_CHILD_IDX 9

/* Helpers for dealing with node labels: */
#define DT_N_S_espi_300_NODELABEL_NUM 1
#define DT_N_S_espi_300_FOREACH_NODELABEL(fn) fn(espi0)
#define DT_N_S_espi_300_FOREACH_NODELABEL_VARGS(fn, ...) fn(espi0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_espi_300_CHILD_NUM 0
#define DT_N_S_espi_300_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_espi_300_FOREACH_CHILD(fn) 
#define DT_N_S_espi_300_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_espi_300_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_espi_300_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_espi_300_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_espi_300_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_espi_300_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_espi_300_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_espi_300_ORD 10
#define DT_N_S_espi_300_ORD_STR_SORTABLE 00010

/* Ordinals for what this node depends on directly: */
#define DT_N_S_espi_300_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_espi_300_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_espi_300_EXISTS 1
#define DT_N_INST_0_zephyr_espi_emul_controller DT_N_S_espi_300
#define DT_N_NODELABEL_espi0                    DT_N_S_espi_300

/* Macros for properties that are special in the specification: */
#define DT_N_S_espi_300_REG_NUM 1
#define DT_N_S_espi_300_REG_IDX_0_EXISTS 1
#define DT_N_S_espi_300_REG_IDX_0_VAL_ADDRESS 768 /* 0x300 */
#define DT_N_S_espi_300_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_espi_300_RANGES_NUM 0
#define DT_N_S_espi_300_FOREACH_RANGE(fn) 
#define DT_N_S_espi_300_IRQ_NUM 0
#define DT_N_S_espi_300_IRQ_LEVEL 0
#define DT_N_S_espi_300_COMPAT_MATCHES_zephyr_espi_emul_controller 1
#define DT_N_S_espi_300_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_espi_300_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_espi_300_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_espi_300_COMPAT_MODEL_IDX_0 "espi-emul-controller"
#define DT_N_S_espi_300_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_espi_300_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_espi_300_P_wakeup_source 0
#define DT_N_S_espi_300_P_wakeup_source_EXISTS 1
#define DT_N_S_espi_300_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_espi_300_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_espi_300_P_status "okay"
#define DT_N_S_espi_300_P_status_STRING_UNQUOTED okay
#define DT_N_S_espi_300_P_status_STRING_TOKEN okay
#define DT_N_S_espi_300_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_espi_300_P_status_IDX_0 "okay"
#define DT_N_S_espi_300_P_status_IDX_0_EXISTS 1
#define DT_N_S_espi_300_P_status_ENUM_IDX 1
#define DT_N_S_espi_300_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_espi_300_P_status_ENUM_TOKEN okay
#define DT_N_S_espi_300_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_espi_300_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_espi_300, status, 0)
#define DT_N_S_espi_300_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_espi_300, status, 0)
#define DT_N_S_espi_300_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_espi_300, status, 0, __VA_ARGS__)
#define DT_N_S_espi_300_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_espi_300, status, 0, __VA_ARGS__)
#define DT_N_S_espi_300_P_status_LEN 1
#define DT_N_S_espi_300_P_status_EXISTS 1
#define DT_N_S_espi_300_P_compatible {"zephyr,espi-emul-controller"}
#define DT_N_S_espi_300_P_compatible_IDX_0 "zephyr,espi-emul-controller"
#define DT_N_S_espi_300_P_compatible_IDX_0_STRING_UNQUOTED zephyr,espi-emul-controller
#define DT_N_S_espi_300_P_compatible_IDX_0_STRING_TOKEN zephyr_espi_emul_controller
#define DT_N_S_espi_300_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_ESPI_EMUL_CONTROLLER
#define DT_N_S_espi_300_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_espi_300_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_espi_300, compatible, 0)
#define DT_N_S_espi_300_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_espi_300, compatible, 0)
#define DT_N_S_espi_300_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_espi_300, compatible, 0, __VA_ARGS__)
#define DT_N_S_espi_300_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_espi_300, compatible, 0, __VA_ARGS__)
#define DT_N_S_espi_300_P_compatible_LEN 1
#define DT_N_S_espi_300_P_compatible_EXISTS 1
#define DT_N_S_espi_300_P_reg {768 /* 0x300 */, 4 /* 0x4 */}
#define DT_N_S_espi_300_P_reg_IDX_0 768
#define DT_N_S_espi_300_P_reg_IDX_0_EXISTS 1
#define DT_N_S_espi_300_P_reg_IDX_1 4
#define DT_N_S_espi_300_P_reg_IDX_1_EXISTS 1
#define DT_N_S_espi_300_P_reg_EXISTS 1
#define DT_N_S_espi_300_P_zephyr_deferred_init 0
#define DT_N_S_espi_300_P_zephyr_deferred_init_EXISTS 1

/*
 * Devicetree node: /i2c@21
 *
 * Node identifier: DT_N_S_i2c_21
 *
 * Binding (compatible = zephyr,i2c-emul-controller):
 *   $ZEPHYR_BASE/dts/bindings/i2c/zephyr,i2c-emul-controller.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_i2c_21_PATH "/i2c@21"

/* Node's name with unit-address: */
#define DT_N_S_i2c_21_FULL_NAME "i2c@21"

/* Node parent (/) identifier: */
#define DT_N_S_i2c_21_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_i2c_21_CHILD_IDX 32

/* Helpers for dealing with node labels: */
#define DT_N_S_i2c_21_NODELABEL_NUM 1
#define DT_N_S_i2c_21_FOREACH_NODELABEL(fn) fn(fake_usb_i2c)
#define DT_N_S_i2c_21_FOREACH_NODELABEL_VARGS(fn, ...) fn(fake_usb_i2c, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_i2c_21_CHILD_NUM 0
#define DT_N_S_i2c_21_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_i2c_21_FOREACH_CHILD(fn) 
#define DT_N_S_i2c_21_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_i2c_21_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_i2c_21_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_i2c_21_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_i2c_21_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_i2c_21_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_i2c_21_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_i2c_21_ORD 11
#define DT_N_S_i2c_21_ORD_STR_SORTABLE 00011

/* Ordinals for what this node depends on directly: */
#define DT_N_S_i2c_21_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_i2c_21_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_i2c_21_EXISTS 1
#define DT_N_INST_1_zephyr_i2c_emul_controller DT_N_S_i2c_21
#define DT_N_NODELABEL_fake_usb_i2c            DT_N_S_i2c_21

/* Macros for properties that are special in the specification: */
#define DT_N_S_i2c_21_REG_NUM 1
#define DT_N_S_i2c_21_REG_IDX_0_EXISTS 1
#define DT_N_S_i2c_21_REG_IDX_0_VAL_ADDRESS 33 /* 0x21 */
#define DT_N_S_i2c_21_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_i2c_21_RANGES_NUM 0
#define DT_N_S_i2c_21_FOREACH_RANGE(fn) 
#define DT_N_S_i2c_21_IRQ_NUM 0
#define DT_N_S_i2c_21_IRQ_LEVEL 0
#define DT_N_S_i2c_21_COMPAT_MATCHES_zephyr_i2c_emul_controller 1
#define DT_N_S_i2c_21_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_i2c_21_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_i2c_21_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_i2c_21_COMPAT_MODEL_IDX_0 "i2c-emul-controller"
#define DT_N_S_i2c_21_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_i2c_21_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_i2c_21_P_wakeup_source 0
#define DT_N_S_i2c_21_P_wakeup_source_EXISTS 1
#define DT_N_S_i2c_21_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_i2c_21_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_i2c_21_P_status "okay"
#define DT_N_S_i2c_21_P_status_STRING_UNQUOTED okay
#define DT_N_S_i2c_21_P_status_STRING_TOKEN okay
#define DT_N_S_i2c_21_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_i2c_21_P_status_IDX_0 "okay"
#define DT_N_S_i2c_21_P_status_IDX_0_EXISTS 1
#define DT_N_S_i2c_21_P_status_ENUM_IDX 1
#define DT_N_S_i2c_21_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_i2c_21_P_status_ENUM_TOKEN okay
#define DT_N_S_i2c_21_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_i2c_21_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_i2c_21, status, 0)
#define DT_N_S_i2c_21_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_i2c_21, status, 0)
#define DT_N_S_i2c_21_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_i2c_21, status, 0, __VA_ARGS__)
#define DT_N_S_i2c_21_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_i2c_21, status, 0, __VA_ARGS__)
#define DT_N_S_i2c_21_P_status_LEN 1
#define DT_N_S_i2c_21_P_status_EXISTS 1
#define DT_N_S_i2c_21_P_compatible {"zephyr,i2c-emul-controller"}
#define DT_N_S_i2c_21_P_compatible_IDX_0 "zephyr,i2c-emul-controller"
#define DT_N_S_i2c_21_P_compatible_IDX_0_STRING_UNQUOTED zephyr,i2c-emul-controller
#define DT_N_S_i2c_21_P_compatible_IDX_0_STRING_TOKEN zephyr_i2c_emul_controller
#define DT_N_S_i2c_21_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_I2C_EMUL_CONTROLLER
#define DT_N_S_i2c_21_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_i2c_21_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_i2c_21, compatible, 0)
#define DT_N_S_i2c_21_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_i2c_21, compatible, 0)
#define DT_N_S_i2c_21_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_i2c_21, compatible, 0, __VA_ARGS__)
#define DT_N_S_i2c_21_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_i2c_21, compatible, 0, __VA_ARGS__)
#define DT_N_S_i2c_21_P_compatible_LEN 1
#define DT_N_S_i2c_21_P_compatible_EXISTS 1
#define DT_N_S_i2c_21_P_reg {33 /* 0x21 */, 4 /* 0x4 */}
#define DT_N_S_i2c_21_P_reg_IDX_0 33
#define DT_N_S_i2c_21_P_reg_IDX_0_EXISTS 1
#define DT_N_S_i2c_21_P_reg_IDX_1 4
#define DT_N_S_i2c_21_P_reg_IDX_1_EXISTS 1
#define DT_N_S_i2c_21_P_reg_EXISTS 1
#define DT_N_S_i2c_21_P_zephyr_deferred_init 0
#define DT_N_S_i2c_21_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_i2c_21_P_clock_frequency 100000
#define DT_N_S_i2c_21_P_clock_frequency_EXISTS 1
#define DT_N_S_i2c_21_P_sq_size 4
#define DT_N_S_i2c_21_P_sq_size_EXISTS 1
#define DT_N_S_i2c_21_P_cq_size 4
#define DT_N_S_i2c_21_P_cq_size_EXISTS 1

/*
 * Devicetree node: /i2c@100
 *
 * Node identifier: DT_N_S_i2c_100
 *
 * Binding (compatible = zephyr,i2c-emul-controller):
 *   $ZEPHYR_BASE/dts/bindings/i2c/zephyr,i2c-emul-controller.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_i2c_100_PATH "/i2c@100"

/* Node's name with unit-address: */
#define DT_N_S_i2c_100_FULL_NAME "i2c@100"

/* Node parent (/) identifier: */
#define DT_N_S_i2c_100_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_i2c_100_CHILD_IDX 7

/* Helpers for dealing with node labels: */
#define DT_N_S_i2c_100_NODELABEL_NUM 1
#define DT_N_S_i2c_100_FOREACH_NODELABEL(fn) fn(i2c0)
#define DT_N_S_i2c_100_FOREACH_NODELABEL_VARGS(fn, ...) fn(i2c0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_i2c_100_CHILD_NUM 0
#define DT_N_S_i2c_100_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_i2c_100_FOREACH_CHILD(fn) 
#define DT_N_S_i2c_100_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_i2c_100_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_i2c_100_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_i2c_100_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_i2c_100_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_i2c_100_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_i2c_100_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_i2c_100_ORD 12
#define DT_N_S_i2c_100_ORD_STR_SORTABLE 00012

/* Ordinals for what this node depends on directly: */
#define DT_N_S_i2c_100_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_i2c_100_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_i2c_100_EXISTS 1
#define DT_N_ALIAS_i2c_0                       DT_N_S_i2c_100
#define DT_N_ALIAS_i2c                         DT_N_S_i2c_100
#define DT_N_INST_0_zephyr_i2c_emul_controller DT_N_S_i2c_100
#define DT_N_NODELABEL_i2c0                    DT_N_S_i2c_100

/* Macros for properties that are special in the specification: */
#define DT_N_S_i2c_100_REG_NUM 1
#define DT_N_S_i2c_100_REG_IDX_0_EXISTS 1
#define DT_N_S_i2c_100_REG_IDX_0_VAL_ADDRESS 256 /* 0x100 */
#define DT_N_S_i2c_100_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_i2c_100_RANGES_NUM 0
#define DT_N_S_i2c_100_FOREACH_RANGE(fn) 
#define DT_N_S_i2c_100_IRQ_NUM 0
#define DT_N_S_i2c_100_IRQ_LEVEL 0
#define DT_N_S_i2c_100_COMPAT_MATCHES_zephyr_i2c_emul_controller 1
#define DT_N_S_i2c_100_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_i2c_100_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_i2c_100_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_i2c_100_COMPAT_MODEL_IDX_0 "i2c-emul-controller"
#define DT_N_S_i2c_100_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_i2c_100_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_i2c_100_P_wakeup_source 0
#define DT_N_S_i2c_100_P_wakeup_source_EXISTS 1
#define DT_N_S_i2c_100_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_i2c_100_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_i2c_100_P_status "okay"
#define DT_N_S_i2c_100_P_status_STRING_UNQUOTED okay
#define DT_N_S_i2c_100_P_status_STRING_TOKEN okay
#define DT_N_S_i2c_100_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_i2c_100_P_status_IDX_0 "okay"
#define DT_N_S_i2c_100_P_status_IDX_0_EXISTS 1
#define DT_N_S_i2c_100_P_status_ENUM_IDX 1
#define DT_N_S_i2c_100_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_i2c_100_P_status_ENUM_TOKEN okay
#define DT_N_S_i2c_100_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_i2c_100_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_i2c_100, status, 0)
#define DT_N_S_i2c_100_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_i2c_100, status, 0)
#define DT_N_S_i2c_100_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_i2c_100, status, 0, __VA_ARGS__)
#define DT_N_S_i2c_100_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_i2c_100, status, 0, __VA_ARGS__)
#define DT_N_S_i2c_100_P_status_LEN 1
#define DT_N_S_i2c_100_P_status_EXISTS 1
#define DT_N_S_i2c_100_P_compatible {"zephyr,i2c-emul-controller"}
#define DT_N_S_i2c_100_P_compatible_IDX_0 "zephyr,i2c-emul-controller"
#define DT_N_S_i2c_100_P_compatible_IDX_0_STRING_UNQUOTED zephyr,i2c-emul-controller
#define DT_N_S_i2c_100_P_compatible_IDX_0_STRING_TOKEN zephyr_i2c_emul_controller
#define DT_N_S_i2c_100_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_I2C_EMUL_CONTROLLER
#define DT_N_S_i2c_100_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_i2c_100_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_i2c_100, compatible, 0)
#define DT_N_S_i2c_100_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_i2c_100, compatible, 0)
#define DT_N_S_i2c_100_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_i2c_100, compatible, 0, __VA_ARGS__)
#define DT_N_S_i2c_100_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_i2c_100, compatible, 0, __VA_ARGS__)
#define DT_N_S_i2c_100_P_compatible_LEN 1
#define DT_N_S_i2c_100_P_compatible_EXISTS 1
#define DT_N_S_i2c_100_P_reg {256 /* 0x100 */, 4 /* 0x4 */}
#define DT_N_S_i2c_100_P_reg_IDX_0 256
#define DT_N_S_i2c_100_P_reg_IDX_0_EXISTS 1
#define DT_N_S_i2c_100_P_reg_IDX_1 4
#define DT_N_S_i2c_100_P_reg_IDX_1_EXISTS 1
#define DT_N_S_i2c_100_P_reg_EXISTS 1
#define DT_N_S_i2c_100_P_zephyr_deferred_init 0
#define DT_N_S_i2c_100_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_i2c_100_P_clock_frequency 100000
#define DT_N_S_i2c_100_P_clock_frequency_EXISTS 1
#define DT_N_S_i2c_100_P_sq_size 4
#define DT_N_S_i2c_100_P_sq_size_EXISTS 1
#define DT_N_S_i2c_100_P_cq_size 4
#define DT_N_S_i2c_100_P_cq_size_EXISTS 1

/*
 * Devicetree node: /lp5018
 *
 * Node identifier: DT_N_S_lp5018
 *
 * Binding (compatible = zephyr,gpio-emul):
 *   $ZEPHYR_BASE/dts/bindings/gpio/zephyr,gpio-emul.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_lp5018_PATH "/lp5018"

/* Node's name with unit-address: */
#define DT_N_S_lp5018_FULL_NAME "lp5018"

/* Node parent (/) identifier: */
#define DT_N_S_lp5018_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_lp5018_CHILD_IDX 31

/* Helpers for dealing with node labels: */
#define DT_N_S_lp5018_NODELABEL_NUM 1
#define DT_N_S_lp5018_FOREACH_NODELABEL(fn) fn(lp5018)
#define DT_N_S_lp5018_FOREACH_NODELABEL_VARGS(fn, ...) fn(lp5018, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_lp5018_CHILD_NUM 0
#define DT_N_S_lp5018_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_lp5018_FOREACH_CHILD(fn) 
#define DT_N_S_lp5018_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_lp5018_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_lp5018_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_lp5018_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_lp5018_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_lp5018_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_lp5018_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_lp5018_ORD 13
#define DT_N_S_lp5018_ORD_STR_SORTABLE 00013

/* Ordinals for what this node depends on directly: */
#define DT_N_S_lp5018_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_lp5018_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_lp5018_EXISTS 1
#define DT_N_ALIAS_button_led_driver DT_N_S_lp5018
#define DT_N_INST_3_zephyr_gpio_emul DT_N_S_lp5018
#define DT_N_NODELABEL_lp5018        DT_N_S_lp5018

/* Macros for properties that are special in the specification: */
#define DT_N_S_lp5018_REG_NUM 0
#define DT_N_S_lp5018_RANGES_NUM 0
#define DT_N_S_lp5018_FOREACH_RANGE(fn) 
#define DT_N_S_lp5018_IRQ_NUM 0
#define DT_N_S_lp5018_IRQ_LEVEL 0
#define DT_N_S_lp5018_COMPAT_MATCHES_zephyr_gpio_emul 1
#define DT_N_S_lp5018_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_lp5018_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_lp5018_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_lp5018_COMPAT_MODEL_IDX_0 "gpio-emul"
#define DT_N_S_lp5018_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_lp5018_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_lp5018_P_gpio_controller 1
#define DT_N_S_lp5018_P_gpio_controller_EXISTS 1
#define DT_N_S_lp5018_P_ngpios 32
#define DT_N_S_lp5018_P_ngpios_EXISTS 1
#define DT_N_S_lp5018_P_wakeup_source 0
#define DT_N_S_lp5018_P_wakeup_source_EXISTS 1
#define DT_N_S_lp5018_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_lp5018_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_lp5018_P_status "okay"
#define DT_N_S_lp5018_P_status_STRING_UNQUOTED okay
#define DT_N_S_lp5018_P_status_STRING_TOKEN okay
#define DT_N_S_lp5018_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_lp5018_P_status_IDX_0 "okay"
#define DT_N_S_lp5018_P_status_IDX_0_EXISTS 1
#define DT_N_S_lp5018_P_status_ENUM_IDX 1
#define DT_N_S_lp5018_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_lp5018_P_status_ENUM_TOKEN okay
#define DT_N_S_lp5018_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_lp5018_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_lp5018, status, 0)
#define DT_N_S_lp5018_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_lp5018, status, 0)
#define DT_N_S_lp5018_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_lp5018, status, 0, __VA_ARGS__)
#define DT_N_S_lp5018_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_lp5018, status, 0, __VA_ARGS__)
#define DT_N_S_lp5018_P_status_LEN 1
#define DT_N_S_lp5018_P_status_EXISTS 1
#define DT_N_S_lp5018_P_compatible {"zephyr,gpio-emul"}
#define DT_N_S_lp5018_P_compatible_IDX_0 "zephyr,gpio-emul"
#define DT_N_S_lp5018_P_compatible_IDX_0_STRING_UNQUOTED zephyr,gpio-emul
#define DT_N_S_lp5018_P_compatible_IDX_0_STRING_TOKEN zephyr_gpio_emul
#define DT_N_S_lp5018_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_GPIO_EMUL
#define DT_N_S_lp5018_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_lp5018_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_lp5018, compatible, 0)
#define DT_N_S_lp5018_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_lp5018, compatible, 0)
#define DT_N_S_lp5018_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_lp5018, compatible, 0, __VA_ARGS__)
#define DT_N_S_lp5018_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_lp5018, compatible, 0, __VA_ARGS__)
#define DT_N_S_lp5018_P_compatible_LEN 1
#define DT_N_S_lp5018_P_compatible_EXISTS 1
#define DT_N_S_lp5018_P_zephyr_deferred_init 0
#define DT_N_S_lp5018_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_lp5018_P_rising_edge 1
#define DT_N_S_lp5018_P_rising_edge_EXISTS 1
#define DT_N_S_lp5018_P_falling_edge 1
#define DT_N_S_lp5018_P_falling_edge_EXISTS 1
#define DT_N_S_lp5018_P_high_level 1
#define DT_N_S_lp5018_P_high_level_EXISTS 1
#define DT_N_S_lp5018_P_low_level 1
#define DT_N_S_lp5018_P_low_level_EXISTS 1

/*
 * Devicetree node: /gpio@900
 *
 * Node identifier: DT_N_S_gpio_900
 *
 * Binding (compatible = zephyr,gpio-emul):
 *   $ZEPHYR_BASE/dts/bindings/gpio/zephyr,gpio-emul.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_gpio_900_PATH "/gpio@900"

/* Node's name with unit-address: */
#define DT_N_S_gpio_900_FULL_NAME "gpio@900"

/* Node parent (/) identifier: */
#define DT_N_S_gpio_900_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_gpio_900_CHILD_IDX 15

/* Helpers for dealing with node labels: */
#define DT_N_S_gpio_900_NODELABEL_NUM 1
#define DT_N_S_gpio_900_FOREACH_NODELABEL(fn) fn(gpio1)
#define DT_N_S_gpio_900_FOREACH_NODELABEL_VARGS(fn, ...) fn(gpio1, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_gpio_900_CHILD_NUM 1
#define DT_N_S_gpio_900_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_gpio_900_FOREACH_CHILD(fn) fn(DT_N_S_gpio_900_S_sdl_gpio)
#define DT_N_S_gpio_900_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_gpio_900_S_sdl_gpio)
#define DT_N_S_gpio_900_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_gpio_900_S_sdl_gpio, __VA_ARGS__)
#define DT_N_S_gpio_900_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_900_S_sdl_gpio, __VA_ARGS__)
#define DT_N_S_gpio_900_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_gpio_900_S_sdl_gpio)
#define DT_N_S_gpio_900_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_gpio_900_S_sdl_gpio)
#define DT_N_S_gpio_900_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_gpio_900_S_sdl_gpio, __VA_ARGS__)
#define DT_N_S_gpio_900_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_900_S_sdl_gpio, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_gpio_900_ORD 14
#define DT_N_S_gpio_900_ORD_STR_SORTABLE 00014

/* Ordinals for what this node depends on directly: */
#define DT_N_S_gpio_900_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_gpio_900_SUPPORTS_ORDS \
	15, /* /keys */ \
	21, /* /qdec */ \
	65, /* /gpio@900/sdl_gpio */ \
	66, /* /keys/button0 */ \
	67, /* /keys/button1 */ \
	68, /* /keys/button_enter */ \
	69, /* /keys/button_left */ \
	70, /* /keys/button_right */ \
	71, /* /keys/encoder_button */

/* Existence and alternate IDs: */
#define DT_N_S_gpio_900_EXISTS 1
#define DT_N_INST_1_zephyr_gpio_emul DT_N_S_gpio_900
#define DT_N_NODELABEL_gpio1         DT_N_S_gpio_900

/* Macros for properties that are special in the specification: */
#define DT_N_S_gpio_900_REG_NUM 1
#define DT_N_S_gpio_900_REG_IDX_0_EXISTS 1
#define DT_N_S_gpio_900_REG_IDX_0_VAL_ADDRESS 2304 /* 0x900 */
#define DT_N_S_gpio_900_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_gpio_900_RANGES_NUM 0
#define DT_N_S_gpio_900_FOREACH_RANGE(fn) 
#define DT_N_S_gpio_900_IRQ_NUM 0
#define DT_N_S_gpio_900_IRQ_LEVEL 0
#define DT_N_S_gpio_900_COMPAT_MATCHES_zephyr_gpio_emul 1
#define DT_N_S_gpio_900_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_gpio_900_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_gpio_900_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_gpio_900_COMPAT_MODEL_IDX_0 "gpio-emul"
#define DT_N_S_gpio_900_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_gpio_900_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_gpio_900_P_gpio_controller 1
#define DT_N_S_gpio_900_P_gpio_controller_EXISTS 1
#define DT_N_S_gpio_900_P_ngpios 9
#define DT_N_S_gpio_900_P_ngpios_EXISTS 1
#define DT_N_S_gpio_900_P_wakeup_source 0
#define DT_N_S_gpio_900_P_wakeup_source_EXISTS 1
#define DT_N_S_gpio_900_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_gpio_900_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_gpio_900_P_status "okay"
#define DT_N_S_gpio_900_P_status_STRING_UNQUOTED okay
#define DT_N_S_gpio_900_P_status_STRING_TOKEN okay
#define DT_N_S_gpio_900_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_gpio_900_P_status_IDX_0 "okay"
#define DT_N_S_gpio_900_P_status_IDX_0_EXISTS 1
#define DT_N_S_gpio_900_P_status_ENUM_IDX 1
#define DT_N_S_gpio_900_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_gpio_900_P_status_ENUM_TOKEN okay
#define DT_N_S_gpio_900_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_gpio_900_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_900, status, 0)
#define DT_N_S_gpio_900_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_900, status, 0)
#define DT_N_S_gpio_900_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_900, status, 0, __VA_ARGS__)
#define DT_N_S_gpio_900_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_900, status, 0, __VA_ARGS__)
#define DT_N_S_gpio_900_P_status_LEN 1
#define DT_N_S_gpio_900_P_status_EXISTS 1
#define DT_N_S_gpio_900_P_compatible {"zephyr,gpio-emul"}
#define DT_N_S_gpio_900_P_compatible_IDX_0 "zephyr,gpio-emul"
#define DT_N_S_gpio_900_P_compatible_IDX_0_STRING_UNQUOTED zephyr,gpio-emul
#define DT_N_S_gpio_900_P_compatible_IDX_0_STRING_TOKEN zephyr_gpio_emul
#define DT_N_S_gpio_900_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_GPIO_EMUL
#define DT_N_S_gpio_900_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_gpio_900_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_900, compatible, 0)
#define DT_N_S_gpio_900_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_900, compatible, 0)
#define DT_N_S_gpio_900_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_900, compatible, 0, __VA_ARGS__)
#define DT_N_S_gpio_900_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_900, compatible, 0, __VA_ARGS__)
#define DT_N_S_gpio_900_P_compatible_LEN 1
#define DT_N_S_gpio_900_P_compatible_EXISTS 1
#define DT_N_S_gpio_900_P_reg {2304 /* 0x900 */, 4 /* 0x4 */}
#define DT_N_S_gpio_900_P_reg_IDX_0 2304
#define DT_N_S_gpio_900_P_reg_IDX_0_EXISTS 1
#define DT_N_S_gpio_900_P_reg_IDX_1 4
#define DT_N_S_gpio_900_P_reg_IDX_1_EXISTS 1
#define DT_N_S_gpio_900_P_reg_EXISTS 1
#define DT_N_S_gpio_900_P_zephyr_deferred_init 0
#define DT_N_S_gpio_900_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_gpio_900_P_rising_edge 1
#define DT_N_S_gpio_900_P_rising_edge_EXISTS 1
#define DT_N_S_gpio_900_P_falling_edge 1
#define DT_N_S_gpio_900_P_falling_edge_EXISTS 1
#define DT_N_S_gpio_900_P_high_level 1
#define DT_N_S_gpio_900_P_high_level_EXISTS 1
#define DT_N_S_gpio_900_P_low_level 1
#define DT_N_S_gpio_900_P_low_level_EXISTS 1

/*
 * Devicetree node: /keys
 *
 * Node identifier: DT_N_S_keys
 *
 * Binding (compatible = gpio-keys):
 *   $ZEPHYR_BASE/dts/bindings/input/gpio-keys.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_keys_PATH "/keys"

/* Node's name with unit-address: */
#define DT_N_S_keys_FULL_NAME "keys"

/* Node parent (/) identifier: */
#define DT_N_S_keys_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_keys_CHILD_IDX 25

/* Helpers for dealing with node labels: */
#define DT_N_S_keys_NODELABEL_NUM 1
#define DT_N_S_keys_FOREACH_NODELABEL(fn) fn(keys)
#define DT_N_S_keys_FOREACH_NODELABEL_VARGS(fn, ...) fn(keys, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_keys_CHILD_NUM 6
#define DT_N_S_keys_CHILD_NUM_STATUS_OKAY 6
#define DT_N_S_keys_FOREACH_CHILD(fn) fn(DT_N_S_keys_S_button0) fn(DT_N_S_keys_S_button1) fn(DT_N_S_keys_S_encoder_button) fn(DT_N_S_keys_S_button_left) fn(DT_N_S_keys_S_button_right) fn(DT_N_S_keys_S_button_enter)
#define DT_N_S_keys_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_keys_S_button0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys_S_button1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys_S_encoder_button) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys_S_button_left) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys_S_button_right) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys_S_button_enter)
#define DT_N_S_keys_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_keys_S_button0, __VA_ARGS__) fn(DT_N_S_keys_S_button1, __VA_ARGS__) fn(DT_N_S_keys_S_encoder_button, __VA_ARGS__) fn(DT_N_S_keys_S_button_left, __VA_ARGS__) fn(DT_N_S_keys_S_button_right, __VA_ARGS__) fn(DT_N_S_keys_S_button_enter, __VA_ARGS__)
#define DT_N_S_keys_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_keys_S_button0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys_S_button1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys_S_encoder_button, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys_S_button_left, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys_S_button_right, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys_S_button_enter, __VA_ARGS__)
#define DT_N_S_keys_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_keys_S_button0) fn(DT_N_S_keys_S_button1) fn(DT_N_S_keys_S_encoder_button) fn(DT_N_S_keys_S_button_left) fn(DT_N_S_keys_S_button_right) fn(DT_N_S_keys_S_button_enter)
#define DT_N_S_keys_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_keys_S_button0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys_S_button1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys_S_encoder_button) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys_S_button_left) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys_S_button_right) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys_S_button_enter)
#define DT_N_S_keys_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_keys_S_button0, __VA_ARGS__) fn(DT_N_S_keys_S_button1, __VA_ARGS__) fn(DT_N_S_keys_S_encoder_button, __VA_ARGS__) fn(DT_N_S_keys_S_button_left, __VA_ARGS__) fn(DT_N_S_keys_S_button_right, __VA_ARGS__) fn(DT_N_S_keys_S_button_enter, __VA_ARGS__)
#define DT_N_S_keys_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_keys_S_button0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys_S_button1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys_S_encoder_button, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys_S_button_left, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys_S_button_right, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_keys_S_button_enter, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_keys_ORD 15
#define DT_N_S_keys_ORD_STR_SORTABLE 00015

/* Ordinals for what this node depends on directly: */
#define DT_N_S_keys_REQUIRES_ORDS \
	0, /* / */ \
	14, /* /gpio@900 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_keys_SUPPORTS_ORDS \
	16, /* /lvgl_button_input */ \
	18, /* /lvgl_keypad_input */ \
	66, /* /keys/button0 */ \
	67, /* /keys/button1 */ \
	68, /* /keys/button_enter */ \
	69, /* /keys/button_left */ \
	70, /* /keys/button_right */ \
	71, /* /keys/encoder_button */

/* Existence and alternate IDs: */
#define DT_N_S_keys_EXISTS 1
#define DT_N_INST_0_gpio_keys DT_N_S_keys
#define DT_N_NODELABEL_keys   DT_N_S_keys

/* Macros for properties that are special in the specification: */
#define DT_N_S_keys_REG_NUM 0
#define DT_N_S_keys_RANGES_NUM 0
#define DT_N_S_keys_FOREACH_RANGE(fn) 
#define DT_N_S_keys_IRQ_NUM 0
#define DT_N_S_keys_IRQ_LEVEL 0
#define DT_N_S_keys_COMPAT_MATCHES_gpio_keys 1
#define DT_N_S_keys_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_keys_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_keys_P_wakeup_source 0
#define DT_N_S_keys_P_wakeup_source_EXISTS 1
#define DT_N_S_keys_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_keys_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_keys_P_compatible {"gpio-keys"}
#define DT_N_S_keys_P_compatible_IDX_0 "gpio-keys"
#define DT_N_S_keys_P_compatible_IDX_0_STRING_UNQUOTED gpio-keys
#define DT_N_S_keys_P_compatible_IDX_0_STRING_TOKEN gpio_keys
#define DT_N_S_keys_P_compatible_IDX_0_STRING_UPPER_TOKEN GPIO_KEYS
#define DT_N_S_keys_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_keys_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_keys, compatible, 0)
#define DT_N_S_keys_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_keys, compatible, 0)
#define DT_N_S_keys_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_keys, compatible, 0, __VA_ARGS__)
#define DT_N_S_keys_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_keys, compatible, 0, __VA_ARGS__)
#define DT_N_S_keys_P_compatible_LEN 1
#define DT_N_S_keys_P_compatible_EXISTS 1
#define DT_N_S_keys_P_zephyr_deferred_init 0
#define DT_N_S_keys_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_keys_P_debounce_interval_ms 30
#define DT_N_S_keys_P_debounce_interval_ms_EXISTS 1
#define DT_N_S_keys_P_polling_mode 0
#define DT_N_S_keys_P_polling_mode_EXISTS 1

/*
 * Devicetree node: /lvgl_button_input
 *
 * Node identifier: DT_N_S_lvgl_button_input
 *
 * Binding (compatible = zephyr,lvgl-button-input):
 *   $ZEPHYR_BASE/dts/bindings/input/zephyr,lvgl-button-input.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_lvgl_button_input_PATH "/lvgl_button_input"

/* Node's name with unit-address: */
#define DT_N_S_lvgl_button_input_FULL_NAME "lvgl_button_input"

/* Node parent (/) identifier: */
#define DT_N_S_lvgl_button_input_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_lvgl_button_input_CHILD_IDX 26

/* Helpers for dealing with node labels: */
#define DT_N_S_lvgl_button_input_NODELABEL_NUM 0
#define DT_N_S_lvgl_button_input_FOREACH_NODELABEL(fn) 
#define DT_N_S_lvgl_button_input_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_lvgl_button_input_CHILD_NUM 0
#define DT_N_S_lvgl_button_input_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_lvgl_button_input_FOREACH_CHILD(fn) 
#define DT_N_S_lvgl_button_input_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_lvgl_button_input_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_lvgl_button_input_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_lvgl_button_input_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_lvgl_button_input_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_lvgl_button_input_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_lvgl_button_input_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_lvgl_button_input_ORD 16
#define DT_N_S_lvgl_button_input_ORD_STR_SORTABLE 00016

/* Ordinals for what this node depends on directly: */
#define DT_N_S_lvgl_button_input_REQUIRES_ORDS \
	0, /* / */ \
	15, /* /keys */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_lvgl_button_input_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_lvgl_button_input_EXISTS 1
#define DT_N_INST_0_zephyr_lvgl_button_input DT_N_S_lvgl_button_input

/* Macros for properties that are special in the specification: */
#define DT_N_S_lvgl_button_input_REG_NUM 0
#define DT_N_S_lvgl_button_input_RANGES_NUM 0
#define DT_N_S_lvgl_button_input_FOREACH_RANGE(fn) 
#define DT_N_S_lvgl_button_input_IRQ_NUM 0
#define DT_N_S_lvgl_button_input_IRQ_LEVEL 0
#define DT_N_S_lvgl_button_input_COMPAT_MATCHES_zephyr_lvgl_button_input 1
#define DT_N_S_lvgl_button_input_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_lvgl_button_input_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_lvgl_button_input_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_lvgl_button_input_COMPAT_MODEL_IDX_0 "lvgl-button-input"
#define DT_N_S_lvgl_button_input_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_lvgl_button_input_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_lvgl_button_input_P_input DT_N_S_keys
#define DT_N_S_lvgl_button_input_P_input_IDX_0 DT_N_S_keys
#define DT_N_S_lvgl_button_input_P_input_IDX_0_PH DT_N_S_keys
#define DT_N_S_lvgl_button_input_P_input_IDX_0_EXISTS 1
#define DT_N_S_lvgl_button_input_P_input_FOREACH_PROP_ELEM(fn) fn(DT_N_S_lvgl_button_input, input, 0)
#define DT_N_S_lvgl_button_input_P_input_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_lvgl_button_input, input, 0)
#define DT_N_S_lvgl_button_input_P_input_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_lvgl_button_input, input, 0, __VA_ARGS__)
#define DT_N_S_lvgl_button_input_P_input_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_lvgl_button_input, input, 0, __VA_ARGS__)
#define DT_N_S_lvgl_button_input_P_input_LEN 1
#define DT_N_S_lvgl_button_input_P_input_EXISTS 1
#define DT_N_S_lvgl_button_input_P_input_codes {48 /* 0x30 */}
#define DT_N_S_lvgl_button_input_P_input_codes_IDX_0 48
#define DT_N_S_lvgl_button_input_P_input_codes_IDX_0_EXISTS 1
#define DT_N_S_lvgl_button_input_P_input_codes_FOREACH_PROP_ELEM(fn) fn(DT_N_S_lvgl_button_input, input_codes, 0)
#define DT_N_S_lvgl_button_input_P_input_codes_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_lvgl_button_input, input_codes, 0)
#define DT_N_S_lvgl_button_input_P_input_codes_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_lvgl_button_input, input_codes, 0, __VA_ARGS__)
#define DT_N_S_lvgl_button_input_P_input_codes_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_lvgl_button_input, input_codes, 0, __VA_ARGS__)
#define DT_N_S_lvgl_button_input_P_input_codes_LEN 1
#define DT_N_S_lvgl_button_input_P_input_codes_EXISTS 1
#define DT_N_S_lvgl_button_input_P_coordinates {160 /* 0xa0 */, 120 /* 0x78 */}
#define DT_N_S_lvgl_button_input_P_coordinates_IDX_0 160
#define DT_N_S_lvgl_button_input_P_coordinates_IDX_0_EXISTS 1
#define DT_N_S_lvgl_button_input_P_coordinates_IDX_1 120
#define DT_N_S_lvgl_button_input_P_coordinates_IDX_1_EXISTS 1
#define DT_N_S_lvgl_button_input_P_coordinates_FOREACH_PROP_ELEM(fn) fn(DT_N_S_lvgl_button_input, coordinates, 0) \
	fn(DT_N_S_lvgl_button_input, coordinates, 1)
#define DT_N_S_lvgl_button_input_P_coordinates_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_lvgl_button_input, coordinates, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_lvgl_button_input, coordinates, 1)
#define DT_N_S_lvgl_button_input_P_coordinates_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_lvgl_button_input, coordinates, 0, __VA_ARGS__) \
	fn(DT_N_S_lvgl_button_input, coordinates, 1, __VA_ARGS__)
#define DT_N_S_lvgl_button_input_P_coordinates_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_lvgl_button_input, coordinates, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_lvgl_button_input, coordinates, 1, __VA_ARGS__)
#define DT_N_S_lvgl_button_input_P_coordinates_LEN 2
#define DT_N_S_lvgl_button_input_P_coordinates_EXISTS 1

/*
 * Devicetree node: /lvgl_encoder_input
 *
 * Node identifier: DT_N_S_lvgl_encoder_input
 *
 * Binding (compatible = zephyr,lvgl-encoder-input):
 *   $ZEPHYR_BASE/dts/bindings/input/zephyr,lvgl-encoder-input.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_lvgl_encoder_input_PATH "/lvgl_encoder_input"

/* Node's name with unit-address: */
#define DT_N_S_lvgl_encoder_input_FULL_NAME "lvgl_encoder_input"

/* Node parent (/) identifier: */
#define DT_N_S_lvgl_encoder_input_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_lvgl_encoder_input_CHILD_IDX 27

/* Helpers for dealing with node labels: */
#define DT_N_S_lvgl_encoder_input_NODELABEL_NUM 0
#define DT_N_S_lvgl_encoder_input_FOREACH_NODELABEL(fn) 
#define DT_N_S_lvgl_encoder_input_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_lvgl_encoder_input_CHILD_NUM 0
#define DT_N_S_lvgl_encoder_input_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_lvgl_encoder_input_FOREACH_CHILD(fn) 
#define DT_N_S_lvgl_encoder_input_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_lvgl_encoder_input_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_lvgl_encoder_input_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_lvgl_encoder_input_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_lvgl_encoder_input_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_lvgl_encoder_input_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_lvgl_encoder_input_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_lvgl_encoder_input_ORD 17
#define DT_N_S_lvgl_encoder_input_ORD_STR_SORTABLE 00017

/* Ordinals for what this node depends on directly: */
#define DT_N_S_lvgl_encoder_input_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_lvgl_encoder_input_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_lvgl_encoder_input_EXISTS 1
#define DT_N_INST_0_zephyr_lvgl_encoder_input DT_N_S_lvgl_encoder_input

/* Macros for properties that are special in the specification: */
#define DT_N_S_lvgl_encoder_input_REG_NUM 0
#define DT_N_S_lvgl_encoder_input_RANGES_NUM 0
#define DT_N_S_lvgl_encoder_input_FOREACH_RANGE(fn) 
#define DT_N_S_lvgl_encoder_input_IRQ_NUM 0
#define DT_N_S_lvgl_encoder_input_IRQ_LEVEL 0
#define DT_N_S_lvgl_encoder_input_COMPAT_MATCHES_zephyr_lvgl_encoder_input 1
#define DT_N_S_lvgl_encoder_input_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_lvgl_encoder_input_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_lvgl_encoder_input_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_lvgl_encoder_input_COMPAT_MODEL_IDX_0 "lvgl-encoder-input"
#define DT_N_S_lvgl_encoder_input_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_lvgl_encoder_input_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_lvgl_encoder_input_P_rotation_input_code 8
#define DT_N_S_lvgl_encoder_input_P_rotation_input_code_EXISTS 1
#define DT_N_S_lvgl_encoder_input_P_button_input_code 11
#define DT_N_S_lvgl_encoder_input_P_button_input_code_EXISTS 1

/*
 * Devicetree node: /lvgl_keypad_input
 *
 * Node identifier: DT_N_S_lvgl_keypad_input
 *
 * Binding (compatible = zephyr,lvgl-keypad-input):
 *   $ZEPHYR_BASE/dts/bindings/input/zephyr,lvgl-keypad-input.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_lvgl_keypad_input_PATH "/lvgl_keypad_input"

/* Node's name with unit-address: */
#define DT_N_S_lvgl_keypad_input_FULL_NAME "lvgl_keypad_input"

/* Node parent (/) identifier: */
#define DT_N_S_lvgl_keypad_input_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_lvgl_keypad_input_CHILD_IDX 28

/* Helpers for dealing with node labels: */
#define DT_N_S_lvgl_keypad_input_NODELABEL_NUM 0
#define DT_N_S_lvgl_keypad_input_FOREACH_NODELABEL(fn) 
#define DT_N_S_lvgl_keypad_input_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_lvgl_keypad_input_CHILD_NUM 0
#define DT_N_S_lvgl_keypad_input_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_lvgl_keypad_input_FOREACH_CHILD(fn) 
#define DT_N_S_lvgl_keypad_input_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_lvgl_keypad_input_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_lvgl_keypad_input_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_lvgl_keypad_input_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_lvgl_keypad_input_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_lvgl_keypad_input_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_lvgl_keypad_input_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_lvgl_keypad_input_ORD 18
#define DT_N_S_lvgl_keypad_input_ORD_STR_SORTABLE 00018

/* Ordinals for what this node depends on directly: */
#define DT_N_S_lvgl_keypad_input_REQUIRES_ORDS \
	0, /* / */ \
	15, /* /keys */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_lvgl_keypad_input_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_lvgl_keypad_input_EXISTS 1
#define DT_N_INST_0_zephyr_lvgl_keypad_input DT_N_S_lvgl_keypad_input

/* Macros for properties that are special in the specification: */
#define DT_N_S_lvgl_keypad_input_REG_NUM 0
#define DT_N_S_lvgl_keypad_input_RANGES_NUM 0
#define DT_N_S_lvgl_keypad_input_FOREACH_RANGE(fn) 
#define DT_N_S_lvgl_keypad_input_IRQ_NUM 0
#define DT_N_S_lvgl_keypad_input_IRQ_LEVEL 0
#define DT_N_S_lvgl_keypad_input_COMPAT_MATCHES_zephyr_lvgl_keypad_input 1
#define DT_N_S_lvgl_keypad_input_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_lvgl_keypad_input_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_lvgl_keypad_input_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_lvgl_keypad_input_COMPAT_MODEL_IDX_0 "lvgl-keypad-input"
#define DT_N_S_lvgl_keypad_input_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_lvgl_keypad_input_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_lvgl_keypad_input_P_input DT_N_S_keys
#define DT_N_S_lvgl_keypad_input_P_input_IDX_0 DT_N_S_keys
#define DT_N_S_lvgl_keypad_input_P_input_IDX_0_PH DT_N_S_keys
#define DT_N_S_lvgl_keypad_input_P_input_IDX_0_EXISTS 1
#define DT_N_S_lvgl_keypad_input_P_input_FOREACH_PROP_ELEM(fn) fn(DT_N_S_lvgl_keypad_input, input, 0)
#define DT_N_S_lvgl_keypad_input_P_input_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_lvgl_keypad_input, input, 0)
#define DT_N_S_lvgl_keypad_input_P_input_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_lvgl_keypad_input, input, 0, __VA_ARGS__)
#define DT_N_S_lvgl_keypad_input_P_input_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_lvgl_keypad_input, input, 0, __VA_ARGS__)
#define DT_N_S_lvgl_keypad_input_P_input_LEN 1
#define DT_N_S_lvgl_keypad_input_P_input_EXISTS 1
#define DT_N_S_lvgl_keypad_input_P_input_codes {105 /* 0x69 */, 106 /* 0x6a */, 28 /* 0x1c */}
#define DT_N_S_lvgl_keypad_input_P_input_codes_IDX_0 105
#define DT_N_S_lvgl_keypad_input_P_input_codes_IDX_0_EXISTS 1
#define DT_N_S_lvgl_keypad_input_P_input_codes_IDX_1 106
#define DT_N_S_lvgl_keypad_input_P_input_codes_IDX_1_EXISTS 1
#define DT_N_S_lvgl_keypad_input_P_input_codes_IDX_2 28
#define DT_N_S_lvgl_keypad_input_P_input_codes_IDX_2_EXISTS 1
#define DT_N_S_lvgl_keypad_input_P_input_codes_FOREACH_PROP_ELEM(fn) fn(DT_N_S_lvgl_keypad_input, input_codes, 0) \
	fn(DT_N_S_lvgl_keypad_input, input_codes, 1) \
	fn(DT_N_S_lvgl_keypad_input, input_codes, 2)
#define DT_N_S_lvgl_keypad_input_P_input_codes_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_lvgl_keypad_input, input_codes, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_lvgl_keypad_input, input_codes, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_lvgl_keypad_input, input_codes, 2)
#define DT_N_S_lvgl_keypad_input_P_input_codes_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_lvgl_keypad_input, input_codes, 0, __VA_ARGS__) \
	fn(DT_N_S_lvgl_keypad_input, input_codes, 1, __VA_ARGS__) \
	fn(DT_N_S_lvgl_keypad_input, input_codes, 2, __VA_ARGS__)
#define DT_N_S_lvgl_keypad_input_P_input_codes_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_lvgl_keypad_input, input_codes, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_lvgl_keypad_input, input_codes, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_lvgl_keypad_input, input_codes, 2, __VA_ARGS__)
#define DT_N_S_lvgl_keypad_input_P_input_codes_LEN 3
#define DT_N_S_lvgl_keypad_input_P_input_codes_EXISTS 1
#define DT_N_S_lvgl_keypad_input_P_lvgl_codes {20 /* 0x14 */, 19 /* 0x13 */, 10 /* 0xa */}
#define DT_N_S_lvgl_keypad_input_P_lvgl_codes_IDX_0 20
#define DT_N_S_lvgl_keypad_input_P_lvgl_codes_IDX_0_EXISTS 1
#define DT_N_S_lvgl_keypad_input_P_lvgl_codes_IDX_1 19
#define DT_N_S_lvgl_keypad_input_P_lvgl_codes_IDX_1_EXISTS 1
#define DT_N_S_lvgl_keypad_input_P_lvgl_codes_IDX_2 10
#define DT_N_S_lvgl_keypad_input_P_lvgl_codes_IDX_2_EXISTS 1
#define DT_N_S_lvgl_keypad_input_P_lvgl_codes_FOREACH_PROP_ELEM(fn) fn(DT_N_S_lvgl_keypad_input, lvgl_codes, 0) \
	fn(DT_N_S_lvgl_keypad_input, lvgl_codes, 1) \
	fn(DT_N_S_lvgl_keypad_input, lvgl_codes, 2)
#define DT_N_S_lvgl_keypad_input_P_lvgl_codes_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_lvgl_keypad_input, lvgl_codes, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_lvgl_keypad_input, lvgl_codes, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_lvgl_keypad_input, lvgl_codes, 2)
#define DT_N_S_lvgl_keypad_input_P_lvgl_codes_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_lvgl_keypad_input, lvgl_codes, 0, __VA_ARGS__) \
	fn(DT_N_S_lvgl_keypad_input, lvgl_codes, 1, __VA_ARGS__) \
	fn(DT_N_S_lvgl_keypad_input, lvgl_codes, 2, __VA_ARGS__)
#define DT_N_S_lvgl_keypad_input_P_lvgl_codes_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_lvgl_keypad_input, lvgl_codes, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_lvgl_keypad_input, lvgl_codes, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_lvgl_keypad_input, lvgl_codes, 2, __VA_ARGS__)
#define DT_N_S_lvgl_keypad_input_P_lvgl_codes_LEN 3
#define DT_N_S_lvgl_keypad_input_P_lvgl_codes_EXISTS 1

/*
 * Devicetree node: /input-sdl-touch
 *
 * Node identifier: DT_N_S_input_sdl_touch
 *
 * Binding (compatible = zephyr,input-sdl-touch):
 *   $ZEPHYR_BASE/dts/bindings/input/zephyr,input-sdl-touch.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_input_sdl_touch_PATH "/input-sdl-touch"

/* Node's name with unit-address: */
#define DT_N_S_input_sdl_touch_FULL_NAME "input-sdl-touch"

/* Node parent (/) identifier: */
#define DT_N_S_input_sdl_touch_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_input_sdl_touch_CHILD_IDX 18

/* Helpers for dealing with node labels: */
#define DT_N_S_input_sdl_touch_NODELABEL_NUM 1
#define DT_N_S_input_sdl_touch_FOREACH_NODELABEL(fn) fn(input_sdl_touch)
#define DT_N_S_input_sdl_touch_FOREACH_NODELABEL_VARGS(fn, ...) fn(input_sdl_touch, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_input_sdl_touch_CHILD_NUM 0
#define DT_N_S_input_sdl_touch_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_input_sdl_touch_FOREACH_CHILD(fn) 
#define DT_N_S_input_sdl_touch_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_input_sdl_touch_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_input_sdl_touch_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_input_sdl_touch_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_input_sdl_touch_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_input_sdl_touch_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_input_sdl_touch_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_input_sdl_touch_ORD 19
#define DT_N_S_input_sdl_touch_ORD_STR_SORTABLE 00019

/* Ordinals for what this node depends on directly: */
#define DT_N_S_input_sdl_touch_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_input_sdl_touch_SUPPORTS_ORDS \
	20, /* /lvgl_pointer */

/* Existence and alternate IDs: */
#define DT_N_S_input_sdl_touch_EXISTS 1
#define DT_N_INST_0_zephyr_input_sdl_touch DT_N_S_input_sdl_touch
#define DT_N_NODELABEL_input_sdl_touch     DT_N_S_input_sdl_touch

/* Macros for properties that are special in the specification: */
#define DT_N_S_input_sdl_touch_REG_NUM 0
#define DT_N_S_input_sdl_touch_RANGES_NUM 0
#define DT_N_S_input_sdl_touch_FOREACH_RANGE(fn) 
#define DT_N_S_input_sdl_touch_IRQ_NUM 0
#define DT_N_S_input_sdl_touch_IRQ_LEVEL 0
#define DT_N_S_input_sdl_touch_COMPAT_MATCHES_zephyr_input_sdl_touch 1
#define DT_N_S_input_sdl_touch_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_input_sdl_touch_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_input_sdl_touch_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_input_sdl_touch_COMPAT_MODEL_IDX_0 "input-sdl-touch"
#define DT_N_S_input_sdl_touch_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_input_sdl_touch_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_input_sdl_touch_P_compatible {"zephyr,input-sdl-touch"}
#define DT_N_S_input_sdl_touch_P_compatible_IDX_0 "zephyr,input-sdl-touch"
#define DT_N_S_input_sdl_touch_P_compatible_IDX_0_STRING_UNQUOTED zephyr,input-sdl-touch
#define DT_N_S_input_sdl_touch_P_compatible_IDX_0_STRING_TOKEN zephyr_input_sdl_touch
#define DT_N_S_input_sdl_touch_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_INPUT_SDL_TOUCH
#define DT_N_S_input_sdl_touch_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_input_sdl_touch_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_input_sdl_touch, compatible, 0)
#define DT_N_S_input_sdl_touch_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_input_sdl_touch, compatible, 0)
#define DT_N_S_input_sdl_touch_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_input_sdl_touch, compatible, 0, __VA_ARGS__)
#define DT_N_S_input_sdl_touch_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_input_sdl_touch, compatible, 0, __VA_ARGS__)
#define DT_N_S_input_sdl_touch_P_compatible_LEN 1
#define DT_N_S_input_sdl_touch_P_compatible_EXISTS 1

/*
 * Devicetree node: /lvgl_pointer
 *
 * Node identifier: DT_N_S_lvgl_pointer
 *
 * Binding (compatible = zephyr,lvgl-pointer-input):
 *   $ZEPHYR_BASE/dts/bindings/input/zephyr,lvgl-pointer-input.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_lvgl_pointer_PATH "/lvgl_pointer"

/* Node's name with unit-address: */
#define DT_N_S_lvgl_pointer_FULL_NAME "lvgl_pointer"

/* Node parent (/) identifier: */
#define DT_N_S_lvgl_pointer_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_lvgl_pointer_CHILD_IDX 3

/* Helpers for dealing with node labels: */
#define DT_N_S_lvgl_pointer_NODELABEL_NUM 0
#define DT_N_S_lvgl_pointer_FOREACH_NODELABEL(fn) 
#define DT_N_S_lvgl_pointer_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_lvgl_pointer_CHILD_NUM 0
#define DT_N_S_lvgl_pointer_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_lvgl_pointer_FOREACH_CHILD(fn) 
#define DT_N_S_lvgl_pointer_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_lvgl_pointer_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_lvgl_pointer_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_lvgl_pointer_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_lvgl_pointer_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_lvgl_pointer_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_lvgl_pointer_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_lvgl_pointer_ORD 20
#define DT_N_S_lvgl_pointer_ORD_STR_SORTABLE 00020

/* Ordinals for what this node depends on directly: */
#define DT_N_S_lvgl_pointer_REQUIRES_ORDS \
	0, /* / */ \
	19, /* /input-sdl-touch */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_lvgl_pointer_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_lvgl_pointer_EXISTS 1
#define DT_N_INST_0_zephyr_lvgl_pointer_input DT_N_S_lvgl_pointer

/* Macros for properties that are special in the specification: */
#define DT_N_S_lvgl_pointer_REG_NUM 0
#define DT_N_S_lvgl_pointer_RANGES_NUM 0
#define DT_N_S_lvgl_pointer_FOREACH_RANGE(fn) 
#define DT_N_S_lvgl_pointer_IRQ_NUM 0
#define DT_N_S_lvgl_pointer_IRQ_LEVEL 0
#define DT_N_S_lvgl_pointer_COMPAT_MATCHES_zephyr_lvgl_pointer_input 1
#define DT_N_S_lvgl_pointer_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_lvgl_pointer_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_lvgl_pointer_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_lvgl_pointer_COMPAT_MODEL_IDX_0 "lvgl-pointer-input"
#define DT_N_S_lvgl_pointer_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_lvgl_pointer_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_lvgl_pointer_P_input DT_N_S_input_sdl_touch
#define DT_N_S_lvgl_pointer_P_input_IDX_0 DT_N_S_input_sdl_touch
#define DT_N_S_lvgl_pointer_P_input_IDX_0_PH DT_N_S_input_sdl_touch
#define DT_N_S_lvgl_pointer_P_input_IDX_0_EXISTS 1
#define DT_N_S_lvgl_pointer_P_input_FOREACH_PROP_ELEM(fn) fn(DT_N_S_lvgl_pointer, input, 0)
#define DT_N_S_lvgl_pointer_P_input_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_lvgl_pointer, input, 0)
#define DT_N_S_lvgl_pointer_P_input_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_lvgl_pointer, input, 0, __VA_ARGS__)
#define DT_N_S_lvgl_pointer_P_input_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_lvgl_pointer, input, 0, __VA_ARGS__)
#define DT_N_S_lvgl_pointer_P_input_LEN 1
#define DT_N_S_lvgl_pointer_P_input_EXISTS 1
#define DT_N_S_lvgl_pointer_P_swap_xy 0
#define DT_N_S_lvgl_pointer_P_swap_xy_EXISTS 1
#define DT_N_S_lvgl_pointer_P_invert_x 0
#define DT_N_S_lvgl_pointer_P_invert_x_EXISTS 1
#define DT_N_S_lvgl_pointer_P_invert_y 0
#define DT_N_S_lvgl_pointer_P_invert_y_EXISTS 1

/*
 * Devicetree node: /qdec
 *
 * Node identifier: DT_N_S_qdec
 *
 * Binding (compatible = gpio-qdec):
 *   $ZEPHYR_BASE/dts/bindings/input/gpio-qdec.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_qdec_PATH "/qdec"

/* Node's name with unit-address: */
#define DT_N_S_qdec_FULL_NAME "qdec"

/* Node parent (/) identifier: */
#define DT_N_S_qdec_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_qdec_CHILD_IDX 24

/* Helpers for dealing with node labels: */
#define DT_N_S_qdec_NODELABEL_NUM 0
#define DT_N_S_qdec_FOREACH_NODELABEL(fn) 
#define DT_N_S_qdec_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_qdec_CHILD_NUM 0
#define DT_N_S_qdec_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_qdec_FOREACH_CHILD(fn) 
#define DT_N_S_qdec_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_qdec_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_qdec_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_qdec_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_qdec_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_qdec_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_qdec_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_qdec_ORD 21
#define DT_N_S_qdec_ORD_STR_SORTABLE 00021

/* Ordinals for what this node depends on directly: */
#define DT_N_S_qdec_REQUIRES_ORDS \
	0, /* / */ \
	14, /* /gpio@900 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_qdec_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_qdec_EXISTS 1
#define DT_N_INST_0_gpio_qdec DT_N_S_qdec

/* Macros for properties that are special in the specification: */
#define DT_N_S_qdec_REG_NUM 0
#define DT_N_S_qdec_RANGES_NUM 0
#define DT_N_S_qdec_FOREACH_RANGE(fn) 
#define DT_N_S_qdec_IRQ_NUM 0
#define DT_N_S_qdec_IRQ_LEVEL 0
#define DT_N_S_qdec_COMPAT_MATCHES_gpio_qdec 1
#define DT_N_S_qdec_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_qdec_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_qdec_P_wakeup_source 0
#define DT_N_S_qdec_P_wakeup_source_EXISTS 1
#define DT_N_S_qdec_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_qdec_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_qdec_P_compatible {"gpio-qdec"}
#define DT_N_S_qdec_P_compatible_IDX_0 "gpio-qdec"
#define DT_N_S_qdec_P_compatible_IDX_0_STRING_UNQUOTED gpio-qdec
#define DT_N_S_qdec_P_compatible_IDX_0_STRING_TOKEN gpio_qdec
#define DT_N_S_qdec_P_compatible_IDX_0_STRING_UPPER_TOKEN GPIO_QDEC
#define DT_N_S_qdec_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_qdec_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_qdec, compatible, 0)
#define DT_N_S_qdec_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_qdec, compatible, 0)
#define DT_N_S_qdec_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_qdec, compatible, 0, __VA_ARGS__)
#define DT_N_S_qdec_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_qdec, compatible, 0, __VA_ARGS__)
#define DT_N_S_qdec_P_compatible_LEN 1
#define DT_N_S_qdec_P_compatible_EXISTS 1
#define DT_N_S_qdec_P_zephyr_deferred_init 0
#define DT_N_S_qdec_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_qdec_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_qdec_P_gpios_IDX_0_PH DT_N_S_gpio_900
#define DT_N_S_qdec_P_gpios_IDX_0_VAL_pin 4
#define DT_N_S_qdec_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_qdec_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_qdec_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_qdec_P_gpios_IDX_1_EXISTS 1
#define DT_N_S_qdec_P_gpios_IDX_1_PH DT_N_S_gpio_900
#define DT_N_S_qdec_P_gpios_IDX_1_VAL_pin 5
#define DT_N_S_qdec_P_gpios_IDX_1_VAL_pin_EXISTS 1
#define DT_N_S_qdec_P_gpios_IDX_1_VAL_flags 0
#define DT_N_S_qdec_P_gpios_IDX_1_VAL_flags_EXISTS 1
#define DT_N_S_qdec_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_qdec, gpios, 0) \
	fn(DT_N_S_qdec, gpios, 1)
#define DT_N_S_qdec_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_qdec, gpios, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_qdec, gpios, 1)
#define DT_N_S_qdec_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_qdec, gpios, 0, __VA_ARGS__) \
	fn(DT_N_S_qdec, gpios, 1, __VA_ARGS__)
#define DT_N_S_qdec_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_qdec, gpios, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_qdec, gpios, 1, __VA_ARGS__)
#define DT_N_S_qdec_P_gpios_LEN 2
#define DT_N_S_qdec_P_gpios_EXISTS 1
#define DT_N_S_qdec_P_steps_per_period 4
#define DT_N_S_qdec_P_steps_per_period_EXISTS 1
#define DT_N_S_qdec_P_zephyr_axis 8
#define DT_N_S_qdec_P_zephyr_axis_EXISTS 1
#define DT_N_S_qdec_P_sample_time_us 2000
#define DT_N_S_qdec_P_sample_time_us_EXISTS 1
#define DT_N_S_qdec_P_idle_timeout_ms 200
#define DT_N_S_qdec_P_idle_timeout_ms_EXISTS 1

/*
 * Devicetree node: /rng
 *
 * Node identifier: DT_N_S_rng
 *
 * Binding (compatible = zephyr,native-posix-rng):
 *   $ZEPHYR_BASE/dts/bindings/rng/zephyr,native-posix-rng.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_rng_PATH "/rng"

/* Node's name with unit-address: */
#define DT_N_S_rng_FULL_NAME "rng"

/* Node parent (/) identifier: */
#define DT_N_S_rng_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_rng_CHILD_IDX 12

/* Helpers for dealing with node labels: */
#define DT_N_S_rng_NODELABEL_NUM 1
#define DT_N_S_rng_FOREACH_NODELABEL(fn) fn(rng)
#define DT_N_S_rng_FOREACH_NODELABEL_VARGS(fn, ...) fn(rng, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_rng_CHILD_NUM 0
#define DT_N_S_rng_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_rng_FOREACH_CHILD(fn) 
#define DT_N_S_rng_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_rng_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_rng_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_rng_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_rng_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_rng_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_rng_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_rng_ORD 22
#define DT_N_S_rng_ORD_STR_SORTABLE 00022

/* Ordinals for what this node depends on directly: */
#define DT_N_S_rng_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_rng_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_rng_EXISTS 1
#define DT_N_INST_0_zephyr_native_posix_rng DT_N_S_rng
#define DT_N_NODELABEL_rng                  DT_N_S_rng

/* Macros for properties that are special in the specification: */
#define DT_N_S_rng_REG_NUM 0
#define DT_N_S_rng_RANGES_NUM 0
#define DT_N_S_rng_FOREACH_RANGE(fn) 
#define DT_N_S_rng_IRQ_NUM 0
#define DT_N_S_rng_IRQ_LEVEL 0
#define DT_N_S_rng_COMPAT_MATCHES_zephyr_native_posix_rng 1
#define DT_N_S_rng_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_rng_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_rng_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_rng_COMPAT_MODEL_IDX_0 "native-posix-rng"
#define DT_N_S_rng_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_rng_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_rng_P_wakeup_source 0
#define DT_N_S_rng_P_wakeup_source_EXISTS 1
#define DT_N_S_rng_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_rng_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_rng_P_status "okay"
#define DT_N_S_rng_P_status_STRING_UNQUOTED okay
#define DT_N_S_rng_P_status_STRING_TOKEN okay
#define DT_N_S_rng_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_rng_P_status_IDX_0 "okay"
#define DT_N_S_rng_P_status_IDX_0_EXISTS 1
#define DT_N_S_rng_P_status_ENUM_IDX 1
#define DT_N_S_rng_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_rng_P_status_ENUM_TOKEN okay
#define DT_N_S_rng_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_rng_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_rng, status, 0)
#define DT_N_S_rng_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_rng, status, 0)
#define DT_N_S_rng_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_rng, status, 0, __VA_ARGS__)
#define DT_N_S_rng_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_rng, status, 0, __VA_ARGS__)
#define DT_N_S_rng_P_status_LEN 1
#define DT_N_S_rng_P_status_EXISTS 1
#define DT_N_S_rng_P_compatible {"zephyr,native-posix-rng"}
#define DT_N_S_rng_P_compatible_IDX_0 "zephyr,native-posix-rng"
#define DT_N_S_rng_P_compatible_IDX_0_STRING_UNQUOTED zephyr,native-posix-rng
#define DT_N_S_rng_P_compatible_IDX_0_STRING_TOKEN zephyr_native_posix_rng
#define DT_N_S_rng_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_NATIVE_POSIX_RNG
#define DT_N_S_rng_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_rng_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_rng, compatible, 0)
#define DT_N_S_rng_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_rng, compatible, 0)
#define DT_N_S_rng_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_rng, compatible, 0, __VA_ARGS__)
#define DT_N_S_rng_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_rng, compatible, 0, __VA_ARGS__)
#define DT_N_S_rng_P_compatible_LEN 1
#define DT_N_S_rng_P_compatible_EXISTS 1
#define DT_N_S_rng_P_zephyr_deferred_init 0
#define DT_N_S_rng_P_zephyr_deferred_init_EXISTS 1

/*
 * Devicetree node: /rtc
 *
 * Node identifier: DT_N_S_rtc
 *
 * Binding (compatible = zephyr,rtc-emul):
 *   $ZEPHYR_BASE/dts/bindings/rtc/zephyr,rtc-emul.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_rtc_PATH "/rtc"

/* Node's name with unit-address: */
#define DT_N_S_rtc_FULL_NAME "rtc"

/* Node parent (/) identifier: */
#define DT_N_S_rtc_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_rtc_CHILD_IDX 21

/* Helpers for dealing with node labels: */
#define DT_N_S_rtc_NODELABEL_NUM 1
#define DT_N_S_rtc_FOREACH_NODELABEL(fn) fn(rtc)
#define DT_N_S_rtc_FOREACH_NODELABEL_VARGS(fn, ...) fn(rtc, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_rtc_CHILD_NUM 0
#define DT_N_S_rtc_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_rtc_FOREACH_CHILD(fn) 
#define DT_N_S_rtc_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_rtc_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_rtc_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_rtc_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_rtc_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_rtc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_rtc_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_rtc_ORD 23
#define DT_N_S_rtc_ORD_STR_SORTABLE 00023

/* Ordinals for what this node depends on directly: */
#define DT_N_S_rtc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_rtc_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_rtc_EXISTS 1
#define DT_N_ALIAS_rtc              DT_N_S_rtc
#define DT_N_INST_0_zephyr_rtc_emul DT_N_S_rtc
#define DT_N_NODELABEL_rtc          DT_N_S_rtc

/* Macros for properties that are special in the specification: */
#define DT_N_S_rtc_REG_NUM 0
#define DT_N_S_rtc_RANGES_NUM 0
#define DT_N_S_rtc_FOREACH_RANGE(fn) 
#define DT_N_S_rtc_IRQ_NUM 0
#define DT_N_S_rtc_IRQ_LEVEL 0
#define DT_N_S_rtc_COMPAT_MATCHES_zephyr_rtc_emul 1
#define DT_N_S_rtc_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_rtc_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_rtc_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_rtc_COMPAT_MODEL_IDX_0 "rtc-emul"
#define DT_N_S_rtc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_rtc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_rtc_P_wakeup_source 0
#define DT_N_S_rtc_P_wakeup_source_EXISTS 1
#define DT_N_S_rtc_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_rtc_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_rtc_P_status "okay"
#define DT_N_S_rtc_P_status_STRING_UNQUOTED okay
#define DT_N_S_rtc_P_status_STRING_TOKEN okay
#define DT_N_S_rtc_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_rtc_P_status_IDX_0 "okay"
#define DT_N_S_rtc_P_status_IDX_0_EXISTS 1
#define DT_N_S_rtc_P_status_ENUM_IDX 1
#define DT_N_S_rtc_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_rtc_P_status_ENUM_TOKEN okay
#define DT_N_S_rtc_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_rtc_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_rtc, status, 0)
#define DT_N_S_rtc_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_rtc, status, 0)
#define DT_N_S_rtc_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_rtc, status, 0, __VA_ARGS__)
#define DT_N_S_rtc_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_rtc, status, 0, __VA_ARGS__)
#define DT_N_S_rtc_P_status_LEN 1
#define DT_N_S_rtc_P_status_EXISTS 1
#define DT_N_S_rtc_P_compatible {"zephyr,rtc-emul"}
#define DT_N_S_rtc_P_compatible_IDX_0 "zephyr,rtc-emul"
#define DT_N_S_rtc_P_compatible_IDX_0_STRING_UNQUOTED zephyr,rtc-emul
#define DT_N_S_rtc_P_compatible_IDX_0_STRING_TOKEN zephyr_rtc_emul
#define DT_N_S_rtc_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_RTC_EMUL
#define DT_N_S_rtc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_rtc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_rtc, compatible, 0)
#define DT_N_S_rtc_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_rtc, compatible, 0)
#define DT_N_S_rtc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_rtc, compatible, 0, __VA_ARGS__)
#define DT_N_S_rtc_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_rtc, compatible, 0, __VA_ARGS__)
#define DT_N_S_rtc_P_compatible_LEN 1
#define DT_N_S_rtc_P_compatible_EXISTS 1
#define DT_N_S_rtc_P_zephyr_deferred_init 0
#define DT_N_S_rtc_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_rtc_P_alarms_count 2
#define DT_N_S_rtc_P_alarms_count_EXISTS 1

/*
 * Devicetree node: /sdl_dc
 *
 * Node identifier: DT_N_S_sdl_dc
 *
 * Binding (compatible = zephyr,sdl-dc):
 *   $ZEPHYR_BASE/dts/bindings/display/zephyr,sdl-dc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_sdl_dc_PATH "/sdl_dc"

/* Node's name with unit-address: */
#define DT_N_S_sdl_dc_FULL_NAME "sdl_dc"

/* Node parent (/) identifier: */
#define DT_N_S_sdl_dc_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_sdl_dc_CHILD_IDX 17

/* Helpers for dealing with node labels: */
#define DT_N_S_sdl_dc_NODELABEL_NUM 1
#define DT_N_S_sdl_dc_FOREACH_NODELABEL(fn) fn(sdl_dc)
#define DT_N_S_sdl_dc_FOREACH_NODELABEL_VARGS(fn, ...) fn(sdl_dc, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_sdl_dc_CHILD_NUM 0
#define DT_N_S_sdl_dc_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_sdl_dc_FOREACH_CHILD(fn) 
#define DT_N_S_sdl_dc_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_sdl_dc_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_sdl_dc_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_sdl_dc_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_sdl_dc_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_sdl_dc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_sdl_dc_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_sdl_dc_ORD 24
#define DT_N_S_sdl_dc_ORD_STR_SORTABLE 00024

/* Ordinals for what this node depends on directly: */
#define DT_N_S_sdl_dc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_sdl_dc_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_sdl_dc_EXISTS 1
#define DT_N_INST_0_zephyr_sdl_dc DT_N_S_sdl_dc
#define DT_N_NODELABEL_sdl_dc     DT_N_S_sdl_dc

/* Macros for properties that are special in the specification: */
#define DT_N_S_sdl_dc_REG_NUM 0
#define DT_N_S_sdl_dc_RANGES_NUM 0
#define DT_N_S_sdl_dc_FOREACH_RANGE(fn) 
#define DT_N_S_sdl_dc_IRQ_NUM 0
#define DT_N_S_sdl_dc_IRQ_LEVEL 0
#define DT_N_S_sdl_dc_COMPAT_MATCHES_zephyr_sdl_dc 1
#define DT_N_S_sdl_dc_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_sdl_dc_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_sdl_dc_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_sdl_dc_COMPAT_MODEL_IDX_0 "sdl-dc"
#define DT_N_S_sdl_dc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_sdl_dc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_sdl_dc_P_wakeup_source 0
#define DT_N_S_sdl_dc_P_wakeup_source_EXISTS 1
#define DT_N_S_sdl_dc_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_sdl_dc_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_sdl_dc_P_compatible {"zephyr,sdl-dc"}
#define DT_N_S_sdl_dc_P_compatible_IDX_0 "zephyr,sdl-dc"
#define DT_N_S_sdl_dc_P_compatible_IDX_0_STRING_UNQUOTED zephyr,sdl-dc
#define DT_N_S_sdl_dc_P_compatible_IDX_0_STRING_TOKEN zephyr_sdl_dc
#define DT_N_S_sdl_dc_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_SDL_DC
#define DT_N_S_sdl_dc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_sdl_dc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_sdl_dc, compatible, 0)
#define DT_N_S_sdl_dc_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_sdl_dc, compatible, 0)
#define DT_N_S_sdl_dc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_sdl_dc, compatible, 0, __VA_ARGS__)
#define DT_N_S_sdl_dc_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_sdl_dc, compatible, 0, __VA_ARGS__)
#define DT_N_S_sdl_dc_P_compatible_LEN 1
#define DT_N_S_sdl_dc_P_compatible_EXISTS 1
#define DT_N_S_sdl_dc_P_zephyr_deferred_init 0
#define DT_N_S_sdl_dc_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_sdl_dc_P_height 475
#define DT_N_S_sdl_dc_P_height_EXISTS 1
#define DT_N_S_sdl_dc_P_width 580
#define DT_N_S_sdl_dc_P_width_EXISTS 1

/*
 * Devicetree node: /uart
 *
 * Node identifier: DT_N_S_uart
 *
 * Binding (compatible = zephyr,native-tty-uart):
 *   $ZEPHYR_BASE/dts/bindings/serial/zephyr,native-tty-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_uart_PATH "/uart"

/* Node's name with unit-address: */
#define DT_N_S_uart_FULL_NAME "uart"

/* Node parent (/) identifier: */
#define DT_N_S_uart_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_uart_CHILD_IDX 10

/* Helpers for dealing with node labels: */
#define DT_N_S_uart_NODELABEL_NUM 1
#define DT_N_S_uart_FOREACH_NODELABEL(fn) fn(uart0)
#define DT_N_S_uart_FOREACH_NODELABEL_VARGS(fn, ...) fn(uart0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_uart_CHILD_NUM 0
#define DT_N_S_uart_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_uart_FOREACH_CHILD(fn) 
#define DT_N_S_uart_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_uart_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_uart_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_uart_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_uart_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_uart_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_uart_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_uart_ORD 25
#define DT_N_S_uart_ORD_STR_SORTABLE 00025

/* Ordinals for what this node depends on directly: */
#define DT_N_S_uart_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_uart_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_uart_EXISTS 1
#define DT_N_ALIAS_debug_uart              DT_N_S_uart
#define DT_N_INST_0_zephyr_native_tty_uart DT_N_S_uart
#define DT_N_NODELABEL_uart0               DT_N_S_uart

/* Macros for properties that are special in the specification: */
#define DT_N_S_uart_REG_NUM 0
#define DT_N_S_uart_RANGES_NUM 0
#define DT_N_S_uart_FOREACH_RANGE(fn) 
#define DT_N_S_uart_IRQ_NUM 0
#define DT_N_S_uart_IRQ_LEVEL 0
#define DT_N_S_uart_COMPAT_MATCHES_zephyr_native_tty_uart 1
#define DT_N_S_uart_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_uart_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_uart_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_uart_COMPAT_MODEL_IDX_0 "native-tty-uart"
#define DT_N_S_uart_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_uart_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_uart_P_wakeup_source 0
#define DT_N_S_uart_P_wakeup_source_EXISTS 1
#define DT_N_S_uart_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_uart_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_uart_P_status "okay"
#define DT_N_S_uart_P_status_STRING_UNQUOTED okay
#define DT_N_S_uart_P_status_STRING_TOKEN okay
#define DT_N_S_uart_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_uart_P_status_IDX_0 "okay"
#define DT_N_S_uart_P_status_IDX_0_EXISTS 1
#define DT_N_S_uart_P_status_ENUM_IDX 1
#define DT_N_S_uart_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_uart_P_status_ENUM_TOKEN okay
#define DT_N_S_uart_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_uart_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_uart, status, 0)
#define DT_N_S_uart_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_uart, status, 0)
#define DT_N_S_uart_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_uart, status, 0, __VA_ARGS__)
#define DT_N_S_uart_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_uart, status, 0, __VA_ARGS__)
#define DT_N_S_uart_P_status_LEN 1
#define DT_N_S_uart_P_status_EXISTS 1
#define DT_N_S_uart_P_compatible {"zephyr,native-tty-uart"}
#define DT_N_S_uart_P_compatible_IDX_0 "zephyr,native-tty-uart"
#define DT_N_S_uart_P_compatible_IDX_0_STRING_UNQUOTED zephyr,native-tty-uart
#define DT_N_S_uart_P_compatible_IDX_0_STRING_TOKEN zephyr_native_tty_uart
#define DT_N_S_uart_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_NATIVE_TTY_UART
#define DT_N_S_uart_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_uart_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_uart, compatible, 0)
#define DT_N_S_uart_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_uart, compatible, 0)
#define DT_N_S_uart_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_uart, compatible, 0, __VA_ARGS__)
#define DT_N_S_uart_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_uart, compatible, 0, __VA_ARGS__)
#define DT_N_S_uart_P_compatible_LEN 1
#define DT_N_S_uart_P_compatible_EXISTS 1
#define DT_N_S_uart_P_zephyr_deferred_init 0
#define DT_N_S_uart_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_uart_P_current_speed 115200
#define DT_N_S_uart_P_current_speed_ENUM_IDX 8
#define DT_N_S_uart_P_current_speed_ENUM_VAL_115200_EXISTS 1
#define DT_N_S_uart_P_current_speed_EXISTS 1
#define DT_N_S_uart_P_hw_flow_control 0
#define DT_N_S_uart_P_hw_flow_control_EXISTS 1
#define DT_N_S_uart_P_serial_port "/dev/pts/1"
#define DT_N_S_uart_P_serial_port_STRING_UNQUOTED /dev/pts/1
#define DT_N_S_uart_P_serial_port_STRING_TOKEN _dev_pts_1
#define DT_N_S_uart_P_serial_port_STRING_UPPER_TOKEN _DEV_PTS_1
#define DT_N_S_uart_P_serial_port_IDX_0 "/dev/pts/1"
#define DT_N_S_uart_P_serial_port_IDX_0_EXISTS 1
#define DT_N_S_uart_P_serial_port_FOREACH_PROP_ELEM(fn) fn(DT_N_S_uart, serial_port, 0)
#define DT_N_S_uart_P_serial_port_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_uart, serial_port, 0)
#define DT_N_S_uart_P_serial_port_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_uart, serial_port, 0, __VA_ARGS__)
#define DT_N_S_uart_P_serial_port_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_uart, serial_port, 0, __VA_ARGS__)
#define DT_N_S_uart_P_serial_port_LEN 1
#define DT_N_S_uart_P_serial_port_EXISTS 1

/*
 * Devicetree node: /uart_1
 *
 * Node identifier: DT_N_S_uart_1
 *
 * Binding (compatible = zephyr,native-posix-uart):
 *   $ZEPHYR_BASE/dts/bindings/serial/zephyr,native-posix-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_uart_1_PATH "/uart_1"

/* Node's name with unit-address: */
#define DT_N_S_uart_1_FULL_NAME "uart_1"

/* Node parent (/) identifier: */
#define DT_N_S_uart_1_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_uart_1_CHILD_IDX 11

/* Helpers for dealing with node labels: */
#define DT_N_S_uart_1_NODELABEL_NUM 1
#define DT_N_S_uart_1_FOREACH_NODELABEL(fn) fn(uart1)
#define DT_N_S_uart_1_FOREACH_NODELABEL_VARGS(fn, ...) fn(uart1, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_uart_1_CHILD_NUM 0
#define DT_N_S_uart_1_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_uart_1_FOREACH_CHILD(fn) 
#define DT_N_S_uart_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_uart_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_uart_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_uart_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_uart_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_uart_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_uart_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_uart_1_ORD 26
#define DT_N_S_uart_1_ORD_STR_SORTABLE 00026

/* Ordinals for what this node depends on directly: */
#define DT_N_S_uart_1_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_uart_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_uart_1_EXISTS 1
#define DT_N_INST_0_zephyr_native_posix_uart DT_N_S_uart_1
#define DT_N_NODELABEL_uart1                 DT_N_S_uart_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_uart_1_REG_NUM 0
#define DT_N_S_uart_1_RANGES_NUM 0
#define DT_N_S_uart_1_FOREACH_RANGE(fn) 
#define DT_N_S_uart_1_IRQ_NUM 0
#define DT_N_S_uart_1_IRQ_LEVEL 0
#define DT_N_S_uart_1_COMPAT_MATCHES_zephyr_native_posix_uart 1
#define DT_N_S_uart_1_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_uart_1_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_uart_1_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_uart_1_COMPAT_MODEL_IDX_0 "native-posix-uart"
#define DT_N_S_uart_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_uart_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_uart_1_P_wakeup_source 0
#define DT_N_S_uart_1_P_wakeup_source_EXISTS 1
#define DT_N_S_uart_1_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_uart_1_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_uart_1_P_status "okay"
#define DT_N_S_uart_1_P_status_STRING_UNQUOTED okay
#define DT_N_S_uart_1_P_status_STRING_TOKEN okay
#define DT_N_S_uart_1_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_uart_1_P_status_IDX_0 "okay"
#define DT_N_S_uart_1_P_status_IDX_0_EXISTS 1
#define DT_N_S_uart_1_P_status_ENUM_IDX 1
#define DT_N_S_uart_1_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_uart_1_P_status_ENUM_TOKEN okay
#define DT_N_S_uart_1_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_uart_1_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_uart_1, status, 0)
#define DT_N_S_uart_1_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_uart_1, status, 0)
#define DT_N_S_uart_1_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_uart_1, status, 0, __VA_ARGS__)
#define DT_N_S_uart_1_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_uart_1, status, 0, __VA_ARGS__)
#define DT_N_S_uart_1_P_status_LEN 1
#define DT_N_S_uart_1_P_status_EXISTS 1
#define DT_N_S_uart_1_P_compatible {"zephyr,native-posix-uart"}
#define DT_N_S_uart_1_P_compatible_IDX_0 "zephyr,native-posix-uart"
#define DT_N_S_uart_1_P_compatible_IDX_0_STRING_UNQUOTED zephyr,native-posix-uart
#define DT_N_S_uart_1_P_compatible_IDX_0_STRING_TOKEN zephyr_native_posix_uart
#define DT_N_S_uart_1_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_NATIVE_POSIX_UART
#define DT_N_S_uart_1_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_uart_1_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_uart_1, compatible, 0)
#define DT_N_S_uart_1_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_uart_1, compatible, 0)
#define DT_N_S_uart_1_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_uart_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_uart_1_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_uart_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_uart_1_P_compatible_LEN 1
#define DT_N_S_uart_1_P_compatible_EXISTS 1
#define DT_N_S_uart_1_P_zephyr_deferred_init 0
#define DT_N_S_uart_1_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_uart_1_P_current_speed 0
#define DT_N_S_uart_1_P_current_speed_EXISTS 1
#define DT_N_S_uart_1_P_hw_flow_control 0
#define DT_N_S_uart_1_P_hw_flow_control_EXISTS 1

/*
 * Devicetree node: /udc0
 *
 * Node identifier: DT_N_S_udc0
 *
 * Binding (compatible = zephyr,native-posix-udc):
 *   $ZEPHYR_BASE/dts/bindings/usb/zephyr,native-posix-udc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_udc0_PATH "/udc0"

/* Node's name with unit-address: */
#define DT_N_S_udc0_FULL_NAME "udc0"

/* Node parent (/) identifier: */
#define DT_N_S_udc0_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_udc0_CHILD_IDX 16

/* Helpers for dealing with node labels: */
#define DT_N_S_udc0_NODELABEL_NUM 1
#define DT_N_S_udc0_FOREACH_NODELABEL(fn) fn(zephyr_udc0)
#define DT_N_S_udc0_FOREACH_NODELABEL_VARGS(fn, ...) fn(zephyr_udc0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_udc0_CHILD_NUM 0
#define DT_N_S_udc0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_udc0_FOREACH_CHILD(fn) 
#define DT_N_S_udc0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_udc0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_udc0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_udc0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_udc0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_udc0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_udc0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_udc0_ORD 27
#define DT_N_S_udc0_ORD_STR_SORTABLE 00027

/* Ordinals for what this node depends on directly: */
#define DT_N_S_udc0_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_udc0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_udc0_EXISTS 1
#define DT_N_INST_0_zephyr_native_posix_udc DT_N_S_udc0
#define DT_N_NODELABEL_zephyr_udc0          DT_N_S_udc0

/* Macros for properties that are special in the specification: */
#define DT_N_S_udc0_REG_NUM 0
#define DT_N_S_udc0_RANGES_NUM 0
#define DT_N_S_udc0_FOREACH_RANGE(fn) 
#define DT_N_S_udc0_IRQ_NUM 0
#define DT_N_S_udc0_IRQ_LEVEL 0
#define DT_N_S_udc0_COMPAT_MATCHES_zephyr_native_posix_udc 1
#define DT_N_S_udc0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_udc0_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_udc0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_udc0_COMPAT_MODEL_IDX_0 "native-posix-udc"
#define DT_N_S_udc0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_udc0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_udc0_P_wakeup_source 0
#define DT_N_S_udc0_P_wakeup_source_EXISTS 1
#define DT_N_S_udc0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_udc0_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_udc0_P_compatible {"zephyr,native-posix-udc"}
#define DT_N_S_udc0_P_compatible_IDX_0 "zephyr,native-posix-udc"
#define DT_N_S_udc0_P_compatible_IDX_0_STRING_UNQUOTED zephyr,native-posix-udc
#define DT_N_S_udc0_P_compatible_IDX_0_STRING_TOKEN zephyr_native_posix_udc
#define DT_N_S_udc0_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_NATIVE_POSIX_UDC
#define DT_N_S_udc0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_udc0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_udc0, compatible, 0)
#define DT_N_S_udc0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_udc0, compatible, 0)
#define DT_N_S_udc0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_udc0, compatible, 0, __VA_ARGS__)
#define DT_N_S_udc0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_udc0, compatible, 0, __VA_ARGS__)
#define DT_N_S_udc0_P_compatible_LEN 1
#define DT_N_S_udc0_P_compatible_EXISTS 1
#define DT_N_S_udc0_P_zephyr_deferred_init 0
#define DT_N_S_udc0_P_zephyr_deferred_init_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_CHILD_IDX 4

/* Helpers for dealing with node labels: */
#define DT_N_S_cpus_NODELABEL_NUM 0
#define DT_N_S_cpus_FOREACH_NODELABEL(fn) 
#define DT_N_S_cpus_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_CHILD_NUM 1
#define DT_N_S_cpus_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 28
#define DT_N_S_cpus_ORD_STR_SORTABLE 00028

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	29, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_RANGES_NUM 0
#define DT_N_S_cpus_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_IRQ_LEVEL 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 *
 * Binding (compatible = zephyr,native-posix-cpu):
 *   $ZEPHYR_BASE/dts/bindings/cpu/zephyr,native-posix-cpu.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_cpu_0_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_cpus_S_cpu_0_NODELABEL_NUM 1
#define DT_N_S_cpus_S_cpu_0_FOREACH_NODELABEL(fn) fn(cpu0)
#define DT_N_S_cpus_S_cpu_0_FOREACH_NODELABEL_VARGS(fn, ...) fn(cpu0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_cpu_0_CHILD_NUM 0
#define DT_N_S_cpus_S_cpu_0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 29
#define DT_N_S_cpus_S_cpu_0_ORD_STR_SORTABLE 00029

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	28, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_zephyr_native_posix_cpu DT_N_S_cpus_S_cpu_0
#define DT_N_NODELABEL_cpu0                 DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_IRQ_LEVEL 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_zephyr_native_posix_cpu 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0 "native-posix-cpu"
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_cpus_S_cpu_0_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible {"zephyr,native-posix-cpu"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "zephyr,native-posix-cpu"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UNQUOTED zephyr,native-posix-cpu
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_TOKEN zephyr_native_posix_cpu
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_NATIVE_POSIX_CPU
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_zephyr_deferred_init 0
#define DT_N_S_cpus_S_cpu_0_P_zephyr_deferred_init_EXISTS 1

/*
 * Devicetree node: /gpio@800
 *
 * Node identifier: DT_N_S_gpio_800
 *
 * Binding (compatible = zephyr,gpio-emul):
 *   $ZEPHYR_BASE/dts/bindings/gpio/zephyr,gpio-emul.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_gpio_800_PATH "/gpio@800"

/* Node's name with unit-address: */
#define DT_N_S_gpio_800_FULL_NAME "gpio@800"

/* Node parent (/) identifier: */
#define DT_N_S_gpio_800_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_gpio_800_CHILD_IDX 14

/* Helpers for dealing with node labels: */
#define DT_N_S_gpio_800_NODELABEL_NUM 1
#define DT_N_S_gpio_800_FOREACH_NODELABEL(fn) fn(gpio0)
#define DT_N_S_gpio_800_FOREACH_NODELABEL_VARGS(fn, ...) fn(gpio0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_gpio_800_CHILD_NUM 0
#define DT_N_S_gpio_800_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_gpio_800_FOREACH_CHILD(fn) 
#define DT_N_S_gpio_800_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_gpio_800_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_gpio_800_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_gpio_800_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_gpio_800_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_gpio_800_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_gpio_800_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_gpio_800_ORD 30
#define DT_N_S_gpio_800_ORD_STR_SORTABLE 00030

/* Ordinals for what this node depends on directly: */
#define DT_N_S_gpio_800_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_gpio_800_SUPPORTS_ORDS \
	31, /* /fake_io */ \
	32, /* /fake_io/bkled */ \
	33, /* /fake_io/bm0_button */ \
	34, /* /fake_io/bm1_button */ \
	35, /* /fake_io/board_button_0 */ \
	36, /* /fake_io/board_button_1 */ \
	37, /* /fake_io/board_button_2 */ \
	38, /* /fake_io/board_button_3 */ \
	39, /* /fake_io/board_button_4 */ \
	40, /* /fake_io/buzzer_en */ \
	41, /* /fake_io/can1_stb */ \
	42, /* /fake_io/digital_in_1_hi */ \
	43, /* /fake_io/digital_in_1_low */ \
	44, /* /fake_io/digital_in_2_hi */ \
	45, /* /fake_io/digital_in_2_low */ \
	46, /* /fake_io/digital_in_3_hi */ \
	47, /* /fake_io/digital_in_3_low */ \
	48, /* /fake_io/digital_in_4_hi */ \
	49, /* /fake_io/digital_in_4_low */ \
	50, /* /fake_io/display_power */ \
	51, /* /fake_io/display_reset */ \
	52, /* /fake_io/ignition_input */ \
	53, /* /fake_io/nafe_pwr_en */ \
	54, /* /fake_io/power_5v_enable */ \
	55, /* /fake_io/usb_id_input */ \
	56, /* /fake_io/vref_ctrl */ \
	72, /* /leds */ \
	73, /* /leds/led_0 */ \
	75, /* /lpuart_10/modbus_0 */ \
	77, /* /spi@200/nafe13388@0 */

/* Existence and alternate IDs: */
#define DT_N_S_gpio_800_EXISTS 1
#define DT_N_ALIAS_digital_in_port   DT_N_S_gpio_800
#define DT_N_ALIAS_gpio_expander     DT_N_S_gpio_800
#define DT_N_INST_0_zephyr_gpio_emul DT_N_S_gpio_800
#define DT_N_NODELABEL_gpio0         DT_N_S_gpio_800

/* Macros for properties that are special in the specification: */
#define DT_N_S_gpio_800_REG_NUM 1
#define DT_N_S_gpio_800_REG_IDX_0_EXISTS 1
#define DT_N_S_gpio_800_REG_IDX_0_VAL_ADDRESS 2048 /* 0x800 */
#define DT_N_S_gpio_800_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_gpio_800_RANGES_NUM 0
#define DT_N_S_gpio_800_FOREACH_RANGE(fn) 
#define DT_N_S_gpio_800_IRQ_NUM 0
#define DT_N_S_gpio_800_IRQ_LEVEL 0
#define DT_N_S_gpio_800_COMPAT_MATCHES_zephyr_gpio_emul 1
#define DT_N_S_gpio_800_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_gpio_800_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_gpio_800_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_gpio_800_COMPAT_MODEL_IDX_0 "gpio-emul"
#define DT_N_S_gpio_800_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_gpio_800_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_gpio_800_P_gpio_controller 1
#define DT_N_S_gpio_800_P_gpio_controller_EXISTS 1
#define DT_N_S_gpio_800_P_ngpios 32
#define DT_N_S_gpio_800_P_ngpios_EXISTS 1
#define DT_N_S_gpio_800_P_wakeup_source 0
#define DT_N_S_gpio_800_P_wakeup_source_EXISTS 1
#define DT_N_S_gpio_800_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_gpio_800_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_gpio_800_P_status "okay"
#define DT_N_S_gpio_800_P_status_STRING_UNQUOTED okay
#define DT_N_S_gpio_800_P_status_STRING_TOKEN okay
#define DT_N_S_gpio_800_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_gpio_800_P_status_IDX_0 "okay"
#define DT_N_S_gpio_800_P_status_IDX_0_EXISTS 1
#define DT_N_S_gpio_800_P_status_ENUM_IDX 1
#define DT_N_S_gpio_800_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_gpio_800_P_status_ENUM_TOKEN okay
#define DT_N_S_gpio_800_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_gpio_800_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_800, status, 0)
#define DT_N_S_gpio_800_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_800, status, 0)
#define DT_N_S_gpio_800_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_800, status, 0, __VA_ARGS__)
#define DT_N_S_gpio_800_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_800, status, 0, __VA_ARGS__)
#define DT_N_S_gpio_800_P_status_LEN 1
#define DT_N_S_gpio_800_P_status_EXISTS 1
#define DT_N_S_gpio_800_P_compatible {"zephyr,gpio-emul"}
#define DT_N_S_gpio_800_P_compatible_IDX_0 "zephyr,gpio-emul"
#define DT_N_S_gpio_800_P_compatible_IDX_0_STRING_UNQUOTED zephyr,gpio-emul
#define DT_N_S_gpio_800_P_compatible_IDX_0_STRING_TOKEN zephyr_gpio_emul
#define DT_N_S_gpio_800_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_GPIO_EMUL
#define DT_N_S_gpio_800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_gpio_800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_800, compatible, 0)
#define DT_N_S_gpio_800_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_800, compatible, 0)
#define DT_N_S_gpio_800_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_800, compatible, 0, __VA_ARGS__)
#define DT_N_S_gpio_800_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_800, compatible, 0, __VA_ARGS__)
#define DT_N_S_gpio_800_P_compatible_LEN 1
#define DT_N_S_gpio_800_P_compatible_EXISTS 1
#define DT_N_S_gpio_800_P_reg {2048 /* 0x800 */, 4 /* 0x4 */}
#define DT_N_S_gpio_800_P_reg_IDX_0 2048
#define DT_N_S_gpio_800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_gpio_800_P_reg_IDX_1 4
#define DT_N_S_gpio_800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_gpio_800_P_reg_EXISTS 1
#define DT_N_S_gpio_800_P_zephyr_deferred_init 0
#define DT_N_S_gpio_800_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_gpio_800_P_rising_edge 1
#define DT_N_S_gpio_800_P_rising_edge_EXISTS 1
#define DT_N_S_gpio_800_P_falling_edge 1
#define DT_N_S_gpio_800_P_falling_edge_EXISTS 1
#define DT_N_S_gpio_800_P_high_level 1
#define DT_N_S_gpio_800_P_high_level_EXISTS 1
#define DT_N_S_gpio_800_P_low_level 1
#define DT_N_S_gpio_800_P_low_level_EXISTS 1

/*
 * Devicetree node: /fake_io
 *
 * Node identifier: DT_N_S_fake_io
 *
 * Binding (compatible = gpio-leds):
 *   $ZEPHYR_BASE/dts/bindings/led/gpio-leds.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_PATH "/fake_io"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_FULL_NAME "fake_io"

/* Node parent (/) identifier: */
#define DT_N_S_fake_io_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_CHILD_IDX 33

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_NODELABEL_NUM 0
#define DT_N_S_fake_io_FOREACH_NODELABEL(fn) 
#define DT_N_S_fake_io_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_CHILD_NUM 25
#define DT_N_S_fake_io_CHILD_NUM_STATUS_OKAY 25
#define DT_N_S_fake_io_FOREACH_CHILD(fn) fn(DT_N_S_fake_io_S_display_power) fn(DT_N_S_fake_io_S_bkled) fn(DT_N_S_fake_io_S_display_reset) fn(DT_N_S_fake_io_S_power_5v_enable) fn(DT_N_S_fake_io_S_nafe_pwr_en) fn(DT_N_S_fake_io_S_can1_stb) fn(DT_N_S_fake_io_S_vref_ctrl) fn(DT_N_S_fake_io_S_bm0_button) fn(DT_N_S_fake_io_S_bm1_button) fn(DT_N_S_fake_io_S_buzzer_en) fn(DT_N_S_fake_io_S_board_button_0) fn(DT_N_S_fake_io_S_board_button_1) fn(DT_N_S_fake_io_S_board_button_2) fn(DT_N_S_fake_io_S_board_button_3) fn(DT_N_S_fake_io_S_board_button_4) fn(DT_N_S_fake_io_S_usb_id_input) fn(DT_N_S_fake_io_S_ignition_input) fn(DT_N_S_fake_io_S_digital_in_1_hi) fn(DT_N_S_fake_io_S_digital_in_1_low) fn(DT_N_S_fake_io_S_digital_in_2_hi) fn(DT_N_S_fake_io_S_digital_in_2_low) fn(DT_N_S_fake_io_S_digital_in_3_hi) fn(DT_N_S_fake_io_S_digital_in_3_low) fn(DT_N_S_fake_io_S_digital_in_4_hi) fn(DT_N_S_fake_io_S_digital_in_4_low)
#define DT_N_S_fake_io_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_fake_io_S_display_power) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_bkled) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_display_reset) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_power_5v_enable) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_nafe_pwr_en) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_can1_stb) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_vref_ctrl) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_bm0_button) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_bm1_button) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_buzzer_en) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_board_button_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_board_button_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_board_button_2) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_board_button_3) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_board_button_4) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_usb_id_input) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_ignition_input) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_1_hi) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_1_low) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_2_hi) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_2_low) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_3_hi) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_3_low) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_4_hi) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_4_low)
#define DT_N_S_fake_io_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_fake_io_S_display_power, __VA_ARGS__) fn(DT_N_S_fake_io_S_bkled, __VA_ARGS__) fn(DT_N_S_fake_io_S_display_reset, __VA_ARGS__) fn(DT_N_S_fake_io_S_power_5v_enable, __VA_ARGS__) fn(DT_N_S_fake_io_S_nafe_pwr_en, __VA_ARGS__) fn(DT_N_S_fake_io_S_can1_stb, __VA_ARGS__) fn(DT_N_S_fake_io_S_vref_ctrl, __VA_ARGS__) fn(DT_N_S_fake_io_S_bm0_button, __VA_ARGS__) fn(DT_N_S_fake_io_S_bm1_button, __VA_ARGS__) fn(DT_N_S_fake_io_S_buzzer_en, __VA_ARGS__) fn(DT_N_S_fake_io_S_board_button_0, __VA_ARGS__) fn(DT_N_S_fake_io_S_board_button_1, __VA_ARGS__) fn(DT_N_S_fake_io_S_board_button_2, __VA_ARGS__) fn(DT_N_S_fake_io_S_board_button_3, __VA_ARGS__) fn(DT_N_S_fake_io_S_board_button_4, __VA_ARGS__) fn(DT_N_S_fake_io_S_usb_id_input, __VA_ARGS__) fn(DT_N_S_fake_io_S_ignition_input, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_1_hi, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_1_low, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_2_hi, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_2_low, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_3_hi, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_3_low, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_4_hi, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_4_low, __VA_ARGS__)
#define DT_N_S_fake_io_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_display_power, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_bkled, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_display_reset, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_power_5v_enable, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_nafe_pwr_en, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_can1_stb, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_vref_ctrl, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_bm0_button, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_bm1_button, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_buzzer_en, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_board_button_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_board_button_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_board_button_2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_board_button_3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_board_button_4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_usb_id_input, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_ignition_input, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_1_hi, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_1_low, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_2_hi, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_2_low, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_3_hi, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_3_low, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_4_hi, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_4_low, __VA_ARGS__)
#define DT_N_S_fake_io_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_fake_io_S_display_power) fn(DT_N_S_fake_io_S_bkled) fn(DT_N_S_fake_io_S_display_reset) fn(DT_N_S_fake_io_S_power_5v_enable) fn(DT_N_S_fake_io_S_nafe_pwr_en) fn(DT_N_S_fake_io_S_can1_stb) fn(DT_N_S_fake_io_S_vref_ctrl) fn(DT_N_S_fake_io_S_bm0_button) fn(DT_N_S_fake_io_S_bm1_button) fn(DT_N_S_fake_io_S_buzzer_en) fn(DT_N_S_fake_io_S_board_button_0) fn(DT_N_S_fake_io_S_board_button_1) fn(DT_N_S_fake_io_S_board_button_2) fn(DT_N_S_fake_io_S_board_button_3) fn(DT_N_S_fake_io_S_board_button_4) fn(DT_N_S_fake_io_S_usb_id_input) fn(DT_N_S_fake_io_S_ignition_input) fn(DT_N_S_fake_io_S_digital_in_1_hi) fn(DT_N_S_fake_io_S_digital_in_1_low) fn(DT_N_S_fake_io_S_digital_in_2_hi) fn(DT_N_S_fake_io_S_digital_in_2_low) fn(DT_N_S_fake_io_S_digital_in_3_hi) fn(DT_N_S_fake_io_S_digital_in_3_low) fn(DT_N_S_fake_io_S_digital_in_4_hi) fn(DT_N_S_fake_io_S_digital_in_4_low)
#define DT_N_S_fake_io_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_fake_io_S_display_power) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_bkled) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_display_reset) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_power_5v_enable) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_nafe_pwr_en) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_can1_stb) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_vref_ctrl) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_bm0_button) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_bm1_button) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_buzzer_en) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_board_button_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_board_button_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_board_button_2) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_board_button_3) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_board_button_4) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_usb_id_input) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_ignition_input) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_1_hi) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_1_low) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_2_hi) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_2_low) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_3_hi) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_3_low) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_4_hi) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_4_low)
#define DT_N_S_fake_io_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_fake_io_S_display_power, __VA_ARGS__) fn(DT_N_S_fake_io_S_bkled, __VA_ARGS__) fn(DT_N_S_fake_io_S_display_reset, __VA_ARGS__) fn(DT_N_S_fake_io_S_power_5v_enable, __VA_ARGS__) fn(DT_N_S_fake_io_S_nafe_pwr_en, __VA_ARGS__) fn(DT_N_S_fake_io_S_can1_stb, __VA_ARGS__) fn(DT_N_S_fake_io_S_vref_ctrl, __VA_ARGS__) fn(DT_N_S_fake_io_S_bm0_button, __VA_ARGS__) fn(DT_N_S_fake_io_S_bm1_button, __VA_ARGS__) fn(DT_N_S_fake_io_S_buzzer_en, __VA_ARGS__) fn(DT_N_S_fake_io_S_board_button_0, __VA_ARGS__) fn(DT_N_S_fake_io_S_board_button_1, __VA_ARGS__) fn(DT_N_S_fake_io_S_board_button_2, __VA_ARGS__) fn(DT_N_S_fake_io_S_board_button_3, __VA_ARGS__) fn(DT_N_S_fake_io_S_board_button_4, __VA_ARGS__) fn(DT_N_S_fake_io_S_usb_id_input, __VA_ARGS__) fn(DT_N_S_fake_io_S_ignition_input, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_1_hi, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_1_low, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_2_hi, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_2_low, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_3_hi, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_3_low, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_4_hi, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_4_low, __VA_ARGS__)
#define DT_N_S_fake_io_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_display_power, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_bkled, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_display_reset, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_power_5v_enable, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_nafe_pwr_en, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_can1_stb, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_vref_ctrl, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_bm0_button, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_bm1_button, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_buzzer_en, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_board_button_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_board_button_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_board_button_2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_board_button_3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_board_button_4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_usb_id_input, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_ignition_input, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_1_hi, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_1_low, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_2_hi, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_2_low, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_3_hi, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_3_low, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_4_hi, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_fake_io_S_digital_in_4_low, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_ORD 31
#define DT_N_S_fake_io_ORD_STR_SORTABLE 00031

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_REQUIRES_ORDS \
	0, /* / */ \
	30, /* /gpio@800 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_SUPPORTS_ORDS \
	32, /* /fake_io/bkled */ \
	33, /* /fake_io/bm0_button */ \
	34, /* /fake_io/bm1_button */ \
	35, /* /fake_io/board_button_0 */ \
	36, /* /fake_io/board_button_1 */ \
	37, /* /fake_io/board_button_2 */ \
	38, /* /fake_io/board_button_3 */ \
	39, /* /fake_io/board_button_4 */ \
	40, /* /fake_io/buzzer_en */ \
	41, /* /fake_io/can1_stb */ \
	42, /* /fake_io/digital_in_1_hi */ \
	43, /* /fake_io/digital_in_1_low */ \
	44, /* /fake_io/digital_in_2_hi */ \
	45, /* /fake_io/digital_in_2_low */ \
	46, /* /fake_io/digital_in_3_hi */ \
	47, /* /fake_io/digital_in_3_low */ \
	48, /* /fake_io/digital_in_4_hi */ \
	49, /* /fake_io/digital_in_4_low */ \
	50, /* /fake_io/display_power */ \
	51, /* /fake_io/display_reset */ \
	52, /* /fake_io/ignition_input */ \
	53, /* /fake_io/nafe_pwr_en */ \
	54, /* /fake_io/power_5v_enable */ \
	55, /* /fake_io/usb_id_input */ \
	56, /* /fake_io/vref_ctrl */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_EXISTS 1
#define DT_N_INST_1_gpio_leds DT_N_S_fake_io

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_REG_NUM 0
#define DT_N_S_fake_io_RANGES_NUM 0
#define DT_N_S_fake_io_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_IRQ_NUM 0
#define DT_N_S_fake_io_IRQ_LEVEL 0
#define DT_N_S_fake_io_COMPAT_MATCHES_gpio_leds 1
#define DT_N_S_fake_io_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_P_compatible {"gpio-leds"}
#define DT_N_S_fake_io_P_compatible_IDX_0 "gpio-leds"
#define DT_N_S_fake_io_P_compatible_IDX_0_STRING_UNQUOTED gpio-leds
#define DT_N_S_fake_io_P_compatible_IDX_0_STRING_TOKEN gpio_leds
#define DT_N_S_fake_io_P_compatible_IDX_0_STRING_UPPER_TOKEN GPIO_LEDS
#define DT_N_S_fake_io_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_fake_io_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io, compatible, 0)
#define DT_N_S_fake_io_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io, compatible, 0)
#define DT_N_S_fake_io_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io, compatible, 0, __VA_ARGS__)
#define DT_N_S_fake_io_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io, compatible, 0, __VA_ARGS__)
#define DT_N_S_fake_io_P_compatible_LEN 1
#define DT_N_S_fake_io_P_compatible_EXISTS 1
#define DT_N_S_fake_io_P_status "disabled"
#define DT_N_S_fake_io_P_status_STRING_UNQUOTED disabled
#define DT_N_S_fake_io_P_status_STRING_TOKEN disabled
#define DT_N_S_fake_io_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_fake_io_P_status_IDX_0 "disabled"
#define DT_N_S_fake_io_P_status_IDX_0_EXISTS 1
#define DT_N_S_fake_io_P_status_ENUM_IDX 2
#define DT_N_S_fake_io_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_fake_io_P_status_ENUM_TOKEN disabled
#define DT_N_S_fake_io_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_fake_io_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io, status, 0)
#define DT_N_S_fake_io_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io, status, 0)
#define DT_N_S_fake_io_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io, status, 0, __VA_ARGS__)
#define DT_N_S_fake_io_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io, status, 0, __VA_ARGS__)
#define DT_N_S_fake_io_P_status_LEN 1
#define DT_N_S_fake_io_P_status_EXISTS 1

/*
 * Devicetree node: /fake_io/bkled
 *
 * Node identifier: DT_N_S_fake_io_S_bkled
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_bkled_PATH "/fake_io/bkled"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_bkled_FULL_NAME "bkled"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_bkled_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_bkled_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_bkled_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_bkled_FOREACH_NODELABEL(fn) fn(bkled)
#define DT_N_S_fake_io_S_bkled_FOREACH_NODELABEL_VARGS(fn, ...) fn(bkled, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_bkled_CHILD_NUM 0
#define DT_N_S_fake_io_S_bkled_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_bkled_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_bkled_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_bkled_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_bkled_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_bkled_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_bkled_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_bkled_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_bkled_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_bkled_ORD 32
#define DT_N_S_fake_io_S_bkled_ORD_STR_SORTABLE 00032

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_bkled_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_bkled_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_bkled_EXISTS 1
#define DT_N_ALIAS_backlight_led_en DT_N_S_fake_io_S_bkled
#define DT_N_NODELABEL_bkled        DT_N_S_fake_io_S_bkled

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_bkled_REG_NUM 0
#define DT_N_S_fake_io_S_bkled_RANGES_NUM 0
#define DT_N_S_fake_io_S_bkled_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_bkled_IRQ_NUM 0
#define DT_N_S_fake_io_S_bkled_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_bkled_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_bkled_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_bkled_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_bkled_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_bkled_P_gpios_IDX_0_VAL_pin 1
#define DT_N_S_fake_io_S_bkled_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_bkled_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_fake_io_S_bkled_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_bkled_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_bkled, gpios, 0)
#define DT_N_S_fake_io_S_bkled_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_bkled, gpios, 0)
#define DT_N_S_fake_io_S_bkled_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_bkled, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_bkled_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_bkled, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_bkled_P_gpios_LEN 1
#define DT_N_S_fake_io_S_bkled_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_bkled_P_label "Backlight LED"
#define DT_N_S_fake_io_S_bkled_P_label_STRING_UNQUOTED Backlight LED
#define DT_N_S_fake_io_S_bkled_P_label_STRING_TOKEN Backlight_LED
#define DT_N_S_fake_io_S_bkled_P_label_STRING_UPPER_TOKEN BACKLIGHT_LED
#define DT_N_S_fake_io_S_bkled_P_label_IDX_0 "Backlight LED"
#define DT_N_S_fake_io_S_bkled_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_bkled_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_bkled, label, 0)
#define DT_N_S_fake_io_S_bkled_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_bkled, label, 0)
#define DT_N_S_fake_io_S_bkled_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_bkled, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_bkled_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_bkled, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_bkled_P_label_LEN 1
#define DT_N_S_fake_io_S_bkled_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/bm0_button
 *
 * Node identifier: DT_N_S_fake_io_S_bm0_button
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_bm0_button_PATH "/fake_io/bm0_button"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_bm0_button_FULL_NAME "bm0_button"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_bm0_button_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_bm0_button_CHILD_IDX 7

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_bm0_button_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_bm0_button_FOREACH_NODELABEL(fn) fn(bm0_button)
#define DT_N_S_fake_io_S_bm0_button_FOREACH_NODELABEL_VARGS(fn, ...) fn(bm0_button, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_bm0_button_CHILD_NUM 0
#define DT_N_S_fake_io_S_bm0_button_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_bm0_button_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_bm0_button_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_bm0_button_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_bm0_button_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_bm0_button_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_bm0_button_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_bm0_button_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_bm0_button_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_bm0_button_ORD 33
#define DT_N_S_fake_io_S_bm0_button_ORD_STR_SORTABLE 00033

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_bm0_button_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_bm0_button_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_bm0_button_EXISTS 1
#define DT_N_ALIAS_bm0_btn        DT_N_S_fake_io_S_bm0_button
#define DT_N_NODELABEL_bm0_button DT_N_S_fake_io_S_bm0_button

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_bm0_button_REG_NUM 0
#define DT_N_S_fake_io_S_bm0_button_RANGES_NUM 0
#define DT_N_S_fake_io_S_bm0_button_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_bm0_button_IRQ_NUM 0
#define DT_N_S_fake_io_S_bm0_button_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_bm0_button_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_bm0_button_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_bm0_button_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_bm0_button_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_bm0_button_P_gpios_IDX_0_VAL_pin 7
#define DT_N_S_fake_io_S_bm0_button_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_bm0_button_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_fake_io_S_bm0_button_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_bm0_button_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_bm0_button, gpios, 0)
#define DT_N_S_fake_io_S_bm0_button_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_bm0_button, gpios, 0)
#define DT_N_S_fake_io_S_bm0_button_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_bm0_button, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_bm0_button_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_bm0_button, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_bm0_button_P_gpios_LEN 1
#define DT_N_S_fake_io_S_bm0_button_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_bm0_button_P_label "Boot Mode 0 Button"
#define DT_N_S_fake_io_S_bm0_button_P_label_STRING_UNQUOTED Boot Mode 0 Button
#define DT_N_S_fake_io_S_bm0_button_P_label_STRING_TOKEN Boot_Mode_0_Button
#define DT_N_S_fake_io_S_bm0_button_P_label_STRING_UPPER_TOKEN BOOT_MODE_0_BUTTON
#define DT_N_S_fake_io_S_bm0_button_P_label_IDX_0 "Boot Mode 0 Button"
#define DT_N_S_fake_io_S_bm0_button_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_bm0_button_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_bm0_button, label, 0)
#define DT_N_S_fake_io_S_bm0_button_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_bm0_button, label, 0)
#define DT_N_S_fake_io_S_bm0_button_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_bm0_button, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_bm0_button_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_bm0_button, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_bm0_button_P_label_LEN 1
#define DT_N_S_fake_io_S_bm0_button_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/bm1_button
 *
 * Node identifier: DT_N_S_fake_io_S_bm1_button
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_bm1_button_PATH "/fake_io/bm1_button"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_bm1_button_FULL_NAME "bm1_button"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_bm1_button_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_bm1_button_CHILD_IDX 8

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_bm1_button_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_bm1_button_FOREACH_NODELABEL(fn) fn(bm1_button)
#define DT_N_S_fake_io_S_bm1_button_FOREACH_NODELABEL_VARGS(fn, ...) fn(bm1_button, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_bm1_button_CHILD_NUM 0
#define DT_N_S_fake_io_S_bm1_button_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_bm1_button_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_bm1_button_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_bm1_button_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_bm1_button_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_bm1_button_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_bm1_button_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_bm1_button_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_bm1_button_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_bm1_button_ORD 34
#define DT_N_S_fake_io_S_bm1_button_ORD_STR_SORTABLE 00034

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_bm1_button_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_bm1_button_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_bm1_button_EXISTS 1
#define DT_N_ALIAS_bm1_btn        DT_N_S_fake_io_S_bm1_button
#define DT_N_NODELABEL_bm1_button DT_N_S_fake_io_S_bm1_button

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_bm1_button_REG_NUM 0
#define DT_N_S_fake_io_S_bm1_button_RANGES_NUM 0
#define DT_N_S_fake_io_S_bm1_button_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_bm1_button_IRQ_NUM 0
#define DT_N_S_fake_io_S_bm1_button_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_bm1_button_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_bm1_button_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_bm1_button_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_bm1_button_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_bm1_button_P_gpios_IDX_0_VAL_pin 8
#define DT_N_S_fake_io_S_bm1_button_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_bm1_button_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_fake_io_S_bm1_button_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_bm1_button_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_bm1_button, gpios, 0)
#define DT_N_S_fake_io_S_bm1_button_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_bm1_button, gpios, 0)
#define DT_N_S_fake_io_S_bm1_button_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_bm1_button, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_bm1_button_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_bm1_button, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_bm1_button_P_gpios_LEN 1
#define DT_N_S_fake_io_S_bm1_button_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_bm1_button_P_label "Boot Mode 1 Button"
#define DT_N_S_fake_io_S_bm1_button_P_label_STRING_UNQUOTED Boot Mode 1 Button
#define DT_N_S_fake_io_S_bm1_button_P_label_STRING_TOKEN Boot_Mode_1_Button
#define DT_N_S_fake_io_S_bm1_button_P_label_STRING_UPPER_TOKEN BOOT_MODE_1_BUTTON
#define DT_N_S_fake_io_S_bm1_button_P_label_IDX_0 "Boot Mode 1 Button"
#define DT_N_S_fake_io_S_bm1_button_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_bm1_button_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_bm1_button, label, 0)
#define DT_N_S_fake_io_S_bm1_button_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_bm1_button, label, 0)
#define DT_N_S_fake_io_S_bm1_button_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_bm1_button, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_bm1_button_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_bm1_button, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_bm1_button_P_label_LEN 1
#define DT_N_S_fake_io_S_bm1_button_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/board_button_0
 *
 * Node identifier: DT_N_S_fake_io_S_board_button_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_board_button_0_PATH "/fake_io/board_button_0"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_board_button_0_FULL_NAME "board_button_0"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_board_button_0_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_board_button_0_CHILD_IDX 10

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_board_button_0_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_board_button_0_FOREACH_NODELABEL(fn) fn(board_button_0)
#define DT_N_S_fake_io_S_board_button_0_FOREACH_NODELABEL_VARGS(fn, ...) fn(board_button_0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_board_button_0_CHILD_NUM 0
#define DT_N_S_fake_io_S_board_button_0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_board_button_0_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_board_button_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_board_button_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_board_button_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_board_button_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_board_button_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_board_button_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_board_button_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_board_button_0_ORD 35
#define DT_N_S_fake_io_S_board_button_0_ORD_STR_SORTABLE 00035

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_board_button_0_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_board_button_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_board_button_0_EXISTS 1
#define DT_N_ALIAS_board_button_0     DT_N_S_fake_io_S_board_button_0
#define DT_N_NODELABEL_board_button_0 DT_N_S_fake_io_S_board_button_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_board_button_0_REG_NUM 0
#define DT_N_S_fake_io_S_board_button_0_RANGES_NUM 0
#define DT_N_S_fake_io_S_board_button_0_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_board_button_0_IRQ_NUM 0
#define DT_N_S_fake_io_S_board_button_0_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_board_button_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_board_button_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_board_button_0_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_board_button_0_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_board_button_0_P_gpios_IDX_0_VAL_pin 2
#define DT_N_S_fake_io_S_board_button_0_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_board_button_0_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_fake_io_S_board_button_0_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_board_button_0_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_board_button_0, gpios, 0)
#define DT_N_S_fake_io_S_board_button_0_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_board_button_0, gpios, 0)
#define DT_N_S_fake_io_S_board_button_0_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_board_button_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_board_button_0_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_board_button_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_board_button_0_P_gpios_LEN 1
#define DT_N_S_fake_io_S_board_button_0_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_board_button_0_P_label "Button 0"
#define DT_N_S_fake_io_S_board_button_0_P_label_STRING_UNQUOTED Button 0
#define DT_N_S_fake_io_S_board_button_0_P_label_STRING_TOKEN Button_0
#define DT_N_S_fake_io_S_board_button_0_P_label_STRING_UPPER_TOKEN BUTTON_0
#define DT_N_S_fake_io_S_board_button_0_P_label_IDX_0 "Button 0"
#define DT_N_S_fake_io_S_board_button_0_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_board_button_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_board_button_0, label, 0)
#define DT_N_S_fake_io_S_board_button_0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_board_button_0, label, 0)
#define DT_N_S_fake_io_S_board_button_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_board_button_0, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_board_button_0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_board_button_0, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_board_button_0_P_label_LEN 1
#define DT_N_S_fake_io_S_board_button_0_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/board_button_1
 *
 * Node identifier: DT_N_S_fake_io_S_board_button_1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_board_button_1_PATH "/fake_io/board_button_1"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_board_button_1_FULL_NAME "board_button_1"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_board_button_1_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_board_button_1_CHILD_IDX 11

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_board_button_1_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_board_button_1_FOREACH_NODELABEL(fn) fn(board_button_1)
#define DT_N_S_fake_io_S_board_button_1_FOREACH_NODELABEL_VARGS(fn, ...) fn(board_button_1, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_board_button_1_CHILD_NUM 0
#define DT_N_S_fake_io_S_board_button_1_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_board_button_1_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_board_button_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_board_button_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_board_button_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_board_button_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_board_button_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_board_button_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_board_button_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_board_button_1_ORD 36
#define DT_N_S_fake_io_S_board_button_1_ORD_STR_SORTABLE 00036

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_board_button_1_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_board_button_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_board_button_1_EXISTS 1
#define DT_N_ALIAS_board_button_1     DT_N_S_fake_io_S_board_button_1
#define DT_N_NODELABEL_board_button_1 DT_N_S_fake_io_S_board_button_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_board_button_1_REG_NUM 0
#define DT_N_S_fake_io_S_board_button_1_RANGES_NUM 0
#define DT_N_S_fake_io_S_board_button_1_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_board_button_1_IRQ_NUM 0
#define DT_N_S_fake_io_S_board_button_1_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_board_button_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_board_button_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_board_button_1_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_board_button_1_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_board_button_1_P_gpios_IDX_0_VAL_pin 6
#define DT_N_S_fake_io_S_board_button_1_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_board_button_1_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_fake_io_S_board_button_1_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_board_button_1_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_board_button_1, gpios, 0)
#define DT_N_S_fake_io_S_board_button_1_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_board_button_1, gpios, 0)
#define DT_N_S_fake_io_S_board_button_1_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_board_button_1, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_board_button_1_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_board_button_1, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_board_button_1_P_gpios_LEN 1
#define DT_N_S_fake_io_S_board_button_1_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_board_button_1_P_label "Button 1"
#define DT_N_S_fake_io_S_board_button_1_P_label_STRING_UNQUOTED Button 1
#define DT_N_S_fake_io_S_board_button_1_P_label_STRING_TOKEN Button_1
#define DT_N_S_fake_io_S_board_button_1_P_label_STRING_UPPER_TOKEN BUTTON_1
#define DT_N_S_fake_io_S_board_button_1_P_label_IDX_0 "Button 1"
#define DT_N_S_fake_io_S_board_button_1_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_board_button_1_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_board_button_1, label, 0)
#define DT_N_S_fake_io_S_board_button_1_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_board_button_1, label, 0)
#define DT_N_S_fake_io_S_board_button_1_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_board_button_1, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_board_button_1_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_board_button_1, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_board_button_1_P_label_LEN 1
#define DT_N_S_fake_io_S_board_button_1_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/board_button_2
 *
 * Node identifier: DT_N_S_fake_io_S_board_button_2
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_board_button_2_PATH "/fake_io/board_button_2"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_board_button_2_FULL_NAME "board_button_2"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_board_button_2_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_board_button_2_CHILD_IDX 12

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_board_button_2_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_board_button_2_FOREACH_NODELABEL(fn) fn(board_button_2)
#define DT_N_S_fake_io_S_board_button_2_FOREACH_NODELABEL_VARGS(fn, ...) fn(board_button_2, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_board_button_2_CHILD_NUM 0
#define DT_N_S_fake_io_S_board_button_2_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_board_button_2_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_board_button_2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_board_button_2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_board_button_2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_board_button_2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_board_button_2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_board_button_2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_board_button_2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_board_button_2_ORD 37
#define DT_N_S_fake_io_S_board_button_2_ORD_STR_SORTABLE 00037

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_board_button_2_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_board_button_2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_board_button_2_EXISTS 1
#define DT_N_ALIAS_board_button_2     DT_N_S_fake_io_S_board_button_2
#define DT_N_NODELABEL_board_button_2 DT_N_S_fake_io_S_board_button_2

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_board_button_2_REG_NUM 0
#define DT_N_S_fake_io_S_board_button_2_RANGES_NUM 0
#define DT_N_S_fake_io_S_board_button_2_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_board_button_2_IRQ_NUM 0
#define DT_N_S_fake_io_S_board_button_2_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_board_button_2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_board_button_2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_board_button_2_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_board_button_2_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_board_button_2_P_gpios_IDX_0_VAL_pin 4
#define DT_N_S_fake_io_S_board_button_2_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_board_button_2_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_fake_io_S_board_button_2_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_board_button_2_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_board_button_2, gpios, 0)
#define DT_N_S_fake_io_S_board_button_2_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_board_button_2, gpios, 0)
#define DT_N_S_fake_io_S_board_button_2_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_board_button_2, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_board_button_2_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_board_button_2, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_board_button_2_P_gpios_LEN 1
#define DT_N_S_fake_io_S_board_button_2_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_board_button_2_P_label "Button 2"
#define DT_N_S_fake_io_S_board_button_2_P_label_STRING_UNQUOTED Button 2
#define DT_N_S_fake_io_S_board_button_2_P_label_STRING_TOKEN Button_2
#define DT_N_S_fake_io_S_board_button_2_P_label_STRING_UPPER_TOKEN BUTTON_2
#define DT_N_S_fake_io_S_board_button_2_P_label_IDX_0 "Button 2"
#define DT_N_S_fake_io_S_board_button_2_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_board_button_2_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_board_button_2, label, 0)
#define DT_N_S_fake_io_S_board_button_2_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_board_button_2, label, 0)
#define DT_N_S_fake_io_S_board_button_2_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_board_button_2, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_board_button_2_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_board_button_2, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_board_button_2_P_label_LEN 1
#define DT_N_S_fake_io_S_board_button_2_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/board_button_3
 *
 * Node identifier: DT_N_S_fake_io_S_board_button_3
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_board_button_3_PATH "/fake_io/board_button_3"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_board_button_3_FULL_NAME "board_button_3"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_board_button_3_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_board_button_3_CHILD_IDX 13

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_board_button_3_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_board_button_3_FOREACH_NODELABEL(fn) fn(board_button_3)
#define DT_N_S_fake_io_S_board_button_3_FOREACH_NODELABEL_VARGS(fn, ...) fn(board_button_3, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_board_button_3_CHILD_NUM 0
#define DT_N_S_fake_io_S_board_button_3_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_board_button_3_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_board_button_3_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_board_button_3_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_board_button_3_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_board_button_3_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_board_button_3_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_board_button_3_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_board_button_3_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_board_button_3_ORD 38
#define DT_N_S_fake_io_S_board_button_3_ORD_STR_SORTABLE 00038

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_board_button_3_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_board_button_3_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_board_button_3_EXISTS 1
#define DT_N_ALIAS_board_button_3     DT_N_S_fake_io_S_board_button_3
#define DT_N_NODELABEL_board_button_3 DT_N_S_fake_io_S_board_button_3

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_board_button_3_REG_NUM 0
#define DT_N_S_fake_io_S_board_button_3_RANGES_NUM 0
#define DT_N_S_fake_io_S_board_button_3_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_board_button_3_IRQ_NUM 0
#define DT_N_S_fake_io_S_board_button_3_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_board_button_3_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_board_button_3_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_board_button_3_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_board_button_3_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_board_button_3_P_gpios_IDX_0_VAL_pin 5
#define DT_N_S_fake_io_S_board_button_3_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_board_button_3_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_fake_io_S_board_button_3_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_board_button_3_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_board_button_3, gpios, 0)
#define DT_N_S_fake_io_S_board_button_3_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_board_button_3, gpios, 0)
#define DT_N_S_fake_io_S_board_button_3_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_board_button_3, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_board_button_3_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_board_button_3, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_board_button_3_P_gpios_LEN 1
#define DT_N_S_fake_io_S_board_button_3_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_board_button_3_P_label "Button 3"
#define DT_N_S_fake_io_S_board_button_3_P_label_STRING_UNQUOTED Button 3
#define DT_N_S_fake_io_S_board_button_3_P_label_STRING_TOKEN Button_3
#define DT_N_S_fake_io_S_board_button_3_P_label_STRING_UPPER_TOKEN BUTTON_3
#define DT_N_S_fake_io_S_board_button_3_P_label_IDX_0 "Button 3"
#define DT_N_S_fake_io_S_board_button_3_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_board_button_3_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_board_button_3, label, 0)
#define DT_N_S_fake_io_S_board_button_3_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_board_button_3, label, 0)
#define DT_N_S_fake_io_S_board_button_3_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_board_button_3, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_board_button_3_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_board_button_3, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_board_button_3_P_label_LEN 1
#define DT_N_S_fake_io_S_board_button_3_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/board_button_4
 *
 * Node identifier: DT_N_S_fake_io_S_board_button_4
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_board_button_4_PATH "/fake_io/board_button_4"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_board_button_4_FULL_NAME "board_button_4"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_board_button_4_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_board_button_4_CHILD_IDX 14

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_board_button_4_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_board_button_4_FOREACH_NODELABEL(fn) fn(board_button_4)
#define DT_N_S_fake_io_S_board_button_4_FOREACH_NODELABEL_VARGS(fn, ...) fn(board_button_4, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_board_button_4_CHILD_NUM 0
#define DT_N_S_fake_io_S_board_button_4_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_board_button_4_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_board_button_4_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_board_button_4_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_board_button_4_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_board_button_4_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_board_button_4_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_board_button_4_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_board_button_4_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_board_button_4_ORD 39
#define DT_N_S_fake_io_S_board_button_4_ORD_STR_SORTABLE 00039

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_board_button_4_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_board_button_4_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_board_button_4_EXISTS 1
#define DT_N_ALIAS_board_button_4     DT_N_S_fake_io_S_board_button_4
#define DT_N_NODELABEL_board_button_4 DT_N_S_fake_io_S_board_button_4

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_board_button_4_REG_NUM 0
#define DT_N_S_fake_io_S_board_button_4_RANGES_NUM 0
#define DT_N_S_fake_io_S_board_button_4_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_board_button_4_IRQ_NUM 0
#define DT_N_S_fake_io_S_board_button_4_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_board_button_4_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_board_button_4_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_board_button_4_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_board_button_4_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_board_button_4_P_gpios_IDX_0_VAL_pin 3
#define DT_N_S_fake_io_S_board_button_4_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_board_button_4_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_fake_io_S_board_button_4_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_board_button_4_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_board_button_4, gpios, 0)
#define DT_N_S_fake_io_S_board_button_4_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_board_button_4, gpios, 0)
#define DT_N_S_fake_io_S_board_button_4_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_board_button_4, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_board_button_4_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_board_button_4, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_board_button_4_P_gpios_LEN 1
#define DT_N_S_fake_io_S_board_button_4_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_board_button_4_P_label "Button 4"
#define DT_N_S_fake_io_S_board_button_4_P_label_STRING_UNQUOTED Button 4
#define DT_N_S_fake_io_S_board_button_4_P_label_STRING_TOKEN Button_4
#define DT_N_S_fake_io_S_board_button_4_P_label_STRING_UPPER_TOKEN BUTTON_4
#define DT_N_S_fake_io_S_board_button_4_P_label_IDX_0 "Button 4"
#define DT_N_S_fake_io_S_board_button_4_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_board_button_4_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_board_button_4, label, 0)
#define DT_N_S_fake_io_S_board_button_4_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_board_button_4, label, 0)
#define DT_N_S_fake_io_S_board_button_4_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_board_button_4, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_board_button_4_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_board_button_4, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_board_button_4_P_label_LEN 1
#define DT_N_S_fake_io_S_board_button_4_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/buzzer_en
 *
 * Node identifier: DT_N_S_fake_io_S_buzzer_en
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_buzzer_en_PATH "/fake_io/buzzer_en"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_buzzer_en_FULL_NAME "buzzer_en"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_buzzer_en_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_buzzer_en_CHILD_IDX 9

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_buzzer_en_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_buzzer_en_FOREACH_NODELABEL(fn) fn(buzzer_en)
#define DT_N_S_fake_io_S_buzzer_en_FOREACH_NODELABEL_VARGS(fn, ...) fn(buzzer_en, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_buzzer_en_CHILD_NUM 0
#define DT_N_S_fake_io_S_buzzer_en_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_buzzer_en_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_buzzer_en_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_buzzer_en_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_buzzer_en_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_buzzer_en_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_buzzer_en_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_buzzer_en_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_buzzer_en_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_buzzer_en_ORD 40
#define DT_N_S_fake_io_S_buzzer_en_ORD_STR_SORTABLE 00040

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_buzzer_en_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_buzzer_en_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_buzzer_en_EXISTS 1
#define DT_N_ALIAS_buzzer_en     DT_N_S_fake_io_S_buzzer_en
#define DT_N_NODELABEL_buzzer_en DT_N_S_fake_io_S_buzzer_en

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_buzzer_en_REG_NUM 0
#define DT_N_S_fake_io_S_buzzer_en_RANGES_NUM 0
#define DT_N_S_fake_io_S_buzzer_en_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_buzzer_en_IRQ_NUM 0
#define DT_N_S_fake_io_S_buzzer_en_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_buzzer_en_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_buzzer_en_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_buzzer_en_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_buzzer_en_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_buzzer_en_P_gpios_IDX_0_VAL_pin 9
#define DT_N_S_fake_io_S_buzzer_en_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_buzzer_en_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_fake_io_S_buzzer_en_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_buzzer_en_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_buzzer_en, gpios, 0)
#define DT_N_S_fake_io_S_buzzer_en_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_buzzer_en, gpios, 0)
#define DT_N_S_fake_io_S_buzzer_en_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_buzzer_en, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_buzzer_en_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_buzzer_en, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_buzzer_en_P_gpios_LEN 1
#define DT_N_S_fake_io_S_buzzer_en_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_buzzer_en_P_label "Buzzer Enable"
#define DT_N_S_fake_io_S_buzzer_en_P_label_STRING_UNQUOTED Buzzer Enable
#define DT_N_S_fake_io_S_buzzer_en_P_label_STRING_TOKEN Buzzer_Enable
#define DT_N_S_fake_io_S_buzzer_en_P_label_STRING_UPPER_TOKEN BUZZER_ENABLE
#define DT_N_S_fake_io_S_buzzer_en_P_label_IDX_0 "Buzzer Enable"
#define DT_N_S_fake_io_S_buzzer_en_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_buzzer_en_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_buzzer_en, label, 0)
#define DT_N_S_fake_io_S_buzzer_en_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_buzzer_en, label, 0)
#define DT_N_S_fake_io_S_buzzer_en_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_buzzer_en, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_buzzer_en_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_buzzer_en, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_buzzer_en_P_label_LEN 1
#define DT_N_S_fake_io_S_buzzer_en_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/can1_stb
 *
 * Node identifier: DT_N_S_fake_io_S_can1_stb
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_can1_stb_PATH "/fake_io/can1_stb"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_can1_stb_FULL_NAME "can1_stb"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_can1_stb_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_can1_stb_CHILD_IDX 5

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_can1_stb_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_can1_stb_FOREACH_NODELABEL(fn) fn(can1_stb)
#define DT_N_S_fake_io_S_can1_stb_FOREACH_NODELABEL_VARGS(fn, ...) fn(can1_stb, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_can1_stb_CHILD_NUM 0
#define DT_N_S_fake_io_S_can1_stb_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_can1_stb_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_can1_stb_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_can1_stb_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_can1_stb_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_can1_stb_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_can1_stb_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_can1_stb_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_can1_stb_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_can1_stb_ORD 41
#define DT_N_S_fake_io_S_can1_stb_ORD_STR_SORTABLE 00041

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_can1_stb_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_can1_stb_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_can1_stb_EXISTS 1
#define DT_N_ALIAS_can1_stb     DT_N_S_fake_io_S_can1_stb
#define DT_N_NODELABEL_can1_stb DT_N_S_fake_io_S_can1_stb

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_can1_stb_REG_NUM 0
#define DT_N_S_fake_io_S_can1_stb_RANGES_NUM 0
#define DT_N_S_fake_io_S_can1_stb_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_can1_stb_IRQ_NUM 0
#define DT_N_S_fake_io_S_can1_stb_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_can1_stb_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_can1_stb_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_can1_stb_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_can1_stb_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_can1_stb_P_gpios_IDX_0_VAL_pin 5
#define DT_N_S_fake_io_S_can1_stb_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_can1_stb_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_fake_io_S_can1_stb_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_can1_stb_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_can1_stb, gpios, 0)
#define DT_N_S_fake_io_S_can1_stb_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_can1_stb, gpios, 0)
#define DT_N_S_fake_io_S_can1_stb_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_can1_stb, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_can1_stb_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_can1_stb, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_can1_stb_P_gpios_LEN 1
#define DT_N_S_fake_io_S_can1_stb_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_can1_stb_P_label "CAN1 Transceiver STB"
#define DT_N_S_fake_io_S_can1_stb_P_label_STRING_UNQUOTED CAN1 Transceiver STB
#define DT_N_S_fake_io_S_can1_stb_P_label_STRING_TOKEN CAN1_Transceiver_STB
#define DT_N_S_fake_io_S_can1_stb_P_label_STRING_UPPER_TOKEN CAN1_TRANSCEIVER_STB
#define DT_N_S_fake_io_S_can1_stb_P_label_IDX_0 "CAN1 Transceiver STB"
#define DT_N_S_fake_io_S_can1_stb_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_can1_stb_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_can1_stb, label, 0)
#define DT_N_S_fake_io_S_can1_stb_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_can1_stb, label, 0)
#define DT_N_S_fake_io_S_can1_stb_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_can1_stb, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_can1_stb_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_can1_stb, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_can1_stb_P_label_LEN 1
#define DT_N_S_fake_io_S_can1_stb_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/digital_in_1_hi
 *
 * Node identifier: DT_N_S_fake_io_S_digital_in_1_hi
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_digital_in_1_hi_PATH "/fake_io/digital_in_1_hi"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_digital_in_1_hi_FULL_NAME "digital_in_1_hi"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_digital_in_1_hi_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_digital_in_1_hi_CHILD_IDX 17

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_digital_in_1_hi_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_digital_in_1_hi_FOREACH_NODELABEL(fn) fn(digital_in_1_hi)
#define DT_N_S_fake_io_S_digital_in_1_hi_FOREACH_NODELABEL_VARGS(fn, ...) fn(digital_in_1_hi, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_digital_in_1_hi_CHILD_NUM 0
#define DT_N_S_fake_io_S_digital_in_1_hi_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_digital_in_1_hi_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_digital_in_1_hi_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_digital_in_1_hi_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_digital_in_1_hi_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_digital_in_1_hi_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_digital_in_1_hi_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_digital_in_1_hi_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_digital_in_1_hi_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_digital_in_1_hi_ORD 42
#define DT_N_S_fake_io_S_digital_in_1_hi_ORD_STR_SORTABLE 00042

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_digital_in_1_hi_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_digital_in_1_hi_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_digital_in_1_hi_EXISTS 1
#define DT_N_ALIAS_digital_in_1_hi     DT_N_S_fake_io_S_digital_in_1_hi
#define DT_N_NODELABEL_digital_in_1_hi DT_N_S_fake_io_S_digital_in_1_hi

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_digital_in_1_hi_REG_NUM 0
#define DT_N_S_fake_io_S_digital_in_1_hi_RANGES_NUM 0
#define DT_N_S_fake_io_S_digital_in_1_hi_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_digital_in_1_hi_IRQ_NUM 0
#define DT_N_S_fake_io_S_digital_in_1_hi_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_digital_in_1_hi_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_digital_in_1_hi_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_digital_in_1_hi_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_1_hi_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_digital_in_1_hi_P_gpios_IDX_0_VAL_pin 16
#define DT_N_S_fake_io_S_digital_in_1_hi_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_1_hi_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_fake_io_S_digital_in_1_hi_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_1_hi_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_digital_in_1_hi, gpios, 0)
#define DT_N_S_fake_io_S_digital_in_1_hi_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_digital_in_1_hi, gpios, 0)
#define DT_N_S_fake_io_S_digital_in_1_hi_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_digital_in_1_hi, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_1_hi_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_digital_in_1_hi, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_1_hi_P_gpios_LEN 1
#define DT_N_S_fake_io_S_digital_in_1_hi_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_1_hi_P_label "DIN1 HI"
#define DT_N_S_fake_io_S_digital_in_1_hi_P_label_STRING_UNQUOTED DIN1 HI
#define DT_N_S_fake_io_S_digital_in_1_hi_P_label_STRING_TOKEN DIN1_HI
#define DT_N_S_fake_io_S_digital_in_1_hi_P_label_STRING_UPPER_TOKEN DIN1_HI
#define DT_N_S_fake_io_S_digital_in_1_hi_P_label_IDX_0 "DIN1 HI"
#define DT_N_S_fake_io_S_digital_in_1_hi_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_1_hi_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_digital_in_1_hi, label, 0)
#define DT_N_S_fake_io_S_digital_in_1_hi_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_digital_in_1_hi, label, 0)
#define DT_N_S_fake_io_S_digital_in_1_hi_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_digital_in_1_hi, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_1_hi_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_digital_in_1_hi, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_1_hi_P_label_LEN 1
#define DT_N_S_fake_io_S_digital_in_1_hi_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/digital_in_1_low
 *
 * Node identifier: DT_N_S_fake_io_S_digital_in_1_low
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_digital_in_1_low_PATH "/fake_io/digital_in_1_low"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_digital_in_1_low_FULL_NAME "digital_in_1_low"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_digital_in_1_low_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_digital_in_1_low_CHILD_IDX 18

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_digital_in_1_low_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_digital_in_1_low_FOREACH_NODELABEL(fn) fn(digital_in_1_low)
#define DT_N_S_fake_io_S_digital_in_1_low_FOREACH_NODELABEL_VARGS(fn, ...) fn(digital_in_1_low, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_digital_in_1_low_CHILD_NUM 0
#define DT_N_S_fake_io_S_digital_in_1_low_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_digital_in_1_low_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_digital_in_1_low_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_digital_in_1_low_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_digital_in_1_low_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_digital_in_1_low_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_digital_in_1_low_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_digital_in_1_low_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_digital_in_1_low_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_digital_in_1_low_ORD 43
#define DT_N_S_fake_io_S_digital_in_1_low_ORD_STR_SORTABLE 00043

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_digital_in_1_low_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_digital_in_1_low_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_digital_in_1_low_EXISTS 1
#define DT_N_ALIAS_digital_in_1_low     DT_N_S_fake_io_S_digital_in_1_low
#define DT_N_NODELABEL_digital_in_1_low DT_N_S_fake_io_S_digital_in_1_low

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_digital_in_1_low_REG_NUM 0
#define DT_N_S_fake_io_S_digital_in_1_low_RANGES_NUM 0
#define DT_N_S_fake_io_S_digital_in_1_low_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_digital_in_1_low_IRQ_NUM 0
#define DT_N_S_fake_io_S_digital_in_1_low_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_digital_in_1_low_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_digital_in_1_low_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_digital_in_1_low_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_1_low_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_digital_in_1_low_P_gpios_IDX_0_VAL_pin 17
#define DT_N_S_fake_io_S_digital_in_1_low_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_1_low_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_fake_io_S_digital_in_1_low_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_1_low_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_digital_in_1_low, gpios, 0)
#define DT_N_S_fake_io_S_digital_in_1_low_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_digital_in_1_low, gpios, 0)
#define DT_N_S_fake_io_S_digital_in_1_low_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_digital_in_1_low, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_1_low_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_digital_in_1_low, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_1_low_P_gpios_LEN 1
#define DT_N_S_fake_io_S_digital_in_1_low_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_1_low_P_label "DIN1 LO"
#define DT_N_S_fake_io_S_digital_in_1_low_P_label_STRING_UNQUOTED DIN1 LO
#define DT_N_S_fake_io_S_digital_in_1_low_P_label_STRING_TOKEN DIN1_LO
#define DT_N_S_fake_io_S_digital_in_1_low_P_label_STRING_UPPER_TOKEN DIN1_LO
#define DT_N_S_fake_io_S_digital_in_1_low_P_label_IDX_0 "DIN1 LO"
#define DT_N_S_fake_io_S_digital_in_1_low_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_1_low_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_digital_in_1_low, label, 0)
#define DT_N_S_fake_io_S_digital_in_1_low_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_digital_in_1_low, label, 0)
#define DT_N_S_fake_io_S_digital_in_1_low_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_digital_in_1_low, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_1_low_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_digital_in_1_low, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_1_low_P_label_LEN 1
#define DT_N_S_fake_io_S_digital_in_1_low_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/digital_in_2_hi
 *
 * Node identifier: DT_N_S_fake_io_S_digital_in_2_hi
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_digital_in_2_hi_PATH "/fake_io/digital_in_2_hi"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_digital_in_2_hi_FULL_NAME "digital_in_2_hi"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_digital_in_2_hi_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_digital_in_2_hi_CHILD_IDX 19

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_digital_in_2_hi_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_digital_in_2_hi_FOREACH_NODELABEL(fn) fn(digital_in_2_hi)
#define DT_N_S_fake_io_S_digital_in_2_hi_FOREACH_NODELABEL_VARGS(fn, ...) fn(digital_in_2_hi, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_digital_in_2_hi_CHILD_NUM 0
#define DT_N_S_fake_io_S_digital_in_2_hi_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_digital_in_2_hi_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_digital_in_2_hi_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_digital_in_2_hi_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_digital_in_2_hi_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_digital_in_2_hi_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_digital_in_2_hi_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_digital_in_2_hi_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_digital_in_2_hi_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_digital_in_2_hi_ORD 44
#define DT_N_S_fake_io_S_digital_in_2_hi_ORD_STR_SORTABLE 00044

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_digital_in_2_hi_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_digital_in_2_hi_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_digital_in_2_hi_EXISTS 1
#define DT_N_ALIAS_digital_in_2_hi     DT_N_S_fake_io_S_digital_in_2_hi
#define DT_N_NODELABEL_digital_in_2_hi DT_N_S_fake_io_S_digital_in_2_hi

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_digital_in_2_hi_REG_NUM 0
#define DT_N_S_fake_io_S_digital_in_2_hi_RANGES_NUM 0
#define DT_N_S_fake_io_S_digital_in_2_hi_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_digital_in_2_hi_IRQ_NUM 0
#define DT_N_S_fake_io_S_digital_in_2_hi_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_digital_in_2_hi_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_digital_in_2_hi_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_digital_in_2_hi_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_2_hi_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_digital_in_2_hi_P_gpios_IDX_0_VAL_pin 18
#define DT_N_S_fake_io_S_digital_in_2_hi_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_2_hi_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_fake_io_S_digital_in_2_hi_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_2_hi_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_digital_in_2_hi, gpios, 0)
#define DT_N_S_fake_io_S_digital_in_2_hi_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_digital_in_2_hi, gpios, 0)
#define DT_N_S_fake_io_S_digital_in_2_hi_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_digital_in_2_hi, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_2_hi_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_digital_in_2_hi, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_2_hi_P_gpios_LEN 1
#define DT_N_S_fake_io_S_digital_in_2_hi_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_2_hi_P_label "DIN2 HI"
#define DT_N_S_fake_io_S_digital_in_2_hi_P_label_STRING_UNQUOTED DIN2 HI
#define DT_N_S_fake_io_S_digital_in_2_hi_P_label_STRING_TOKEN DIN2_HI
#define DT_N_S_fake_io_S_digital_in_2_hi_P_label_STRING_UPPER_TOKEN DIN2_HI
#define DT_N_S_fake_io_S_digital_in_2_hi_P_label_IDX_0 "DIN2 HI"
#define DT_N_S_fake_io_S_digital_in_2_hi_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_2_hi_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_digital_in_2_hi, label, 0)
#define DT_N_S_fake_io_S_digital_in_2_hi_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_digital_in_2_hi, label, 0)
#define DT_N_S_fake_io_S_digital_in_2_hi_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_digital_in_2_hi, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_2_hi_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_digital_in_2_hi, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_2_hi_P_label_LEN 1
#define DT_N_S_fake_io_S_digital_in_2_hi_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/digital_in_2_low
 *
 * Node identifier: DT_N_S_fake_io_S_digital_in_2_low
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_digital_in_2_low_PATH "/fake_io/digital_in_2_low"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_digital_in_2_low_FULL_NAME "digital_in_2_low"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_digital_in_2_low_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_digital_in_2_low_CHILD_IDX 20

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_digital_in_2_low_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_digital_in_2_low_FOREACH_NODELABEL(fn) fn(digital_in_2_low)
#define DT_N_S_fake_io_S_digital_in_2_low_FOREACH_NODELABEL_VARGS(fn, ...) fn(digital_in_2_low, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_digital_in_2_low_CHILD_NUM 0
#define DT_N_S_fake_io_S_digital_in_2_low_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_digital_in_2_low_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_digital_in_2_low_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_digital_in_2_low_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_digital_in_2_low_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_digital_in_2_low_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_digital_in_2_low_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_digital_in_2_low_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_digital_in_2_low_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_digital_in_2_low_ORD 45
#define DT_N_S_fake_io_S_digital_in_2_low_ORD_STR_SORTABLE 00045

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_digital_in_2_low_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_digital_in_2_low_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_digital_in_2_low_EXISTS 1
#define DT_N_ALIAS_digital_in_2_low     DT_N_S_fake_io_S_digital_in_2_low
#define DT_N_NODELABEL_digital_in_2_low DT_N_S_fake_io_S_digital_in_2_low

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_digital_in_2_low_REG_NUM 0
#define DT_N_S_fake_io_S_digital_in_2_low_RANGES_NUM 0
#define DT_N_S_fake_io_S_digital_in_2_low_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_digital_in_2_low_IRQ_NUM 0
#define DT_N_S_fake_io_S_digital_in_2_low_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_digital_in_2_low_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_digital_in_2_low_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_digital_in_2_low_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_2_low_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_digital_in_2_low_P_gpios_IDX_0_VAL_pin 19
#define DT_N_S_fake_io_S_digital_in_2_low_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_2_low_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_fake_io_S_digital_in_2_low_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_2_low_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_digital_in_2_low, gpios, 0)
#define DT_N_S_fake_io_S_digital_in_2_low_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_digital_in_2_low, gpios, 0)
#define DT_N_S_fake_io_S_digital_in_2_low_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_digital_in_2_low, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_2_low_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_digital_in_2_low, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_2_low_P_gpios_LEN 1
#define DT_N_S_fake_io_S_digital_in_2_low_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_2_low_P_label "DIN2 LO"
#define DT_N_S_fake_io_S_digital_in_2_low_P_label_STRING_UNQUOTED DIN2 LO
#define DT_N_S_fake_io_S_digital_in_2_low_P_label_STRING_TOKEN DIN2_LO
#define DT_N_S_fake_io_S_digital_in_2_low_P_label_STRING_UPPER_TOKEN DIN2_LO
#define DT_N_S_fake_io_S_digital_in_2_low_P_label_IDX_0 "DIN2 LO"
#define DT_N_S_fake_io_S_digital_in_2_low_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_2_low_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_digital_in_2_low, label, 0)
#define DT_N_S_fake_io_S_digital_in_2_low_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_digital_in_2_low, label, 0)
#define DT_N_S_fake_io_S_digital_in_2_low_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_digital_in_2_low, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_2_low_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_digital_in_2_low, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_2_low_P_label_LEN 1
#define DT_N_S_fake_io_S_digital_in_2_low_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/digital_in_3_hi
 *
 * Node identifier: DT_N_S_fake_io_S_digital_in_3_hi
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_digital_in_3_hi_PATH "/fake_io/digital_in_3_hi"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_digital_in_3_hi_FULL_NAME "digital_in_3_hi"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_digital_in_3_hi_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_digital_in_3_hi_CHILD_IDX 21

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_digital_in_3_hi_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_digital_in_3_hi_FOREACH_NODELABEL(fn) fn(digital_in_3_hi)
#define DT_N_S_fake_io_S_digital_in_3_hi_FOREACH_NODELABEL_VARGS(fn, ...) fn(digital_in_3_hi, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_digital_in_3_hi_CHILD_NUM 0
#define DT_N_S_fake_io_S_digital_in_3_hi_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_digital_in_3_hi_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_digital_in_3_hi_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_digital_in_3_hi_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_digital_in_3_hi_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_digital_in_3_hi_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_digital_in_3_hi_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_digital_in_3_hi_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_digital_in_3_hi_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_digital_in_3_hi_ORD 46
#define DT_N_S_fake_io_S_digital_in_3_hi_ORD_STR_SORTABLE 00046

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_digital_in_3_hi_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_digital_in_3_hi_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_digital_in_3_hi_EXISTS 1
#define DT_N_ALIAS_digital_in_3_hi     DT_N_S_fake_io_S_digital_in_3_hi
#define DT_N_NODELABEL_digital_in_3_hi DT_N_S_fake_io_S_digital_in_3_hi

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_digital_in_3_hi_REG_NUM 0
#define DT_N_S_fake_io_S_digital_in_3_hi_RANGES_NUM 0
#define DT_N_S_fake_io_S_digital_in_3_hi_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_digital_in_3_hi_IRQ_NUM 0
#define DT_N_S_fake_io_S_digital_in_3_hi_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_digital_in_3_hi_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_digital_in_3_hi_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_digital_in_3_hi_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_3_hi_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_digital_in_3_hi_P_gpios_IDX_0_VAL_pin 20
#define DT_N_S_fake_io_S_digital_in_3_hi_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_3_hi_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_fake_io_S_digital_in_3_hi_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_3_hi_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_digital_in_3_hi, gpios, 0)
#define DT_N_S_fake_io_S_digital_in_3_hi_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_digital_in_3_hi, gpios, 0)
#define DT_N_S_fake_io_S_digital_in_3_hi_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_digital_in_3_hi, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_3_hi_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_digital_in_3_hi, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_3_hi_P_gpios_LEN 1
#define DT_N_S_fake_io_S_digital_in_3_hi_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_3_hi_P_label "DIN3 HI"
#define DT_N_S_fake_io_S_digital_in_3_hi_P_label_STRING_UNQUOTED DIN3 HI
#define DT_N_S_fake_io_S_digital_in_3_hi_P_label_STRING_TOKEN DIN3_HI
#define DT_N_S_fake_io_S_digital_in_3_hi_P_label_STRING_UPPER_TOKEN DIN3_HI
#define DT_N_S_fake_io_S_digital_in_3_hi_P_label_IDX_0 "DIN3 HI"
#define DT_N_S_fake_io_S_digital_in_3_hi_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_3_hi_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_digital_in_3_hi, label, 0)
#define DT_N_S_fake_io_S_digital_in_3_hi_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_digital_in_3_hi, label, 0)
#define DT_N_S_fake_io_S_digital_in_3_hi_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_digital_in_3_hi, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_3_hi_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_digital_in_3_hi, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_3_hi_P_label_LEN 1
#define DT_N_S_fake_io_S_digital_in_3_hi_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/digital_in_3_low
 *
 * Node identifier: DT_N_S_fake_io_S_digital_in_3_low
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_digital_in_3_low_PATH "/fake_io/digital_in_3_low"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_digital_in_3_low_FULL_NAME "digital_in_3_low"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_digital_in_3_low_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_digital_in_3_low_CHILD_IDX 22

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_digital_in_3_low_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_digital_in_3_low_FOREACH_NODELABEL(fn) fn(digital_in_3_low)
#define DT_N_S_fake_io_S_digital_in_3_low_FOREACH_NODELABEL_VARGS(fn, ...) fn(digital_in_3_low, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_digital_in_3_low_CHILD_NUM 0
#define DT_N_S_fake_io_S_digital_in_3_low_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_digital_in_3_low_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_digital_in_3_low_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_digital_in_3_low_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_digital_in_3_low_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_digital_in_3_low_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_digital_in_3_low_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_digital_in_3_low_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_digital_in_3_low_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_digital_in_3_low_ORD 47
#define DT_N_S_fake_io_S_digital_in_3_low_ORD_STR_SORTABLE 00047

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_digital_in_3_low_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_digital_in_3_low_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_digital_in_3_low_EXISTS 1
#define DT_N_ALIAS_digital_in_3_low     DT_N_S_fake_io_S_digital_in_3_low
#define DT_N_NODELABEL_digital_in_3_low DT_N_S_fake_io_S_digital_in_3_low

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_digital_in_3_low_REG_NUM 0
#define DT_N_S_fake_io_S_digital_in_3_low_RANGES_NUM 0
#define DT_N_S_fake_io_S_digital_in_3_low_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_digital_in_3_low_IRQ_NUM 0
#define DT_N_S_fake_io_S_digital_in_3_low_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_digital_in_3_low_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_digital_in_3_low_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_digital_in_3_low_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_3_low_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_digital_in_3_low_P_gpios_IDX_0_VAL_pin 21
#define DT_N_S_fake_io_S_digital_in_3_low_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_3_low_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_fake_io_S_digital_in_3_low_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_3_low_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_digital_in_3_low, gpios, 0)
#define DT_N_S_fake_io_S_digital_in_3_low_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_digital_in_3_low, gpios, 0)
#define DT_N_S_fake_io_S_digital_in_3_low_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_digital_in_3_low, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_3_low_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_digital_in_3_low, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_3_low_P_gpios_LEN 1
#define DT_N_S_fake_io_S_digital_in_3_low_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_3_low_P_label "DIN3 LO"
#define DT_N_S_fake_io_S_digital_in_3_low_P_label_STRING_UNQUOTED DIN3 LO
#define DT_N_S_fake_io_S_digital_in_3_low_P_label_STRING_TOKEN DIN3_LO
#define DT_N_S_fake_io_S_digital_in_3_low_P_label_STRING_UPPER_TOKEN DIN3_LO
#define DT_N_S_fake_io_S_digital_in_3_low_P_label_IDX_0 "DIN3 LO"
#define DT_N_S_fake_io_S_digital_in_3_low_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_3_low_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_digital_in_3_low, label, 0)
#define DT_N_S_fake_io_S_digital_in_3_low_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_digital_in_3_low, label, 0)
#define DT_N_S_fake_io_S_digital_in_3_low_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_digital_in_3_low, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_3_low_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_digital_in_3_low, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_3_low_P_label_LEN 1
#define DT_N_S_fake_io_S_digital_in_3_low_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/digital_in_4_hi
 *
 * Node identifier: DT_N_S_fake_io_S_digital_in_4_hi
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_digital_in_4_hi_PATH "/fake_io/digital_in_4_hi"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_digital_in_4_hi_FULL_NAME "digital_in_4_hi"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_digital_in_4_hi_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_digital_in_4_hi_CHILD_IDX 23

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_digital_in_4_hi_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_digital_in_4_hi_FOREACH_NODELABEL(fn) fn(digital_in_4_hi)
#define DT_N_S_fake_io_S_digital_in_4_hi_FOREACH_NODELABEL_VARGS(fn, ...) fn(digital_in_4_hi, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_digital_in_4_hi_CHILD_NUM 0
#define DT_N_S_fake_io_S_digital_in_4_hi_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_digital_in_4_hi_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_digital_in_4_hi_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_digital_in_4_hi_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_digital_in_4_hi_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_digital_in_4_hi_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_digital_in_4_hi_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_digital_in_4_hi_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_digital_in_4_hi_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_digital_in_4_hi_ORD 48
#define DT_N_S_fake_io_S_digital_in_4_hi_ORD_STR_SORTABLE 00048

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_digital_in_4_hi_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_digital_in_4_hi_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_digital_in_4_hi_EXISTS 1
#define DT_N_ALIAS_digital_in_4_hi     DT_N_S_fake_io_S_digital_in_4_hi
#define DT_N_NODELABEL_digital_in_4_hi DT_N_S_fake_io_S_digital_in_4_hi

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_digital_in_4_hi_REG_NUM 0
#define DT_N_S_fake_io_S_digital_in_4_hi_RANGES_NUM 0
#define DT_N_S_fake_io_S_digital_in_4_hi_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_digital_in_4_hi_IRQ_NUM 0
#define DT_N_S_fake_io_S_digital_in_4_hi_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_digital_in_4_hi_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_digital_in_4_hi_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_digital_in_4_hi_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_4_hi_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_digital_in_4_hi_P_gpios_IDX_0_VAL_pin 22
#define DT_N_S_fake_io_S_digital_in_4_hi_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_4_hi_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_fake_io_S_digital_in_4_hi_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_4_hi_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_digital_in_4_hi, gpios, 0)
#define DT_N_S_fake_io_S_digital_in_4_hi_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_digital_in_4_hi, gpios, 0)
#define DT_N_S_fake_io_S_digital_in_4_hi_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_digital_in_4_hi, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_4_hi_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_digital_in_4_hi, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_4_hi_P_gpios_LEN 1
#define DT_N_S_fake_io_S_digital_in_4_hi_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_4_hi_P_label "DIN4 HI"
#define DT_N_S_fake_io_S_digital_in_4_hi_P_label_STRING_UNQUOTED DIN4 HI
#define DT_N_S_fake_io_S_digital_in_4_hi_P_label_STRING_TOKEN DIN4_HI
#define DT_N_S_fake_io_S_digital_in_4_hi_P_label_STRING_UPPER_TOKEN DIN4_HI
#define DT_N_S_fake_io_S_digital_in_4_hi_P_label_IDX_0 "DIN4 HI"
#define DT_N_S_fake_io_S_digital_in_4_hi_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_4_hi_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_digital_in_4_hi, label, 0)
#define DT_N_S_fake_io_S_digital_in_4_hi_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_digital_in_4_hi, label, 0)
#define DT_N_S_fake_io_S_digital_in_4_hi_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_digital_in_4_hi, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_4_hi_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_digital_in_4_hi, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_4_hi_P_label_LEN 1
#define DT_N_S_fake_io_S_digital_in_4_hi_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/digital_in_4_low
 *
 * Node identifier: DT_N_S_fake_io_S_digital_in_4_low
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_digital_in_4_low_PATH "/fake_io/digital_in_4_low"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_digital_in_4_low_FULL_NAME "digital_in_4_low"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_digital_in_4_low_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_digital_in_4_low_CHILD_IDX 24

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_digital_in_4_low_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_digital_in_4_low_FOREACH_NODELABEL(fn) fn(digital_in_4_low)
#define DT_N_S_fake_io_S_digital_in_4_low_FOREACH_NODELABEL_VARGS(fn, ...) fn(digital_in_4_low, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_digital_in_4_low_CHILD_NUM 0
#define DT_N_S_fake_io_S_digital_in_4_low_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_digital_in_4_low_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_digital_in_4_low_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_digital_in_4_low_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_digital_in_4_low_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_digital_in_4_low_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_digital_in_4_low_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_digital_in_4_low_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_digital_in_4_low_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_digital_in_4_low_ORD 49
#define DT_N_S_fake_io_S_digital_in_4_low_ORD_STR_SORTABLE 00049

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_digital_in_4_low_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_digital_in_4_low_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_digital_in_4_low_EXISTS 1
#define DT_N_ALIAS_digital_in_4_low     DT_N_S_fake_io_S_digital_in_4_low
#define DT_N_NODELABEL_digital_in_4_low DT_N_S_fake_io_S_digital_in_4_low

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_digital_in_4_low_REG_NUM 0
#define DT_N_S_fake_io_S_digital_in_4_low_RANGES_NUM 0
#define DT_N_S_fake_io_S_digital_in_4_low_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_digital_in_4_low_IRQ_NUM 0
#define DT_N_S_fake_io_S_digital_in_4_low_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_digital_in_4_low_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_digital_in_4_low_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_digital_in_4_low_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_4_low_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_digital_in_4_low_P_gpios_IDX_0_VAL_pin 23
#define DT_N_S_fake_io_S_digital_in_4_low_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_4_low_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_fake_io_S_digital_in_4_low_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_4_low_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_digital_in_4_low, gpios, 0)
#define DT_N_S_fake_io_S_digital_in_4_low_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_digital_in_4_low, gpios, 0)
#define DT_N_S_fake_io_S_digital_in_4_low_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_digital_in_4_low, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_4_low_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_digital_in_4_low, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_4_low_P_gpios_LEN 1
#define DT_N_S_fake_io_S_digital_in_4_low_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_4_low_P_label "DIN4 LO"
#define DT_N_S_fake_io_S_digital_in_4_low_P_label_STRING_UNQUOTED DIN4 LO
#define DT_N_S_fake_io_S_digital_in_4_low_P_label_STRING_TOKEN DIN4_LO
#define DT_N_S_fake_io_S_digital_in_4_low_P_label_STRING_UPPER_TOKEN DIN4_LO
#define DT_N_S_fake_io_S_digital_in_4_low_P_label_IDX_0 "DIN4 LO"
#define DT_N_S_fake_io_S_digital_in_4_low_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_digital_in_4_low_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_digital_in_4_low, label, 0)
#define DT_N_S_fake_io_S_digital_in_4_low_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_digital_in_4_low, label, 0)
#define DT_N_S_fake_io_S_digital_in_4_low_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_digital_in_4_low, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_4_low_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_digital_in_4_low, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_digital_in_4_low_P_label_LEN 1
#define DT_N_S_fake_io_S_digital_in_4_low_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/display_power
 *
 * Node identifier: DT_N_S_fake_io_S_display_power
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_display_power_PATH "/fake_io/display_power"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_display_power_FULL_NAME "display_power"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_display_power_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_display_power_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_display_power_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_display_power_FOREACH_NODELABEL(fn) fn(display_power)
#define DT_N_S_fake_io_S_display_power_FOREACH_NODELABEL_VARGS(fn, ...) fn(display_power, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_display_power_CHILD_NUM 0
#define DT_N_S_fake_io_S_display_power_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_display_power_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_display_power_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_display_power_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_display_power_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_display_power_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_display_power_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_display_power_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_display_power_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_display_power_ORD 50
#define DT_N_S_fake_io_S_display_power_ORD_STR_SORTABLE 00050

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_display_power_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_display_power_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_display_power_EXISTS 1
#define DT_N_ALIAS_power_tft_en      DT_N_S_fake_io_S_display_power
#define DT_N_NODELABEL_display_power DT_N_S_fake_io_S_display_power

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_display_power_REG_NUM 0
#define DT_N_S_fake_io_S_display_power_RANGES_NUM 0
#define DT_N_S_fake_io_S_display_power_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_display_power_IRQ_NUM 0
#define DT_N_S_fake_io_S_display_power_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_display_power_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_display_power_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_display_power_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_display_power_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_display_power_P_gpios_IDX_0_VAL_pin 25
#define DT_N_S_fake_io_S_display_power_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_display_power_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_fake_io_S_display_power_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_display_power_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_display_power, gpios, 0)
#define DT_N_S_fake_io_S_display_power_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_display_power, gpios, 0)
#define DT_N_S_fake_io_S_display_power_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_display_power, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_display_power_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_display_power, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_display_power_P_gpios_LEN 1
#define DT_N_S_fake_io_S_display_power_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_display_power_P_label "Display Power"
#define DT_N_S_fake_io_S_display_power_P_label_STRING_UNQUOTED Display Power
#define DT_N_S_fake_io_S_display_power_P_label_STRING_TOKEN Display_Power
#define DT_N_S_fake_io_S_display_power_P_label_STRING_UPPER_TOKEN DISPLAY_POWER
#define DT_N_S_fake_io_S_display_power_P_label_IDX_0 "Display Power"
#define DT_N_S_fake_io_S_display_power_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_display_power_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_display_power, label, 0)
#define DT_N_S_fake_io_S_display_power_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_display_power, label, 0)
#define DT_N_S_fake_io_S_display_power_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_display_power, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_display_power_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_display_power, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_display_power_P_label_LEN 1
#define DT_N_S_fake_io_S_display_power_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/display_reset
 *
 * Node identifier: DT_N_S_fake_io_S_display_reset
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_display_reset_PATH "/fake_io/display_reset"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_display_reset_FULL_NAME "display_reset"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_display_reset_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_display_reset_CHILD_IDX 2

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_display_reset_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_display_reset_FOREACH_NODELABEL(fn) fn(display_reset)
#define DT_N_S_fake_io_S_display_reset_FOREACH_NODELABEL_VARGS(fn, ...) fn(display_reset, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_display_reset_CHILD_NUM 0
#define DT_N_S_fake_io_S_display_reset_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_display_reset_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_display_reset_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_display_reset_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_display_reset_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_display_reset_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_display_reset_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_display_reset_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_display_reset_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_display_reset_ORD 51
#define DT_N_S_fake_io_S_display_reset_ORD_STR_SORTABLE 00051

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_display_reset_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_display_reset_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_display_reset_EXISTS 1
#define DT_N_ALIAS_display_reset     DT_N_S_fake_io_S_display_reset
#define DT_N_NODELABEL_display_reset DT_N_S_fake_io_S_display_reset

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_display_reset_REG_NUM 0
#define DT_N_S_fake_io_S_display_reset_RANGES_NUM 0
#define DT_N_S_fake_io_S_display_reset_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_display_reset_IRQ_NUM 0
#define DT_N_S_fake_io_S_display_reset_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_display_reset_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_display_reset_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_display_reset_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_display_reset_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_display_reset_P_gpios_IDX_0_VAL_pin 2
#define DT_N_S_fake_io_S_display_reset_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_display_reset_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_fake_io_S_display_reset_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_display_reset_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_display_reset, gpios, 0)
#define DT_N_S_fake_io_S_display_reset_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_display_reset, gpios, 0)
#define DT_N_S_fake_io_S_display_reset_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_display_reset, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_display_reset_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_display_reset, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_display_reset_P_gpios_LEN 1
#define DT_N_S_fake_io_S_display_reset_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_display_reset_P_label "Display Reset"
#define DT_N_S_fake_io_S_display_reset_P_label_STRING_UNQUOTED Display Reset
#define DT_N_S_fake_io_S_display_reset_P_label_STRING_TOKEN Display_Reset
#define DT_N_S_fake_io_S_display_reset_P_label_STRING_UPPER_TOKEN DISPLAY_RESET
#define DT_N_S_fake_io_S_display_reset_P_label_IDX_0 "Display Reset"
#define DT_N_S_fake_io_S_display_reset_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_display_reset_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_display_reset, label, 0)
#define DT_N_S_fake_io_S_display_reset_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_display_reset, label, 0)
#define DT_N_S_fake_io_S_display_reset_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_display_reset, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_display_reset_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_display_reset, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_display_reset_P_label_LEN 1
#define DT_N_S_fake_io_S_display_reset_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/ignition_input
 *
 * Node identifier: DT_N_S_fake_io_S_ignition_input
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_ignition_input_PATH "/fake_io/ignition_input"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_ignition_input_FULL_NAME "ignition_input"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_ignition_input_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_ignition_input_CHILD_IDX 16

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_ignition_input_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_ignition_input_FOREACH_NODELABEL(fn) fn(ignition_input)
#define DT_N_S_fake_io_S_ignition_input_FOREACH_NODELABEL_VARGS(fn, ...) fn(ignition_input, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_ignition_input_CHILD_NUM 0
#define DT_N_S_fake_io_S_ignition_input_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_ignition_input_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_ignition_input_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_ignition_input_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_ignition_input_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_ignition_input_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_ignition_input_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_ignition_input_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_ignition_input_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_ignition_input_ORD 52
#define DT_N_S_fake_io_S_ignition_input_ORD_STR_SORTABLE 00052

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_ignition_input_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_ignition_input_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_ignition_input_EXISTS 1
#define DT_N_ALIAS_ignition_input     DT_N_S_fake_io_S_ignition_input
#define DT_N_NODELABEL_ignition_input DT_N_S_fake_io_S_ignition_input

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_ignition_input_REG_NUM 0
#define DT_N_S_fake_io_S_ignition_input_RANGES_NUM 0
#define DT_N_S_fake_io_S_ignition_input_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_ignition_input_IRQ_NUM 0
#define DT_N_S_fake_io_S_ignition_input_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_ignition_input_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_ignition_input_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_ignition_input_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_ignition_input_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_ignition_input_P_gpios_IDX_0_VAL_pin 15
#define DT_N_S_fake_io_S_ignition_input_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_ignition_input_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_fake_io_S_ignition_input_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_ignition_input_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_ignition_input, gpios, 0)
#define DT_N_S_fake_io_S_ignition_input_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_ignition_input, gpios, 0)
#define DT_N_S_fake_io_S_ignition_input_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_ignition_input, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_ignition_input_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_ignition_input, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_ignition_input_P_gpios_LEN 1
#define DT_N_S_fake_io_S_ignition_input_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_ignition_input_P_label "Ignition Input"
#define DT_N_S_fake_io_S_ignition_input_P_label_STRING_UNQUOTED Ignition Input
#define DT_N_S_fake_io_S_ignition_input_P_label_STRING_TOKEN Ignition_Input
#define DT_N_S_fake_io_S_ignition_input_P_label_STRING_UPPER_TOKEN IGNITION_INPUT
#define DT_N_S_fake_io_S_ignition_input_P_label_IDX_0 "Ignition Input"
#define DT_N_S_fake_io_S_ignition_input_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_ignition_input_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_ignition_input, label, 0)
#define DT_N_S_fake_io_S_ignition_input_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_ignition_input, label, 0)
#define DT_N_S_fake_io_S_ignition_input_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_ignition_input, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_ignition_input_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_ignition_input, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_ignition_input_P_label_LEN 1
#define DT_N_S_fake_io_S_ignition_input_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/nafe_pwr_en
 *
 * Node identifier: DT_N_S_fake_io_S_nafe_pwr_en
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_nafe_pwr_en_PATH "/fake_io/nafe_pwr_en"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_nafe_pwr_en_FULL_NAME "nafe_pwr_en"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_nafe_pwr_en_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_nafe_pwr_en_CHILD_IDX 4

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_nafe_pwr_en_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_nafe_pwr_en_FOREACH_NODELABEL(fn) fn(nafe_pwr_en)
#define DT_N_S_fake_io_S_nafe_pwr_en_FOREACH_NODELABEL_VARGS(fn, ...) fn(nafe_pwr_en, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_nafe_pwr_en_CHILD_NUM 0
#define DT_N_S_fake_io_S_nafe_pwr_en_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_nafe_pwr_en_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_nafe_pwr_en_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_nafe_pwr_en_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_nafe_pwr_en_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_nafe_pwr_en_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_nafe_pwr_en_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_nafe_pwr_en_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_nafe_pwr_en_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_nafe_pwr_en_ORD 53
#define DT_N_S_fake_io_S_nafe_pwr_en_ORD_STR_SORTABLE 00053

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_nafe_pwr_en_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_nafe_pwr_en_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_nafe_pwr_en_EXISTS 1
#define DT_N_ALIAS_nafe_pwr_en     DT_N_S_fake_io_S_nafe_pwr_en
#define DT_N_NODELABEL_nafe_pwr_en DT_N_S_fake_io_S_nafe_pwr_en

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_nafe_pwr_en_REG_NUM 0
#define DT_N_S_fake_io_S_nafe_pwr_en_RANGES_NUM 0
#define DT_N_S_fake_io_S_nafe_pwr_en_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_nafe_pwr_en_IRQ_NUM 0
#define DT_N_S_fake_io_S_nafe_pwr_en_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_nafe_pwr_en_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_nafe_pwr_en_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_nafe_pwr_en_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_nafe_pwr_en_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_nafe_pwr_en_P_gpios_IDX_0_VAL_pin 4
#define DT_N_S_fake_io_S_nafe_pwr_en_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_nafe_pwr_en_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_fake_io_S_nafe_pwr_en_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_nafe_pwr_en_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_nafe_pwr_en, gpios, 0)
#define DT_N_S_fake_io_S_nafe_pwr_en_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_nafe_pwr_en, gpios, 0)
#define DT_N_S_fake_io_S_nafe_pwr_en_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_nafe_pwr_en, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_nafe_pwr_en_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_nafe_pwr_en, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_nafe_pwr_en_P_gpios_LEN 1
#define DT_N_S_fake_io_S_nafe_pwr_en_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_nafe_pwr_en_P_label "NAFE Power Enable"
#define DT_N_S_fake_io_S_nafe_pwr_en_P_label_STRING_UNQUOTED NAFE Power Enable
#define DT_N_S_fake_io_S_nafe_pwr_en_P_label_STRING_TOKEN NAFE_Power_Enable
#define DT_N_S_fake_io_S_nafe_pwr_en_P_label_STRING_UPPER_TOKEN NAFE_POWER_ENABLE
#define DT_N_S_fake_io_S_nafe_pwr_en_P_label_IDX_0 "NAFE Power Enable"
#define DT_N_S_fake_io_S_nafe_pwr_en_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_nafe_pwr_en_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_nafe_pwr_en, label, 0)
#define DT_N_S_fake_io_S_nafe_pwr_en_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_nafe_pwr_en, label, 0)
#define DT_N_S_fake_io_S_nafe_pwr_en_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_nafe_pwr_en, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_nafe_pwr_en_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_nafe_pwr_en, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_nafe_pwr_en_P_label_LEN 1
#define DT_N_S_fake_io_S_nafe_pwr_en_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/power_5v_enable
 *
 * Node identifier: DT_N_S_fake_io_S_power_5v_enable
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_power_5v_enable_PATH "/fake_io/power_5v_enable"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_power_5v_enable_FULL_NAME "power_5v_enable"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_power_5v_enable_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_power_5v_enable_CHILD_IDX 3

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_power_5v_enable_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_power_5v_enable_FOREACH_NODELABEL(fn) fn(power_5v_enable)
#define DT_N_S_fake_io_S_power_5v_enable_FOREACH_NODELABEL_VARGS(fn, ...) fn(power_5v_enable, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_power_5v_enable_CHILD_NUM 0
#define DT_N_S_fake_io_S_power_5v_enable_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_power_5v_enable_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_power_5v_enable_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_power_5v_enable_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_power_5v_enable_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_power_5v_enable_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_power_5v_enable_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_power_5v_enable_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_power_5v_enable_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_power_5v_enable_ORD 54
#define DT_N_S_fake_io_S_power_5v_enable_ORD_STR_SORTABLE 00054

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_power_5v_enable_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_power_5v_enable_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_power_5v_enable_EXISTS 1
#define DT_N_ALIAS_power_5v_en         DT_N_S_fake_io_S_power_5v_enable
#define DT_N_NODELABEL_power_5v_enable DT_N_S_fake_io_S_power_5v_enable

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_power_5v_enable_REG_NUM 0
#define DT_N_S_fake_io_S_power_5v_enable_RANGES_NUM 0
#define DT_N_S_fake_io_S_power_5v_enable_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_power_5v_enable_IRQ_NUM 0
#define DT_N_S_fake_io_S_power_5v_enable_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_power_5v_enable_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_power_5v_enable_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_power_5v_enable_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_power_5v_enable_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_power_5v_enable_P_gpios_IDX_0_VAL_pin 3
#define DT_N_S_fake_io_S_power_5v_enable_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_power_5v_enable_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_fake_io_S_power_5v_enable_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_power_5v_enable_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_power_5v_enable, gpios, 0)
#define DT_N_S_fake_io_S_power_5v_enable_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_power_5v_enable, gpios, 0)
#define DT_N_S_fake_io_S_power_5v_enable_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_power_5v_enable, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_power_5v_enable_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_power_5v_enable, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_power_5v_enable_P_gpios_LEN 1
#define DT_N_S_fake_io_S_power_5v_enable_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_power_5v_enable_P_label "5V Power Enable"
#define DT_N_S_fake_io_S_power_5v_enable_P_label_STRING_UNQUOTED 5V Power Enable
#define DT_N_S_fake_io_S_power_5v_enable_P_label_STRING_TOKEN 5V_Power_Enable
#define DT_N_S_fake_io_S_power_5v_enable_P_label_STRING_UPPER_TOKEN 5V_POWER_ENABLE
#define DT_N_S_fake_io_S_power_5v_enable_P_label_IDX_0 "5V Power Enable"
#define DT_N_S_fake_io_S_power_5v_enable_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_power_5v_enable_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_power_5v_enable, label, 0)
#define DT_N_S_fake_io_S_power_5v_enable_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_power_5v_enable, label, 0)
#define DT_N_S_fake_io_S_power_5v_enable_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_power_5v_enable, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_power_5v_enable_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_power_5v_enable, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_power_5v_enable_P_label_LEN 1
#define DT_N_S_fake_io_S_power_5v_enable_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/usb_id_input
 *
 * Node identifier: DT_N_S_fake_io_S_usb_id_input
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_usb_id_input_PATH "/fake_io/usb_id_input"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_usb_id_input_FULL_NAME "usb_id_input"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_usb_id_input_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_usb_id_input_CHILD_IDX 15

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_usb_id_input_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_usb_id_input_FOREACH_NODELABEL(fn) fn(usb_id_input)
#define DT_N_S_fake_io_S_usb_id_input_FOREACH_NODELABEL_VARGS(fn, ...) fn(usb_id_input, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_usb_id_input_CHILD_NUM 0
#define DT_N_S_fake_io_S_usb_id_input_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_usb_id_input_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_usb_id_input_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_usb_id_input_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_usb_id_input_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_usb_id_input_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_usb_id_input_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_usb_id_input_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_usb_id_input_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_usb_id_input_ORD 55
#define DT_N_S_fake_io_S_usb_id_input_ORD_STR_SORTABLE 00055

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_usb_id_input_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_usb_id_input_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_usb_id_input_EXISTS 1
#define DT_N_ALIAS_usb_id_input     DT_N_S_fake_io_S_usb_id_input
#define DT_N_NODELABEL_usb_id_input DT_N_S_fake_io_S_usb_id_input

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_usb_id_input_REG_NUM 0
#define DT_N_S_fake_io_S_usb_id_input_RANGES_NUM 0
#define DT_N_S_fake_io_S_usb_id_input_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_usb_id_input_IRQ_NUM 0
#define DT_N_S_fake_io_S_usb_id_input_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_usb_id_input_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_usb_id_input_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_usb_id_input_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_usb_id_input_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_usb_id_input_P_gpios_IDX_0_VAL_pin 14
#define DT_N_S_fake_io_S_usb_id_input_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_usb_id_input_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_fake_io_S_usb_id_input_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_usb_id_input_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_usb_id_input, gpios, 0)
#define DT_N_S_fake_io_S_usb_id_input_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_usb_id_input, gpios, 0)
#define DT_N_S_fake_io_S_usb_id_input_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_usb_id_input, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_usb_id_input_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_usb_id_input, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_usb_id_input_P_gpios_LEN 1
#define DT_N_S_fake_io_S_usb_id_input_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_usb_id_input_P_label "USB ID Input"
#define DT_N_S_fake_io_S_usb_id_input_P_label_STRING_UNQUOTED USB ID Input
#define DT_N_S_fake_io_S_usb_id_input_P_label_STRING_TOKEN USB_ID_Input
#define DT_N_S_fake_io_S_usb_id_input_P_label_STRING_UPPER_TOKEN USB_ID_INPUT
#define DT_N_S_fake_io_S_usb_id_input_P_label_IDX_0 "USB ID Input"
#define DT_N_S_fake_io_S_usb_id_input_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_usb_id_input_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_usb_id_input, label, 0)
#define DT_N_S_fake_io_S_usb_id_input_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_usb_id_input, label, 0)
#define DT_N_S_fake_io_S_usb_id_input_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_usb_id_input, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_usb_id_input_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_usb_id_input, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_usb_id_input_P_label_LEN 1
#define DT_N_S_fake_io_S_usb_id_input_P_label_EXISTS 1

/*
 * Devicetree node: /fake_io/vref_ctrl
 *
 * Node identifier: DT_N_S_fake_io_S_vref_ctrl
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_fake_io_S_vref_ctrl_PATH "/fake_io/vref_ctrl"

/* Node's name with unit-address: */
#define DT_N_S_fake_io_S_vref_ctrl_FULL_NAME "vref_ctrl"

/* Node parent (/fake_io) identifier: */
#define DT_N_S_fake_io_S_vref_ctrl_PARENT DT_N_S_fake_io

/* Node's index in its parent's list of children: */
#define DT_N_S_fake_io_S_vref_ctrl_CHILD_IDX 6

/* Helpers for dealing with node labels: */
#define DT_N_S_fake_io_S_vref_ctrl_NODELABEL_NUM 1
#define DT_N_S_fake_io_S_vref_ctrl_FOREACH_NODELABEL(fn) fn(vref_ctrl)
#define DT_N_S_fake_io_S_vref_ctrl_FOREACH_NODELABEL_VARGS(fn, ...) fn(vref_ctrl, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_fake_io_S_vref_ctrl_CHILD_NUM 0
#define DT_N_S_fake_io_S_vref_ctrl_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_fake_io_S_vref_ctrl_FOREACH_CHILD(fn) 
#define DT_N_S_fake_io_S_vref_ctrl_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_fake_io_S_vref_ctrl_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_vref_ctrl_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_fake_io_S_vref_ctrl_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_fake_io_S_vref_ctrl_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_fake_io_S_vref_ctrl_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_fake_io_S_vref_ctrl_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_fake_io_S_vref_ctrl_ORD 56
#define DT_N_S_fake_io_S_vref_ctrl_ORD_STR_SORTABLE 00056

/* Ordinals for what this node depends on directly: */
#define DT_N_S_fake_io_S_vref_ctrl_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	31, /* /fake_io */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_fake_io_S_vref_ctrl_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_fake_io_S_vref_ctrl_EXISTS 1
#define DT_N_ALIAS_vref_ctrl     DT_N_S_fake_io_S_vref_ctrl
#define DT_N_NODELABEL_vref_ctrl DT_N_S_fake_io_S_vref_ctrl

/* Macros for properties that are special in the specification: */
#define DT_N_S_fake_io_S_vref_ctrl_REG_NUM 0
#define DT_N_S_fake_io_S_vref_ctrl_RANGES_NUM 0
#define DT_N_S_fake_io_S_vref_ctrl_FOREACH_RANGE(fn) 
#define DT_N_S_fake_io_S_vref_ctrl_IRQ_NUM 0
#define DT_N_S_fake_io_S_vref_ctrl_IRQ_LEVEL 0
#define DT_N_S_fake_io_S_vref_ctrl_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_fake_io_S_vref_ctrl_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_fake_io_S_vref_ctrl_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_vref_ctrl_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_fake_io_S_vref_ctrl_P_gpios_IDX_0_VAL_pin 6
#define DT_N_S_fake_io_S_vref_ctrl_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_fake_io_S_vref_ctrl_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_fake_io_S_vref_ctrl_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_fake_io_S_vref_ctrl_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_vref_ctrl, gpios, 0)
#define DT_N_S_fake_io_S_vref_ctrl_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_vref_ctrl, gpios, 0)
#define DT_N_S_fake_io_S_vref_ctrl_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_vref_ctrl, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_vref_ctrl_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_vref_ctrl, gpios, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_vref_ctrl_P_gpios_LEN 1
#define DT_N_S_fake_io_S_vref_ctrl_P_gpios_EXISTS 1
#define DT_N_S_fake_io_S_vref_ctrl_P_label "VREF Control"
#define DT_N_S_fake_io_S_vref_ctrl_P_label_STRING_UNQUOTED VREF Control
#define DT_N_S_fake_io_S_vref_ctrl_P_label_STRING_TOKEN VREF_Control
#define DT_N_S_fake_io_S_vref_ctrl_P_label_STRING_UPPER_TOKEN VREF_CONTROL
#define DT_N_S_fake_io_S_vref_ctrl_P_label_IDX_0 "VREF Control"
#define DT_N_S_fake_io_S_vref_ctrl_P_label_IDX_0_EXISTS 1
#define DT_N_S_fake_io_S_vref_ctrl_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_fake_io_S_vref_ctrl, label, 0)
#define DT_N_S_fake_io_S_vref_ctrl_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_fake_io_S_vref_ctrl, label, 0)
#define DT_N_S_fake_io_S_vref_ctrl_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_fake_io_S_vref_ctrl, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_vref_ctrl_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_fake_io_S_vref_ctrl, label, 0, __VA_ARGS__)
#define DT_N_S_fake_io_S_vref_ctrl_P_label_LEN 1
#define DT_N_S_fake_io_S_vref_ctrl_P_label_EXISTS 1

/*
 * Devicetree node: /flash-controller@0
 *
 * Node identifier: DT_N_S_flash_controller_0
 *
 * Binding (compatible = zephyr,sim-flash):
 *   $ZEPHYR_BASE/dts/bindings/flash_controller/zephyr,sim-flash.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_flash_controller_0_PATH "/flash-controller@0"

/* Node's name with unit-address: */
#define DT_N_S_flash_controller_0_FULL_NAME "flash-controller@0"

/* Node parent (/) identifier: */
#define DT_N_S_flash_controller_0_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_flash_controller_0_CHILD_IDX 5

/* Helpers for dealing with node labels: */
#define DT_N_S_flash_controller_0_NODELABEL_NUM 1
#define DT_N_S_flash_controller_0_FOREACH_NODELABEL(fn) fn(flashcontroller0)
#define DT_N_S_flash_controller_0_FOREACH_NODELABEL_VARGS(fn, ...) fn(flashcontroller0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_flash_controller_0_CHILD_NUM 1
#define DT_N_S_flash_controller_0_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_flash_controller_0_FOREACH_CHILD(fn) fn(DT_N_S_flash_controller_0_S_flash_0)
#define DT_N_S_flash_controller_0_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0)
#define DT_N_S_flash_controller_0_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_flash_controller_0_S_flash_0)
#define DT_N_S_flash_controller_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0)
#define DT_N_S_flash_controller_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_flash_controller_0_ORD 57
#define DT_N_S_flash_controller_0_ORD_STR_SORTABLE 00057

/* Ordinals for what this node depends on directly: */
#define DT_N_S_flash_controller_0_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_flash_controller_0_SUPPORTS_ORDS \
	58, /* /flash-controller@0/flash@0 */

/* Existence and alternate IDs: */
#define DT_N_S_flash_controller_0_EXISTS 1
#define DT_N_INST_0_zephyr_sim_flash    DT_N_S_flash_controller_0
#define DT_N_NODELABEL_flashcontroller0 DT_N_S_flash_controller_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_flash_controller_0_REG_NUM 1
#define DT_N_S_flash_controller_0_REG_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_flash_controller_0_REG_IDX_0_VAL_SIZE 2097152 /* 0x200000 */
#define DT_N_S_flash_controller_0_RANGES_NUM 0
#define DT_N_S_flash_controller_0_FOREACH_RANGE(fn) 
#define DT_N_S_flash_controller_0_IRQ_NUM 0
#define DT_N_S_flash_controller_0_IRQ_LEVEL 0
#define DT_N_S_flash_controller_0_COMPAT_MATCHES_zephyr_sim_flash 1
#define DT_N_S_flash_controller_0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_flash_controller_0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_COMPAT_MODEL_IDX_0 "sim-flash"
#define DT_N_S_flash_controller_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_flash_controller_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_flash_controller_0_P_wakeup_source 0
#define DT_N_S_flash_controller_0_P_wakeup_source_EXISTS 1
#define DT_N_S_flash_controller_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_flash_controller_0_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_flash_controller_0_P_compatible {"zephyr,sim-flash"}
#define DT_N_S_flash_controller_0_P_compatible_IDX_0 "zephyr,sim-flash"
#define DT_N_S_flash_controller_0_P_compatible_IDX_0_STRING_UNQUOTED zephyr,sim-flash
#define DT_N_S_flash_controller_0_P_compatible_IDX_0_STRING_TOKEN zephyr_sim_flash
#define DT_N_S_flash_controller_0_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_SIM_FLASH
#define DT_N_S_flash_controller_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_flash_controller_0, compatible, 0)
#define DT_N_S_flash_controller_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_flash_controller_0, compatible, 0)
#define DT_N_S_flash_controller_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_flash_controller_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_P_compatible_LEN 1
#define DT_N_S_flash_controller_0_P_compatible_EXISTS 1
#define DT_N_S_flash_controller_0_P_reg {0 /* 0x0 */, 2097152 /* 0x200000 */}
#define DT_N_S_flash_controller_0_P_reg_IDX_0 0
#define DT_N_S_flash_controller_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_P_reg_IDX_1 2097152
#define DT_N_S_flash_controller_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_flash_controller_0_P_reg_EXISTS 1
#define DT_N_S_flash_controller_0_P_zephyr_deferred_init 0
#define DT_N_S_flash_controller_0_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_flash_controller_0_P_erase_value 255
#define DT_N_S_flash_controller_0_P_erase_value_ENUM_IDX 0
#define DT_N_S_flash_controller_0_P_erase_value_ENUM_VAL_255_EXISTS 1
#define DT_N_S_flash_controller_0_P_erase_value_EXISTS 1

/*
 * Devicetree node: /flash-controller@0/flash@0
 *
 * Node identifier: DT_N_S_flash_controller_0_S_flash_0
 *
 * Binding (compatible = soc-nv-flash):
 *   $ZEPHYR_BASE/dts/bindings/mtd/soc-nv-flash.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_flash_controller_0_S_flash_0_PATH "/flash-controller@0/flash@0"

/* Node's name with unit-address: */
#define DT_N_S_flash_controller_0_S_flash_0_FULL_NAME "flash@0"

/* Node parent (/flash-controller@0) identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_PARENT DT_N_S_flash_controller_0

/* Node's index in its parent's list of children: */
#define DT_N_S_flash_controller_0_S_flash_0_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_flash_controller_0_S_flash_0_NODELABEL_NUM 1
#define DT_N_S_flash_controller_0_S_flash_0_FOREACH_NODELABEL(fn) fn(flash0)
#define DT_N_S_flash_controller_0_S_flash_0_FOREACH_NODELABEL_VARGS(fn, ...) fn(flash0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_flash_controller_0_S_flash_0_CHILD_NUM 1
#define DT_N_S_flash_controller_0_S_flash_0_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_flash_controller_0_S_flash_0_FOREACH_CHILD(fn) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions)
#define DT_N_S_flash_controller_0_S_flash_0_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions)
#define DT_N_S_flash_controller_0_S_flash_0_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions)
#define DT_N_S_flash_controller_0_S_flash_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions)
#define DT_N_S_flash_controller_0_S_flash_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_flash_controller_0_S_flash_0_ORD 58
#define DT_N_S_flash_controller_0_S_flash_0_ORD_STR_SORTABLE 00058

/* Ordinals for what this node depends on directly: */
#define DT_N_S_flash_controller_0_S_flash_0_REQUIRES_ORDS \
	57, /* /flash-controller@0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_flash_controller_0_S_flash_0_SUPPORTS_ORDS \
	59, /* /flash-controller@0/flash@0/partitions */

/* Existence and alternate IDs: */
#define DT_N_S_flash_controller_0_S_flash_0_EXISTS 1
#define DT_N_INST_0_soc_nv_flash DT_N_S_flash_controller_0_S_flash_0
#define DT_N_NODELABEL_flash0    DT_N_S_flash_controller_0_S_flash_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_flash_controller_0_S_flash_0_REG_NUM 1
#define DT_N_S_flash_controller_0_S_flash_0_REG_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_flash_controller_0_S_flash_0_REG_IDX_0_VAL_SIZE 2097152 /* 0x200000 */
#define DT_N_S_flash_controller_0_S_flash_0_RANGES_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_FOREACH_RANGE(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_IRQ_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_IRQ_LEVEL 0
#define DT_N_S_flash_controller_0_S_flash_0_COMPAT_MATCHES_soc_nv_flash 1
#define DT_N_S_flash_controller_0_S_flash_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_flash_controller_0_S_flash_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_flash_controller_0_S_flash_0_P_wakeup_source 0
#define DT_N_S_flash_controller_0_S_flash_0_P_wakeup_source_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_flash_controller_0_S_flash_0_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_status "okay"
#define DT_N_S_flash_controller_0_S_flash_0_P_status_STRING_UNQUOTED okay
#define DT_N_S_flash_controller_0_S_flash_0_P_status_STRING_TOKEN okay
#define DT_N_S_flash_controller_0_S_flash_0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_flash_controller_0_S_flash_0_P_status_IDX_0 "okay"
#define DT_N_S_flash_controller_0_S_flash_0_P_status_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_status_ENUM_IDX 1
#define DT_N_S_flash_controller_0_S_flash_0_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_status_ENUM_TOKEN okay
#define DT_N_S_flash_controller_0_S_flash_0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_flash_controller_0_S_flash_0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_flash_controller_0_S_flash_0, status, 0)
#define DT_N_S_flash_controller_0_S_flash_0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0, status, 0)
#define DT_N_S_flash_controller_0_S_flash_0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0, status, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0, status, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_P_status_LEN 1
#define DT_N_S_flash_controller_0_S_flash_0_P_status_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible {"soc-nv-flash"}
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_IDX_0 "soc-nv-flash"
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_IDX_0_STRING_UNQUOTED soc-nv-flash
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_IDX_0_STRING_TOKEN soc_nv_flash
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_IDX_0_STRING_UPPER_TOKEN SOC_NV_FLASH
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_flash_controller_0_S_flash_0, compatible, 0)
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0, compatible, 0)
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_LEN 1
#define DT_N_S_flash_controller_0_S_flash_0_P_compatible_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_reg {0 /* 0x0 */, 2097152 /* 0x200000 */}
#define DT_N_S_flash_controller_0_S_flash_0_P_reg_IDX_0 0
#define DT_N_S_flash_controller_0_S_flash_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_reg_IDX_1 2097152
#define DT_N_S_flash_controller_0_S_flash_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_reg_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_zephyr_deferred_init 0
#define DT_N_S_flash_controller_0_S_flash_0_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_erase_block_size 4096
#define DT_N_S_flash_controller_0_S_flash_0_P_erase_block_size_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_P_write_block_size 1
#define DT_N_S_flash_controller_0_S_flash_0_P_write_block_size_EXISTS 1

/*
 * Devicetree node: /flash-controller@0/flash@0/partitions
 *
 * Node identifier: DT_N_S_flash_controller_0_S_flash_0_S_partitions
 *
 * Binding (compatible = fixed-partitions):
 *   $ZEPHYR_BASE/dts/bindings/mtd/fixed-partitions.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_PATH "/flash-controller@0/flash@0/partitions"

/* Node's name with unit-address: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FULL_NAME "partitions"

/* Node parent (/flash-controller@0/flash@0) identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_PARENT DT_N_S_flash_controller_0_S_flash_0

/* Node's index in its parent's list of children: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_NODELABEL_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FOREACH_NODELABEL(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_CHILD_NUM 5
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_CHILD_NUM_STATUS_OKAY 5
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FOREACH_CHILD(fn) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_ORD 59
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_ORD_STR_SORTABLE 00059

/* Ordinals for what this node depends on directly: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_REQUIRES_ORDS \
	58, /* /flash-controller@0/flash@0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_SUPPORTS_ORDS \
	60, /* /flash-controller@0/flash@0/partitions/partition@0 */ \
	61, /* /flash-controller@0/flash@0/partitions/partition@c000 */ \
	62, /* /flash-controller@0/flash@0/partitions/partition@75000 */ \
	63, /* /flash-controller@0/flash@0/partitions/partition@de000 */ \
	64, /* /flash-controller@0/flash@0/partitions/partition@fc000 */

/* Existence and alternate IDs: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_EXISTS 1
#define DT_N_INST_0_fixed_partitions DT_N_S_flash_controller_0_S_flash_0_S_partitions

/* Macros for properties that are special in the specification: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_REG_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_RANGES_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_FOREACH_RANGE(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_IRQ_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_IRQ_LEVEL 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_COMPAT_MATCHES_fixed_partitions 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /flash-controller@0/flash@0/partitions/partition@0
 *
 * Node identifier: DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_PATH "/flash-controller@0/flash@0/partitions/partition@0"

/* Node's name with unit-address: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FULL_NAME "partition@0"

/* Node parent (/flash-controller@0/flash@0/partitions) identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_PARENT DT_N_S_flash_controller_0_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_NODELABEL_NUM 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FOREACH_NODELABEL(fn) fn(boot_partition)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FOREACH_NODELABEL_VARGS(fn, ...) fn(boot_partition, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_CHILD_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_ORD 60
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_ORD_STR_SORTABLE 00060

/* Ordinals for what this node depends on directly: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_REQUIRES_ORDS \
	59, /* /flash-controller@0/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_EXISTS 1
#define DT_N_NODELABEL_boot_partition DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_REG_NUM 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_VAL_SIZE 49152 /* 0xc000 */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_RANGES_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_FOREACH_RANGE(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_IRQ_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_IRQ_LEVEL 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_PARTITION_ID 0

/* Generic property macros: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label "mcuboot"
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_STRING_UNQUOTED mcuboot
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_STRING_TOKEN mcuboot
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_STRING_UPPER_TOKEN MCUBOOT
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_IDX_0 "mcuboot"
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0, label, 0)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0, label, 0)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0, label, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0, label, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_LEN 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_label_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_read_only 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_read_only_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_reg {0 /* 0x0 */, 49152 /* 0xc000 */}
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_0 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_1 49152
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0_P_reg_EXISTS 1

/*
 * Devicetree node: /flash-controller@0/flash@0/partitions/partition@c000
 *
 * Node identifier: DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_PATH "/flash-controller@0/flash@0/partitions/partition@c000"

/* Node's name with unit-address: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FULL_NAME "partition@c000"

/* Node parent (/flash-controller@0/flash@0/partitions) identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_PARENT DT_N_S_flash_controller_0_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_NODELABEL_NUM 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FOREACH_NODELABEL(fn) fn(slot0_partition)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FOREACH_NODELABEL_VARGS(fn, ...) fn(slot0_partition, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_CHILD_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_ORD 61
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_ORD_STR_SORTABLE 00061

/* Ordinals for what this node depends on directly: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_REQUIRES_ORDS \
	59, /* /flash-controller@0/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_EXISTS 1
#define DT_N_NODELABEL_slot0_partition DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000

/* Macros for properties that are special in the specification: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_REG_NUM 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_REG_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_REG_IDX_0_VAL_ADDRESS 49152 /* 0xc000 */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_REG_IDX_0_VAL_SIZE 430080 /* 0x69000 */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_RANGES_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_FOREACH_RANGE(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_IRQ_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_IRQ_LEVEL 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_PARTITION_ID 1

/* Generic property macros: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label "image-0"
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_STRING_UNQUOTED image-0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_STRING_TOKEN image_0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_STRING_UPPER_TOKEN IMAGE_0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_IDX_0 "image-0"
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000, label, 0)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000, label, 0)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000, label, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000, label, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_LEN 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_label_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_read_only 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_read_only_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_reg {49152 /* 0xc000 */, 430080 /* 0x69000 */}
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_reg_IDX_0 49152
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_reg_IDX_1 430080
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000_P_reg_EXISTS 1

/*
 * Devicetree node: /flash-controller@0/flash@0/partitions/partition@75000
 *
 * Node identifier: DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_PATH "/flash-controller@0/flash@0/partitions/partition@75000"

/* Node's name with unit-address: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FULL_NAME "partition@75000"

/* Node parent (/flash-controller@0/flash@0/partitions) identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_PARENT DT_N_S_flash_controller_0_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_CHILD_IDX 2

/* Helpers for dealing with node labels: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_NODELABEL_NUM 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FOREACH_NODELABEL(fn) fn(slot1_partition)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FOREACH_NODELABEL_VARGS(fn, ...) fn(slot1_partition, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_CHILD_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FOREACH_CHILD(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_ORD 62
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_ORD_STR_SORTABLE 00062

/* Ordinals for what this node depends on directly: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_REQUIRES_ORDS \
	59, /* /flash-controller@0/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_EXISTS 1
#define DT_N_NODELABEL_slot1_partition DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000

/* Macros for properties that are special in the specification: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_REG_NUM 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_REG_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_REG_IDX_0_VAL_ADDRESS 479232 /* 0x75000 */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_REG_IDX_0_VAL_SIZE 430080 /* 0x69000 */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_RANGES_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_FOREACH_RANGE(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_IRQ_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_IRQ_LEVEL 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_PARTITION_ID 2

/* Generic property macros: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label "image-1"
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_STRING_UNQUOTED image-1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_STRING_TOKEN image_1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_STRING_UPPER_TOKEN IMAGE_1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_IDX_0 "image-1"
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000, label, 0)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000, label, 0)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000, label, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000, label, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_LEN 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_label_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_read_only 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_read_only_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_reg {479232 /* 0x75000 */, 430080 /* 0x69000 */}
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_reg_IDX_0 479232
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_reg_IDX_1 430080
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000_P_reg_EXISTS 1

/*
 * Devicetree node: /flash-controller@0/flash@0/partitions/partition@de000
 *
 * Node identifier: DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_PATH "/flash-controller@0/flash@0/partitions/partition@de000"

/* Node's name with unit-address: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FULL_NAME "partition@de000"

/* Node parent (/flash-controller@0/flash@0/partitions) identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_PARENT DT_N_S_flash_controller_0_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_CHILD_IDX 3

/* Helpers for dealing with node labels: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_NODELABEL_NUM 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FOREACH_NODELABEL(fn) fn(scratch_partition)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FOREACH_NODELABEL_VARGS(fn, ...) fn(scratch_partition, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_CHILD_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FOREACH_CHILD(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_ORD 63
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_ORD_STR_SORTABLE 00063

/* Ordinals for what this node depends on directly: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_REQUIRES_ORDS \
	59, /* /flash-controller@0/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_EXISTS 1
#define DT_N_NODELABEL_scratch_partition DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000

/* Macros for properties that are special in the specification: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_REG_NUM 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_REG_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_REG_IDX_0_VAL_ADDRESS 909312 /* 0xde000 */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_REG_IDX_0_VAL_SIZE 122880 /* 0x1e000 */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_RANGES_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_FOREACH_RANGE(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_IRQ_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_IRQ_LEVEL 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_PARTITION_ID 3

/* Generic property macros: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label "image-scratch"
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_STRING_UNQUOTED image-scratch
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_STRING_TOKEN image_scratch
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_STRING_UPPER_TOKEN IMAGE_SCRATCH
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_IDX_0 "image-scratch"
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000, label, 0)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000, label, 0)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000, label, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000, label, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_LEN 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_label_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_read_only 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_read_only_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_reg {909312 /* 0xde000 */, 122880 /* 0x1e000 */}
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_reg_IDX_0 909312
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_reg_IDX_1 122880
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000_P_reg_EXISTS 1

/*
 * Devicetree node: /flash-controller@0/flash@0/partitions/partition@fc000
 *
 * Node identifier: DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_PATH "/flash-controller@0/flash@0/partitions/partition@fc000"

/* Node's name with unit-address: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FULL_NAME "partition@fc000"

/* Node parent (/flash-controller@0/flash@0/partitions) identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_PARENT DT_N_S_flash_controller_0_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_CHILD_IDX 4

/* Helpers for dealing with node labels: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_NODELABEL_NUM 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FOREACH_NODELABEL(fn) fn(storage_partition)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FOREACH_NODELABEL_VARGS(fn, ...) fn(storage_partition, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_CHILD_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_ORD 64
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_ORD_STR_SORTABLE 00064

/* Ordinals for what this node depends on directly: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_REQUIRES_ORDS \
	59, /* /flash-controller@0/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_EXISTS 1
#define DT_N_NODELABEL_storage_partition DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000

/* Macros for properties that are special in the specification: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_REG_NUM 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_REG_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_REG_IDX_0_VAL_ADDRESS 1032192 /* 0xfc000 */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_RANGES_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_FOREACH_RANGE(fn) 
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_IRQ_NUM 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_IRQ_LEVEL 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_PARTITION_ID 4

/* Generic property macros: */
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label "storage"
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_STRING_UNQUOTED storage
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_STRING_TOKEN storage
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_STRING_UPPER_TOKEN STORAGE
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_IDX_0 "storage"
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000, label, 0)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000, label, 0)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000, label, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000, label, 0, __VA_ARGS__)
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_LEN 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_label_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_read_only 0
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_read_only_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_reg {1032192 /* 0xfc000 */, 16384 /* 0x4000 */}
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_reg_IDX_0 1032192
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_reg_IDX_1 16384
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000_P_reg_EXISTS 1

/*
 * Devicetree node: /gpio@900/sdl_gpio
 *
 * Node identifier: DT_N_S_gpio_900_S_sdl_gpio
 *
 * Binding (compatible = zephyr,gpio-emul-sdl):
 *   $ZEPHYR_BASE/dts/bindings/gpio/zephyr,gpio-emul-sdl.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_gpio_900_S_sdl_gpio_PATH "/gpio@900/sdl_gpio"

/* Node's name with unit-address: */
#define DT_N_S_gpio_900_S_sdl_gpio_FULL_NAME "sdl_gpio"

/* Node parent (/gpio@900) identifier: */
#define DT_N_S_gpio_900_S_sdl_gpio_PARENT DT_N_S_gpio_900

/* Node's index in its parent's list of children: */
#define DT_N_S_gpio_900_S_sdl_gpio_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_gpio_900_S_sdl_gpio_NODELABEL_NUM 0
#define DT_N_S_gpio_900_S_sdl_gpio_FOREACH_NODELABEL(fn) 
#define DT_N_S_gpio_900_S_sdl_gpio_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_gpio_900_S_sdl_gpio_CHILD_NUM 0
#define DT_N_S_gpio_900_S_sdl_gpio_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_gpio_900_S_sdl_gpio_FOREACH_CHILD(fn) 
#define DT_N_S_gpio_900_S_sdl_gpio_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_gpio_900_S_sdl_gpio_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_gpio_900_S_sdl_gpio_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_gpio_900_S_sdl_gpio_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_gpio_900_S_sdl_gpio_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_gpio_900_S_sdl_gpio_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_gpio_900_S_sdl_gpio_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_gpio_900_S_sdl_gpio_ORD 65
#define DT_N_S_gpio_900_S_sdl_gpio_ORD_STR_SORTABLE 00065

/* Ordinals for what this node depends on directly: */
#define DT_N_S_gpio_900_S_sdl_gpio_REQUIRES_ORDS \
	14, /* /gpio@900 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_gpio_900_S_sdl_gpio_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_gpio_900_S_sdl_gpio_EXISTS 1
#define DT_N_INST_0_zephyr_gpio_emul_sdl DT_N_S_gpio_900_S_sdl_gpio

/* Macros for properties that are special in the specification: */
#define DT_N_S_gpio_900_S_sdl_gpio_REG_NUM 0
#define DT_N_S_gpio_900_S_sdl_gpio_RANGES_NUM 0
#define DT_N_S_gpio_900_S_sdl_gpio_FOREACH_RANGE(fn) 
#define DT_N_S_gpio_900_S_sdl_gpio_IRQ_NUM 0
#define DT_N_S_gpio_900_S_sdl_gpio_IRQ_LEVEL 0
#define DT_N_S_gpio_900_S_sdl_gpio_COMPAT_MATCHES_zephyr_gpio_emul_sdl 1
#define DT_N_S_gpio_900_S_sdl_gpio_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_gpio_900_S_sdl_gpio_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_gpio_900_S_sdl_gpio_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_gpio_900_S_sdl_gpio_COMPAT_MODEL_IDX_0 "gpio-emul-sdl"
#define DT_N_S_gpio_900_S_sdl_gpio_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_gpio_900_S_sdl_gpio_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_gpio_900_S_sdl_gpio_P_wakeup_source 0
#define DT_N_S_gpio_900_S_sdl_gpio_P_wakeup_source_EXISTS 1
#define DT_N_S_gpio_900_S_sdl_gpio_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_gpio_900_S_sdl_gpio_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_gpio_900_S_sdl_gpio_P_status "okay"
#define DT_N_S_gpio_900_S_sdl_gpio_P_status_STRING_UNQUOTED okay
#define DT_N_S_gpio_900_S_sdl_gpio_P_status_STRING_TOKEN okay
#define DT_N_S_gpio_900_S_sdl_gpio_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_gpio_900_S_sdl_gpio_P_status_IDX_0 "okay"
#define DT_N_S_gpio_900_S_sdl_gpio_P_status_IDX_0_EXISTS 1
#define DT_N_S_gpio_900_S_sdl_gpio_P_status_ENUM_IDX 1
#define DT_N_S_gpio_900_S_sdl_gpio_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_gpio_900_S_sdl_gpio_P_status_ENUM_TOKEN okay
#define DT_N_S_gpio_900_S_sdl_gpio_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_gpio_900_S_sdl_gpio_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_900_S_sdl_gpio, status, 0)
#define DT_N_S_gpio_900_S_sdl_gpio_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_900_S_sdl_gpio, status, 0)
#define DT_N_S_gpio_900_S_sdl_gpio_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_900_S_sdl_gpio, status, 0, __VA_ARGS__)
#define DT_N_S_gpio_900_S_sdl_gpio_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_900_S_sdl_gpio, status, 0, __VA_ARGS__)
#define DT_N_S_gpio_900_S_sdl_gpio_P_status_LEN 1
#define DT_N_S_gpio_900_S_sdl_gpio_P_status_EXISTS 1
#define DT_N_S_gpio_900_S_sdl_gpio_P_compatible {"zephyr,gpio-emul-sdl"}
#define DT_N_S_gpio_900_S_sdl_gpio_P_compatible_IDX_0 "zephyr,gpio-emul-sdl"
#define DT_N_S_gpio_900_S_sdl_gpio_P_compatible_IDX_0_STRING_UNQUOTED zephyr,gpio-emul-sdl
#define DT_N_S_gpio_900_S_sdl_gpio_P_compatible_IDX_0_STRING_TOKEN zephyr_gpio_emul_sdl
#define DT_N_S_gpio_900_S_sdl_gpio_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_GPIO_EMUL_SDL
#define DT_N_S_gpio_900_S_sdl_gpio_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_gpio_900_S_sdl_gpio_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_900_S_sdl_gpio, compatible, 0)
#define DT_N_S_gpio_900_S_sdl_gpio_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_900_S_sdl_gpio, compatible, 0)
#define DT_N_S_gpio_900_S_sdl_gpio_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_900_S_sdl_gpio, compatible, 0, __VA_ARGS__)
#define DT_N_S_gpio_900_S_sdl_gpio_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_900_S_sdl_gpio, compatible, 0, __VA_ARGS__)
#define DT_N_S_gpio_900_S_sdl_gpio_P_compatible_LEN 1
#define DT_N_S_gpio_900_S_sdl_gpio_P_compatible_EXISTS 1
#define DT_N_S_gpio_900_S_sdl_gpio_P_zephyr_deferred_init 0
#define DT_N_S_gpio_900_S_sdl_gpio_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes {0 /* 0x0 */, 21 /* 0x15 */, 5 /* 0x5 */, 30 /* 0x1e */, 31 /* 0x1f */, 32 /* 0x20 */, 80 /* 0x50 */, 79 /* 0x4f */, 40 /* 0x28 */}
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_IDX_0 0
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_IDX_0_EXISTS 1
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_IDX_1 21
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_IDX_1_EXISTS 1
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_IDX_2 5
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_IDX_2_EXISTS 1
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_IDX_3 30
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_IDX_3_EXISTS 1
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_IDX_4 31
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_IDX_4_EXISTS 1
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_IDX_5 32
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_IDX_5_EXISTS 1
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_IDX_6 80
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_IDX_6_EXISTS 1
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_IDX_7 79
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_IDX_7_EXISTS 1
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_IDX_8 40
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_IDX_8_EXISTS 1
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 0) \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 1) \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 2) \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 3) \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 4) \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 5) \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 6) \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 7) \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 8)
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 7) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 8)
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 0, __VA_ARGS__) \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 1, __VA_ARGS__) \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 2, __VA_ARGS__) \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 3, __VA_ARGS__) \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 4, __VA_ARGS__) \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 5, __VA_ARGS__) \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 6, __VA_ARGS__) \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 7, __VA_ARGS__) \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 8, __VA_ARGS__)
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 7, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_900_S_sdl_gpio, scancodes, 8, __VA_ARGS__)
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_LEN 9
#define DT_N_S_gpio_900_S_sdl_gpio_P_scancodes_EXISTS 1

/*
 * Devicetree node: /keys/button0
 *
 * Node identifier: DT_N_S_keys_S_button0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_keys_S_button0_PATH "/keys/button0"

/* Node's name with unit-address: */
#define DT_N_S_keys_S_button0_FULL_NAME "button0"

/* Node parent (/keys) identifier: */
#define DT_N_S_keys_S_button0_PARENT DT_N_S_keys

/* Node's index in its parent's list of children: */
#define DT_N_S_keys_S_button0_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_keys_S_button0_NODELABEL_NUM 1
#define DT_N_S_keys_S_button0_FOREACH_NODELABEL(fn) fn(button0)
#define DT_N_S_keys_S_button0_FOREACH_NODELABEL_VARGS(fn, ...) fn(button0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_keys_S_button0_CHILD_NUM 0
#define DT_N_S_keys_S_button0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_keys_S_button0_FOREACH_CHILD(fn) 
#define DT_N_S_keys_S_button0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_keys_S_button0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_keys_S_button0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_keys_S_button0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_keys_S_button0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_keys_S_button0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_keys_S_button0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_keys_S_button0_ORD 66
#define DT_N_S_keys_S_button0_ORD_STR_SORTABLE 00066

/* Ordinals for what this node depends on directly: */
#define DT_N_S_keys_S_button0_REQUIRES_ORDS \
	14, /* /gpio@900 */ \
	15, /* /keys */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_keys_S_button0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_keys_S_button0_EXISTS 1
#define DT_N_ALIAS_sw0         DT_N_S_keys_S_button0
#define DT_N_NODELABEL_button0 DT_N_S_keys_S_button0

/* Macros for properties that are special in the specification: */
#define DT_N_S_keys_S_button0_REG_NUM 0
#define DT_N_S_keys_S_button0_RANGES_NUM 0
#define DT_N_S_keys_S_button0_FOREACH_RANGE(fn) 
#define DT_N_S_keys_S_button0_IRQ_NUM 0
#define DT_N_S_keys_S_button0_IRQ_LEVEL 0
#define DT_N_S_keys_S_button0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_keys_S_button0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_keys_S_button0_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_keys_S_button0_P_gpios_IDX_0_PH DT_N_S_gpio_900
#define DT_N_S_keys_S_button0_P_gpios_IDX_0_VAL_pin 1
#define DT_N_S_keys_S_button0_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_keys_S_button0_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_keys_S_button0_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_keys_S_button0_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_keys_S_button0, gpios, 0)
#define DT_N_S_keys_S_button0_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_keys_S_button0, gpios, 0)
#define DT_N_S_keys_S_button0_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_keys_S_button0, gpios, 0, __VA_ARGS__)
#define DT_N_S_keys_S_button0_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_keys_S_button0, gpios, 0, __VA_ARGS__)
#define DT_N_S_keys_S_button0_P_gpios_LEN 1
#define DT_N_S_keys_S_button0_P_gpios_EXISTS 1
#define DT_N_S_keys_S_button0_P_zephyr_code 19
#define DT_N_S_keys_S_button0_P_zephyr_code_EXISTS 1

/*
 * Devicetree node: /keys/button1
 *
 * Node identifier: DT_N_S_keys_S_button1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_keys_S_button1_PATH "/keys/button1"

/* Node's name with unit-address: */
#define DT_N_S_keys_S_button1_FULL_NAME "button1"

/* Node parent (/keys) identifier: */
#define DT_N_S_keys_S_button1_PARENT DT_N_S_keys

/* Node's index in its parent's list of children: */
#define DT_N_S_keys_S_button1_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_keys_S_button1_NODELABEL_NUM 1
#define DT_N_S_keys_S_button1_FOREACH_NODELABEL(fn) fn(button1)
#define DT_N_S_keys_S_button1_FOREACH_NODELABEL_VARGS(fn, ...) fn(button1, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_keys_S_button1_CHILD_NUM 0
#define DT_N_S_keys_S_button1_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_keys_S_button1_FOREACH_CHILD(fn) 
#define DT_N_S_keys_S_button1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_keys_S_button1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_keys_S_button1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_keys_S_button1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_keys_S_button1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_keys_S_button1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_keys_S_button1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_keys_S_button1_ORD 67
#define DT_N_S_keys_S_button1_ORD_STR_SORTABLE 00067

/* Ordinals for what this node depends on directly: */
#define DT_N_S_keys_S_button1_REQUIRES_ORDS \
	14, /* /gpio@900 */ \
	15, /* /keys */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_keys_S_button1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_keys_S_button1_EXISTS 1
#define DT_N_NODELABEL_button1 DT_N_S_keys_S_button1

/* Macros for properties that are special in the specification: */
#define DT_N_S_keys_S_button1_REG_NUM 0
#define DT_N_S_keys_S_button1_RANGES_NUM 0
#define DT_N_S_keys_S_button1_FOREACH_RANGE(fn) 
#define DT_N_S_keys_S_button1_IRQ_NUM 0
#define DT_N_S_keys_S_button1_IRQ_LEVEL 0
#define DT_N_S_keys_S_button1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_keys_S_button1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_keys_S_button1_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_keys_S_button1_P_gpios_IDX_0_PH DT_N_S_gpio_900
#define DT_N_S_keys_S_button1_P_gpios_IDX_0_VAL_pin 2
#define DT_N_S_keys_S_button1_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_keys_S_button1_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_keys_S_button1_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_keys_S_button1_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_keys_S_button1, gpios, 0)
#define DT_N_S_keys_S_button1_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_keys_S_button1, gpios, 0)
#define DT_N_S_keys_S_button1_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_keys_S_button1, gpios, 0, __VA_ARGS__)
#define DT_N_S_keys_S_button1_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_keys_S_button1, gpios, 0, __VA_ARGS__)
#define DT_N_S_keys_S_button1_P_gpios_LEN 1
#define DT_N_S_keys_S_button1_P_gpios_EXISTS 1
#define DT_N_S_keys_S_button1_P_zephyr_code 48
#define DT_N_S_keys_S_button1_P_zephyr_code_EXISTS 1

/*
 * Devicetree node: /keys/button_enter
 *
 * Node identifier: DT_N_S_keys_S_button_enter
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_keys_S_button_enter_PATH "/keys/button_enter"

/* Node's name with unit-address: */
#define DT_N_S_keys_S_button_enter_FULL_NAME "button_enter"

/* Node parent (/keys) identifier: */
#define DT_N_S_keys_S_button_enter_PARENT DT_N_S_keys

/* Node's index in its parent's list of children: */
#define DT_N_S_keys_S_button_enter_CHILD_IDX 5

/* Helpers for dealing with node labels: */
#define DT_N_S_keys_S_button_enter_NODELABEL_NUM 1
#define DT_N_S_keys_S_button_enter_FOREACH_NODELABEL(fn) fn(button_enter)
#define DT_N_S_keys_S_button_enter_FOREACH_NODELABEL_VARGS(fn, ...) fn(button_enter, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_keys_S_button_enter_CHILD_NUM 0
#define DT_N_S_keys_S_button_enter_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_keys_S_button_enter_FOREACH_CHILD(fn) 
#define DT_N_S_keys_S_button_enter_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_keys_S_button_enter_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_keys_S_button_enter_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_keys_S_button_enter_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_keys_S_button_enter_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_keys_S_button_enter_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_keys_S_button_enter_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_keys_S_button_enter_ORD 68
#define DT_N_S_keys_S_button_enter_ORD_STR_SORTABLE 00068

/* Ordinals for what this node depends on directly: */
#define DT_N_S_keys_S_button_enter_REQUIRES_ORDS \
	14, /* /gpio@900 */ \
	15, /* /keys */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_keys_S_button_enter_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_keys_S_button_enter_EXISTS 1
#define DT_N_NODELABEL_button_enter DT_N_S_keys_S_button_enter

/* Macros for properties that are special in the specification: */
#define DT_N_S_keys_S_button_enter_REG_NUM 0
#define DT_N_S_keys_S_button_enter_RANGES_NUM 0
#define DT_N_S_keys_S_button_enter_FOREACH_RANGE(fn) 
#define DT_N_S_keys_S_button_enter_IRQ_NUM 0
#define DT_N_S_keys_S_button_enter_IRQ_LEVEL 0
#define DT_N_S_keys_S_button_enter_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_keys_S_button_enter_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_keys_S_button_enter_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_keys_S_button_enter_P_gpios_IDX_0_PH DT_N_S_gpio_900
#define DT_N_S_keys_S_button_enter_P_gpios_IDX_0_VAL_pin 8
#define DT_N_S_keys_S_button_enter_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_keys_S_button_enter_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_keys_S_button_enter_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_keys_S_button_enter_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_keys_S_button_enter, gpios, 0)
#define DT_N_S_keys_S_button_enter_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_keys_S_button_enter, gpios, 0)
#define DT_N_S_keys_S_button_enter_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_keys_S_button_enter, gpios, 0, __VA_ARGS__)
#define DT_N_S_keys_S_button_enter_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_keys_S_button_enter, gpios, 0, __VA_ARGS__)
#define DT_N_S_keys_S_button_enter_P_gpios_LEN 1
#define DT_N_S_keys_S_button_enter_P_gpios_EXISTS 1
#define DT_N_S_keys_S_button_enter_P_zephyr_code 28
#define DT_N_S_keys_S_button_enter_P_zephyr_code_EXISTS 1

/*
 * Devicetree node: /keys/button_left
 *
 * Node identifier: DT_N_S_keys_S_button_left
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_keys_S_button_left_PATH "/keys/button_left"

/* Node's name with unit-address: */
#define DT_N_S_keys_S_button_left_FULL_NAME "button_left"

/* Node parent (/keys) identifier: */
#define DT_N_S_keys_S_button_left_PARENT DT_N_S_keys

/* Node's index in its parent's list of children: */
#define DT_N_S_keys_S_button_left_CHILD_IDX 3

/* Helpers for dealing with node labels: */
#define DT_N_S_keys_S_button_left_NODELABEL_NUM 1
#define DT_N_S_keys_S_button_left_FOREACH_NODELABEL(fn) fn(button_left)
#define DT_N_S_keys_S_button_left_FOREACH_NODELABEL_VARGS(fn, ...) fn(button_left, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_keys_S_button_left_CHILD_NUM 0
#define DT_N_S_keys_S_button_left_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_keys_S_button_left_FOREACH_CHILD(fn) 
#define DT_N_S_keys_S_button_left_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_keys_S_button_left_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_keys_S_button_left_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_keys_S_button_left_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_keys_S_button_left_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_keys_S_button_left_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_keys_S_button_left_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_keys_S_button_left_ORD 69
#define DT_N_S_keys_S_button_left_ORD_STR_SORTABLE 00069

/* Ordinals for what this node depends on directly: */
#define DT_N_S_keys_S_button_left_REQUIRES_ORDS \
	14, /* /gpio@900 */ \
	15, /* /keys */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_keys_S_button_left_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_keys_S_button_left_EXISTS 1
#define DT_N_NODELABEL_button_left DT_N_S_keys_S_button_left

/* Macros for properties that are special in the specification: */
#define DT_N_S_keys_S_button_left_REG_NUM 0
#define DT_N_S_keys_S_button_left_RANGES_NUM 0
#define DT_N_S_keys_S_button_left_FOREACH_RANGE(fn) 
#define DT_N_S_keys_S_button_left_IRQ_NUM 0
#define DT_N_S_keys_S_button_left_IRQ_LEVEL 0
#define DT_N_S_keys_S_button_left_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_keys_S_button_left_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_keys_S_button_left_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_keys_S_button_left_P_gpios_IDX_0_PH DT_N_S_gpio_900
#define DT_N_S_keys_S_button_left_P_gpios_IDX_0_VAL_pin 6
#define DT_N_S_keys_S_button_left_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_keys_S_button_left_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_keys_S_button_left_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_keys_S_button_left_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_keys_S_button_left, gpios, 0)
#define DT_N_S_keys_S_button_left_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_keys_S_button_left, gpios, 0)
#define DT_N_S_keys_S_button_left_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_keys_S_button_left, gpios, 0, __VA_ARGS__)
#define DT_N_S_keys_S_button_left_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_keys_S_button_left, gpios, 0, __VA_ARGS__)
#define DT_N_S_keys_S_button_left_P_gpios_LEN 1
#define DT_N_S_keys_S_button_left_P_gpios_EXISTS 1
#define DT_N_S_keys_S_button_left_P_zephyr_code 105
#define DT_N_S_keys_S_button_left_P_zephyr_code_EXISTS 1

/*
 * Devicetree node: /keys/button_right
 *
 * Node identifier: DT_N_S_keys_S_button_right
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_keys_S_button_right_PATH "/keys/button_right"

/* Node's name with unit-address: */
#define DT_N_S_keys_S_button_right_FULL_NAME "button_right"

/* Node parent (/keys) identifier: */
#define DT_N_S_keys_S_button_right_PARENT DT_N_S_keys

/* Node's index in its parent's list of children: */
#define DT_N_S_keys_S_button_right_CHILD_IDX 4

/* Helpers for dealing with node labels: */
#define DT_N_S_keys_S_button_right_NODELABEL_NUM 1
#define DT_N_S_keys_S_button_right_FOREACH_NODELABEL(fn) fn(button_right)
#define DT_N_S_keys_S_button_right_FOREACH_NODELABEL_VARGS(fn, ...) fn(button_right, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_keys_S_button_right_CHILD_NUM 0
#define DT_N_S_keys_S_button_right_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_keys_S_button_right_FOREACH_CHILD(fn) 
#define DT_N_S_keys_S_button_right_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_keys_S_button_right_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_keys_S_button_right_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_keys_S_button_right_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_keys_S_button_right_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_keys_S_button_right_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_keys_S_button_right_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_keys_S_button_right_ORD 70
#define DT_N_S_keys_S_button_right_ORD_STR_SORTABLE 00070

/* Ordinals for what this node depends on directly: */
#define DT_N_S_keys_S_button_right_REQUIRES_ORDS \
	14, /* /gpio@900 */ \
	15, /* /keys */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_keys_S_button_right_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_keys_S_button_right_EXISTS 1
#define DT_N_NODELABEL_button_right DT_N_S_keys_S_button_right

/* Macros for properties that are special in the specification: */
#define DT_N_S_keys_S_button_right_REG_NUM 0
#define DT_N_S_keys_S_button_right_RANGES_NUM 0
#define DT_N_S_keys_S_button_right_FOREACH_RANGE(fn) 
#define DT_N_S_keys_S_button_right_IRQ_NUM 0
#define DT_N_S_keys_S_button_right_IRQ_LEVEL 0
#define DT_N_S_keys_S_button_right_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_keys_S_button_right_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_keys_S_button_right_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_keys_S_button_right_P_gpios_IDX_0_PH DT_N_S_gpio_900
#define DT_N_S_keys_S_button_right_P_gpios_IDX_0_VAL_pin 7
#define DT_N_S_keys_S_button_right_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_keys_S_button_right_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_keys_S_button_right_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_keys_S_button_right_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_keys_S_button_right, gpios, 0)
#define DT_N_S_keys_S_button_right_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_keys_S_button_right, gpios, 0)
#define DT_N_S_keys_S_button_right_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_keys_S_button_right, gpios, 0, __VA_ARGS__)
#define DT_N_S_keys_S_button_right_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_keys_S_button_right, gpios, 0, __VA_ARGS__)
#define DT_N_S_keys_S_button_right_P_gpios_LEN 1
#define DT_N_S_keys_S_button_right_P_gpios_EXISTS 1
#define DT_N_S_keys_S_button_right_P_zephyr_code 106
#define DT_N_S_keys_S_button_right_P_zephyr_code_EXISTS 1

/*
 * Devicetree node: /keys/encoder_button
 *
 * Node identifier: DT_N_S_keys_S_encoder_button
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_keys_S_encoder_button_PATH "/keys/encoder_button"

/* Node's name with unit-address: */
#define DT_N_S_keys_S_encoder_button_FULL_NAME "encoder_button"

/* Node parent (/keys) identifier: */
#define DT_N_S_keys_S_encoder_button_PARENT DT_N_S_keys

/* Node's index in its parent's list of children: */
#define DT_N_S_keys_S_encoder_button_CHILD_IDX 2

/* Helpers for dealing with node labels: */
#define DT_N_S_keys_S_encoder_button_NODELABEL_NUM 1
#define DT_N_S_keys_S_encoder_button_FOREACH_NODELABEL(fn) fn(encoder_button)
#define DT_N_S_keys_S_encoder_button_FOREACH_NODELABEL_VARGS(fn, ...) fn(encoder_button, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_keys_S_encoder_button_CHILD_NUM 0
#define DT_N_S_keys_S_encoder_button_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_keys_S_encoder_button_FOREACH_CHILD(fn) 
#define DT_N_S_keys_S_encoder_button_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_keys_S_encoder_button_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_keys_S_encoder_button_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_keys_S_encoder_button_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_keys_S_encoder_button_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_keys_S_encoder_button_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_keys_S_encoder_button_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_keys_S_encoder_button_ORD 71
#define DT_N_S_keys_S_encoder_button_ORD_STR_SORTABLE 00071

/* Ordinals for what this node depends on directly: */
#define DT_N_S_keys_S_encoder_button_REQUIRES_ORDS \
	14, /* /gpio@900 */ \
	15, /* /keys */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_keys_S_encoder_button_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_keys_S_encoder_button_EXISTS 1
#define DT_N_NODELABEL_encoder_button DT_N_S_keys_S_encoder_button

/* Macros for properties that are special in the specification: */
#define DT_N_S_keys_S_encoder_button_REG_NUM 0
#define DT_N_S_keys_S_encoder_button_RANGES_NUM 0
#define DT_N_S_keys_S_encoder_button_FOREACH_RANGE(fn) 
#define DT_N_S_keys_S_encoder_button_IRQ_NUM 0
#define DT_N_S_keys_S_encoder_button_IRQ_LEVEL 0
#define DT_N_S_keys_S_encoder_button_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_keys_S_encoder_button_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_keys_S_encoder_button_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_keys_S_encoder_button_P_gpios_IDX_0_PH DT_N_S_gpio_900
#define DT_N_S_keys_S_encoder_button_P_gpios_IDX_0_VAL_pin 3
#define DT_N_S_keys_S_encoder_button_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_keys_S_encoder_button_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_keys_S_encoder_button_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_keys_S_encoder_button_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_keys_S_encoder_button, gpios, 0)
#define DT_N_S_keys_S_encoder_button_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_keys_S_encoder_button, gpios, 0)
#define DT_N_S_keys_S_encoder_button_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_keys_S_encoder_button, gpios, 0, __VA_ARGS__)
#define DT_N_S_keys_S_encoder_button_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_keys_S_encoder_button, gpios, 0, __VA_ARGS__)
#define DT_N_S_keys_S_encoder_button_P_gpios_LEN 1
#define DT_N_S_keys_S_encoder_button_P_gpios_EXISTS 1
#define DT_N_S_keys_S_encoder_button_P_zephyr_code 11
#define DT_N_S_keys_S_encoder_button_P_zephyr_code_EXISTS 1

/*
 * Devicetree node: /leds
 *
 * Node identifier: DT_N_S_leds
 *
 * Binding (compatible = gpio-leds):
 *   $ZEPHYR_BASE/dts/bindings/led/gpio-leds.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_PATH "/leds"

/* Node's name with unit-address: */
#define DT_N_S_leds_FULL_NAME "leds"

/* Node parent (/) identifier: */
#define DT_N_S_leds_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_leds_CHILD_IDX 2

/* Helpers for dealing with node labels: */
#define DT_N_S_leds_NODELABEL_NUM 0
#define DT_N_S_leds_FOREACH_NODELABEL(fn) 
#define DT_N_S_leds_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_leds_CHILD_NUM 1
#define DT_N_S_leds_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_leds_FOREACH_CHILD(fn) fn(DT_N_S_leds_S_led_0)
#define DT_N_S_leds_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_leds_S_led_0)
#define DT_N_S_leds_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_leds_S_led_0)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_leds_S_led_0)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_leds_ORD 72
#define DT_N_S_leds_ORD_STR_SORTABLE 00072

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_REQUIRES_ORDS \
	0, /* / */ \
	30, /* /gpio@800 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_SUPPORTS_ORDS \
	73, /* /leds/led_0 */

/* Existence and alternate IDs: */
#define DT_N_S_leds_EXISTS 1
#define DT_N_INST_0_gpio_leds DT_N_S_leds

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_REG_NUM 0
#define DT_N_S_leds_RANGES_NUM 0
#define DT_N_S_leds_FOREACH_RANGE(fn) 
#define DT_N_S_leds_IRQ_NUM 0
#define DT_N_S_leds_IRQ_LEVEL 0
#define DT_N_S_leds_COMPAT_MATCHES_gpio_leds 1
#define DT_N_S_leds_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_P_compatible {"gpio-leds"}
#define DT_N_S_leds_P_compatible_IDX_0 "gpio-leds"
#define DT_N_S_leds_P_compatible_IDX_0_STRING_UNQUOTED gpio-leds
#define DT_N_S_leds_P_compatible_IDX_0_STRING_TOKEN gpio_leds
#define DT_N_S_leds_P_compatible_IDX_0_STRING_UPPER_TOKEN GPIO_LEDS
#define DT_N_S_leds_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds, compatible, 0)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds, compatible, 0)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds, compatible, 0, __VA_ARGS__)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds, compatible, 0, __VA_ARGS__)
#define DT_N_S_leds_P_compatible_LEN 1
#define DT_N_S_leds_P_compatible_EXISTS 1

/*
 * Devicetree node: /leds/led_0
 *
 * Node identifier: DT_N_S_leds_S_led_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_S_led_0_PATH "/leds/led_0"

/* Node's name with unit-address: */
#define DT_N_S_leds_S_led_0_FULL_NAME "led_0"

/* Node parent (/leds) identifier: */
#define DT_N_S_leds_S_led_0_PARENT DT_N_S_leds

/* Node's index in its parent's list of children: */
#define DT_N_S_leds_S_led_0_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_leds_S_led_0_NODELABEL_NUM 1
#define DT_N_S_leds_S_led_0_FOREACH_NODELABEL(fn) fn(led0)
#define DT_N_S_leds_S_led_0_FOREACH_NODELABEL_VARGS(fn, ...) fn(led0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_leds_S_led_0_CHILD_NUM 0
#define DT_N_S_leds_S_led_0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_leds_S_led_0_FOREACH_CHILD(fn) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_leds_S_led_0_ORD 73
#define DT_N_S_leds_S_led_0_ORD_STR_SORTABLE 00073

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_S_led_0_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	72, /* /leds */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_S_led_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_leds_S_led_0_EXISTS 1
#define DT_N_ALIAS_led0      DT_N_S_leds_S_led_0
#define DT_N_ALIAS_led_green DT_N_S_leds_S_led_0
#define DT_N_ALIAS_led_red   DT_N_S_leds_S_led_0
#define DT_N_NODELABEL_led0  DT_N_S_leds_S_led_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_S_led_0_REG_NUM 0
#define DT_N_S_leds_S_led_0_RANGES_NUM 0
#define DT_N_S_leds_S_led_0_FOREACH_RANGE(fn) 
#define DT_N_S_leds_S_led_0_IRQ_NUM 0
#define DT_N_S_leds_S_led_0_IRQ_LEVEL 0
#define DT_N_S_leds_S_led_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_S_led_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_pin 0
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_0, gpios, 0)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_0, gpios, 0)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_gpios_LEN 1
#define DT_N_S_leds_S_led_0_P_gpios_EXISTS 1
#define DT_N_S_leds_S_led_0_P_label "Green LED"
#define DT_N_S_leds_S_led_0_P_label_STRING_UNQUOTED Green LED
#define DT_N_S_leds_S_led_0_P_label_STRING_TOKEN Green_LED
#define DT_N_S_leds_S_led_0_P_label_STRING_UPPER_TOKEN GREEN_LED
#define DT_N_S_leds_S_led_0_P_label_IDX_0 "Green LED"
#define DT_N_S_leds_S_led_0_P_label_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_0, label, 0)
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_0, label, 0)
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, label, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, label, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_label_LEN 1
#define DT_N_S_leds_S_led_0_P_label_EXISTS 1

/*
 * Devicetree node: /lpuart_10
 *
 * Node identifier: DT_N_S_lpuart_10
 *
 * Binding (compatible = zephyr,native-posix-uart):
 *   $ZEPHYR_BASE/dts/bindings/serial/zephyr,native-posix-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_lpuart_10_PATH "/lpuart_10"

/* Node's name with unit-address: */
#define DT_N_S_lpuart_10_FULL_NAME "lpuart_10"

/* Node parent (/) identifier: */
#define DT_N_S_lpuart_10_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_lpuart_10_CHILD_IDX 29

/* Helpers for dealing with node labels: */
#define DT_N_S_lpuart_10_NODELABEL_NUM 1
#define DT_N_S_lpuart_10_FOREACH_NODELABEL(fn) fn(lpuart10)
#define DT_N_S_lpuart_10_FOREACH_NODELABEL_VARGS(fn, ...) fn(lpuart10, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_lpuart_10_CHILD_NUM 1
#define DT_N_S_lpuart_10_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_lpuart_10_FOREACH_CHILD(fn) fn(DT_N_S_lpuart_10_S_modbus_0)
#define DT_N_S_lpuart_10_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_lpuart_10_S_modbus_0)
#define DT_N_S_lpuart_10_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_lpuart_10_S_modbus_0, __VA_ARGS__)
#define DT_N_S_lpuart_10_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_lpuart_10_S_modbus_0, __VA_ARGS__)
#define DT_N_S_lpuart_10_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_lpuart_10_S_modbus_0)
#define DT_N_S_lpuart_10_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_lpuart_10_S_modbus_0)
#define DT_N_S_lpuart_10_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_lpuart_10_S_modbus_0, __VA_ARGS__)
#define DT_N_S_lpuart_10_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_lpuart_10_S_modbus_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_lpuart_10_ORD 74
#define DT_N_S_lpuart_10_ORD_STR_SORTABLE 00074

/* Ordinals for what this node depends on directly: */
#define DT_N_S_lpuart_10_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_lpuart_10_SUPPORTS_ORDS \
	75, /* /lpuart_10/modbus_0 */

/* Existence and alternate IDs: */
#define DT_N_S_lpuart_10_EXISTS 1
#define DT_N_INST_1_zephyr_native_posix_uart DT_N_S_lpuart_10
#define DT_N_NODELABEL_lpuart10              DT_N_S_lpuart_10

/* Macros for properties that are special in the specification: */
#define DT_N_S_lpuart_10_REG_NUM 0
#define DT_N_S_lpuart_10_RANGES_NUM 0
#define DT_N_S_lpuart_10_FOREACH_RANGE(fn) 
#define DT_N_S_lpuart_10_IRQ_NUM 0
#define DT_N_S_lpuart_10_IRQ_LEVEL 0
#define DT_N_S_lpuart_10_COMPAT_MATCHES_zephyr_native_posix_uart 1
#define DT_N_S_lpuart_10_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_lpuart_10_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_lpuart_10_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_lpuart_10_COMPAT_MODEL_IDX_0 "native-posix-uart"
#define DT_N_S_lpuart_10_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_lpuart_10_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_lpuart_10_P_wakeup_source 0
#define DT_N_S_lpuart_10_P_wakeup_source_EXISTS 1
#define DT_N_S_lpuart_10_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_lpuart_10_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_lpuart_10_P_status "okay"
#define DT_N_S_lpuart_10_P_status_STRING_UNQUOTED okay
#define DT_N_S_lpuart_10_P_status_STRING_TOKEN okay
#define DT_N_S_lpuart_10_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_lpuart_10_P_status_IDX_0 "okay"
#define DT_N_S_lpuart_10_P_status_IDX_0_EXISTS 1
#define DT_N_S_lpuart_10_P_status_ENUM_IDX 1
#define DT_N_S_lpuart_10_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_lpuart_10_P_status_ENUM_TOKEN okay
#define DT_N_S_lpuart_10_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_lpuart_10_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_lpuart_10, status, 0)
#define DT_N_S_lpuart_10_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_lpuart_10, status, 0)
#define DT_N_S_lpuart_10_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_lpuart_10, status, 0, __VA_ARGS__)
#define DT_N_S_lpuart_10_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_lpuart_10, status, 0, __VA_ARGS__)
#define DT_N_S_lpuart_10_P_status_LEN 1
#define DT_N_S_lpuart_10_P_status_EXISTS 1
#define DT_N_S_lpuart_10_P_compatible {"zephyr,native-posix-uart"}
#define DT_N_S_lpuart_10_P_compatible_IDX_0 "zephyr,native-posix-uart"
#define DT_N_S_lpuart_10_P_compatible_IDX_0_STRING_UNQUOTED zephyr,native-posix-uart
#define DT_N_S_lpuart_10_P_compatible_IDX_0_STRING_TOKEN zephyr_native_posix_uart
#define DT_N_S_lpuart_10_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_NATIVE_POSIX_UART
#define DT_N_S_lpuart_10_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_lpuart_10_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_lpuart_10, compatible, 0)
#define DT_N_S_lpuart_10_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_lpuart_10, compatible, 0)
#define DT_N_S_lpuart_10_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_lpuart_10, compatible, 0, __VA_ARGS__)
#define DT_N_S_lpuart_10_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_lpuart_10, compatible, 0, __VA_ARGS__)
#define DT_N_S_lpuart_10_P_compatible_LEN 1
#define DT_N_S_lpuart_10_P_compatible_EXISTS 1
#define DT_N_S_lpuart_10_P_zephyr_deferred_init 0
#define DT_N_S_lpuart_10_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_lpuart_10_P_current_speed 0
#define DT_N_S_lpuart_10_P_current_speed_EXISTS 1
#define DT_N_S_lpuart_10_P_hw_flow_control 0
#define DT_N_S_lpuart_10_P_hw_flow_control_EXISTS 1

/*
 * Devicetree node: /lpuart_10/modbus_0
 *
 * Node identifier: DT_N_S_lpuart_10_S_modbus_0
 *
 * Binding (compatible = zephyr,modbus-serial):
 *   $ZEPHYR_BASE/dts/bindings/misc/zephyr,modbus-serial.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_lpuart_10_S_modbus_0_PATH "/lpuart_10/modbus_0"

/* Node's name with unit-address: */
#define DT_N_S_lpuart_10_S_modbus_0_FULL_NAME "modbus_0"

/* Node parent (/lpuart_10) identifier: */
#define DT_N_S_lpuart_10_S_modbus_0_PARENT DT_N_S_lpuart_10

/* Node's index in its parent's list of children: */
#define DT_N_S_lpuart_10_S_modbus_0_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_lpuart_10_S_modbus_0_NODELABEL_NUM 1
#define DT_N_S_lpuart_10_S_modbus_0_FOREACH_NODELABEL(fn) fn(modbus0)
#define DT_N_S_lpuart_10_S_modbus_0_FOREACH_NODELABEL_VARGS(fn, ...) fn(modbus0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_lpuart_10_S_modbus_0_CHILD_NUM 0
#define DT_N_S_lpuart_10_S_modbus_0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_lpuart_10_S_modbus_0_FOREACH_CHILD(fn) 
#define DT_N_S_lpuart_10_S_modbus_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_lpuart_10_S_modbus_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_lpuart_10_S_modbus_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_lpuart_10_S_modbus_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_lpuart_10_S_modbus_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_lpuart_10_S_modbus_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_lpuart_10_S_modbus_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_lpuart_10_S_modbus_0_ORD 75
#define DT_N_S_lpuart_10_S_modbus_0_ORD_STR_SORTABLE 00075

/* Ordinals for what this node depends on directly: */
#define DT_N_S_lpuart_10_S_modbus_0_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	74, /* /lpuart_10 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_lpuart_10_S_modbus_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_lpuart_10_S_modbus_0_EXISTS 1
#define DT_N_ALIAS_modbus                DT_N_S_lpuart_10_S_modbus_0
#define DT_N_INST_0_zephyr_modbus_serial DT_N_S_lpuart_10_S_modbus_0
#define DT_N_NODELABEL_modbus0           DT_N_S_lpuart_10_S_modbus_0

/* Bus info (controller: '/lpuart_10', type: '['uart']') */
#define DT_N_S_lpuart_10_S_modbus_0_BUS_uart 1
#define DT_N_S_lpuart_10_S_modbus_0_BUS DT_N_S_lpuart_10

/* Macros for properties that are special in the specification: */
#define DT_N_S_lpuart_10_S_modbus_0_REG_NUM 0
#define DT_N_S_lpuart_10_S_modbus_0_RANGES_NUM 0
#define DT_N_S_lpuart_10_S_modbus_0_FOREACH_RANGE(fn) 
#define DT_N_S_lpuart_10_S_modbus_0_IRQ_NUM 0
#define DT_N_S_lpuart_10_S_modbus_0_IRQ_LEVEL 0
#define DT_N_S_lpuart_10_S_modbus_0_COMPAT_MATCHES_zephyr_modbus_serial 1
#define DT_N_S_lpuart_10_S_modbus_0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_lpuart_10_S_modbus_0_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_lpuart_10_S_modbus_0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_lpuart_10_S_modbus_0_COMPAT_MODEL_IDX_0 "modbus-serial"
#define DT_N_S_lpuart_10_S_modbus_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_lpuart_10_S_modbus_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_lpuart_10_S_modbus_0_P_wakeup_source 0
#define DT_N_S_lpuart_10_S_modbus_0_P_wakeup_source_EXISTS 1
#define DT_N_S_lpuart_10_S_modbus_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_lpuart_10_S_modbus_0_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_lpuart_10_S_modbus_0_P_status "okay"
#define DT_N_S_lpuart_10_S_modbus_0_P_status_STRING_UNQUOTED okay
#define DT_N_S_lpuart_10_S_modbus_0_P_status_STRING_TOKEN okay
#define DT_N_S_lpuart_10_S_modbus_0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_lpuart_10_S_modbus_0_P_status_IDX_0 "okay"
#define DT_N_S_lpuart_10_S_modbus_0_P_status_IDX_0_EXISTS 1
#define DT_N_S_lpuart_10_S_modbus_0_P_status_ENUM_IDX 1
#define DT_N_S_lpuart_10_S_modbus_0_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_lpuart_10_S_modbus_0_P_status_ENUM_TOKEN okay
#define DT_N_S_lpuart_10_S_modbus_0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_lpuart_10_S_modbus_0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_lpuart_10_S_modbus_0, status, 0)
#define DT_N_S_lpuart_10_S_modbus_0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_lpuart_10_S_modbus_0, status, 0)
#define DT_N_S_lpuart_10_S_modbus_0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_lpuart_10_S_modbus_0, status, 0, __VA_ARGS__)
#define DT_N_S_lpuart_10_S_modbus_0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_lpuart_10_S_modbus_0, status, 0, __VA_ARGS__)
#define DT_N_S_lpuart_10_S_modbus_0_P_status_LEN 1
#define DT_N_S_lpuart_10_S_modbus_0_P_status_EXISTS 1
#define DT_N_S_lpuart_10_S_modbus_0_P_compatible {"zephyr,modbus-serial"}
#define DT_N_S_lpuart_10_S_modbus_0_P_compatible_IDX_0 "zephyr,modbus-serial"
#define DT_N_S_lpuart_10_S_modbus_0_P_compatible_IDX_0_STRING_UNQUOTED zephyr,modbus-serial
#define DT_N_S_lpuart_10_S_modbus_0_P_compatible_IDX_0_STRING_TOKEN zephyr_modbus_serial
#define DT_N_S_lpuart_10_S_modbus_0_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_MODBUS_SERIAL
#define DT_N_S_lpuart_10_S_modbus_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_lpuart_10_S_modbus_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_lpuart_10_S_modbus_0, compatible, 0)
#define DT_N_S_lpuart_10_S_modbus_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_lpuart_10_S_modbus_0, compatible, 0)
#define DT_N_S_lpuart_10_S_modbus_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_lpuart_10_S_modbus_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_lpuart_10_S_modbus_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_lpuart_10_S_modbus_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_lpuart_10_S_modbus_0_P_compatible_LEN 1
#define DT_N_S_lpuart_10_S_modbus_0_P_compatible_EXISTS 1
#define DT_N_S_lpuart_10_S_modbus_0_P_zephyr_deferred_init 0
#define DT_N_S_lpuart_10_S_modbus_0_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_lpuart_10_S_modbus_0_P_de_gpios_IDX_0_EXISTS 1
#define DT_N_S_lpuart_10_S_modbus_0_P_de_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_lpuart_10_S_modbus_0_P_de_gpios_IDX_0_VAL_pin 26
#define DT_N_S_lpuart_10_S_modbus_0_P_de_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_lpuart_10_S_modbus_0_P_de_gpios_IDX_0_VAL_flags 0
#define DT_N_S_lpuart_10_S_modbus_0_P_de_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_lpuart_10_S_modbus_0_P_de_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_lpuart_10_S_modbus_0, de_gpios, 0)
#define DT_N_S_lpuart_10_S_modbus_0_P_de_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_lpuart_10_S_modbus_0, de_gpios, 0)
#define DT_N_S_lpuart_10_S_modbus_0_P_de_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_lpuart_10_S_modbus_0, de_gpios, 0, __VA_ARGS__)
#define DT_N_S_lpuart_10_S_modbus_0_P_de_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_lpuart_10_S_modbus_0, de_gpios, 0, __VA_ARGS__)
#define DT_N_S_lpuart_10_S_modbus_0_P_de_gpios_LEN 1
#define DT_N_S_lpuart_10_S_modbus_0_P_de_gpios_EXISTS 1
#define DT_N_S_lpuart_10_S_modbus_0_P_re_gpios_IDX_0_EXISTS 1
#define DT_N_S_lpuart_10_S_modbus_0_P_re_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_lpuart_10_S_modbus_0_P_re_gpios_IDX_0_VAL_pin 27
#define DT_N_S_lpuart_10_S_modbus_0_P_re_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_lpuart_10_S_modbus_0_P_re_gpios_IDX_0_VAL_flags 1
#define DT_N_S_lpuart_10_S_modbus_0_P_re_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_lpuart_10_S_modbus_0_P_re_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_lpuart_10_S_modbus_0, re_gpios, 0)
#define DT_N_S_lpuart_10_S_modbus_0_P_re_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_lpuart_10_S_modbus_0, re_gpios, 0)
#define DT_N_S_lpuart_10_S_modbus_0_P_re_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_lpuart_10_S_modbus_0, re_gpios, 0, __VA_ARGS__)
#define DT_N_S_lpuart_10_S_modbus_0_P_re_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_lpuart_10_S_modbus_0, re_gpios, 0, __VA_ARGS__)
#define DT_N_S_lpuart_10_S_modbus_0_P_re_gpios_LEN 1
#define DT_N_S_lpuart_10_S_modbus_0_P_re_gpios_EXISTS 1

/*
 * Devicetree node: /spi@200
 *
 * Node identifier: DT_N_S_spi_200
 *
 * Binding (compatible = zephyr,spi-emul-controller):
 *   $ZEPHYR_BASE/dts/bindings/spi/zephyr,spi-emul-controller.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_spi_200_PATH "/spi@200"

/* Node's name with unit-address: */
#define DT_N_S_spi_200_FULL_NAME "spi@200"

/* Node parent (/) identifier: */
#define DT_N_S_spi_200_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_spi_200_CHILD_IDX 8

/* Helpers for dealing with node labels: */
#define DT_N_S_spi_200_NODELABEL_NUM 1
#define DT_N_S_spi_200_FOREACH_NODELABEL(fn) fn(spi0)
#define DT_N_S_spi_200_FOREACH_NODELABEL_VARGS(fn, ...) fn(spi0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_spi_200_CHILD_NUM 1
#define DT_N_S_spi_200_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_spi_200_FOREACH_CHILD(fn) fn(DT_N_S_spi_200_S_nafe13388_0)
#define DT_N_S_spi_200_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_spi_200_S_nafe13388_0)
#define DT_N_S_spi_200_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_spi_200_S_nafe13388_0, __VA_ARGS__)
#define DT_N_S_spi_200_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_spi_200_S_nafe13388_0, __VA_ARGS__)
#define DT_N_S_spi_200_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_spi_200_S_nafe13388_0)
#define DT_N_S_spi_200_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_spi_200_S_nafe13388_0)
#define DT_N_S_spi_200_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_spi_200_S_nafe13388_0, __VA_ARGS__)
#define DT_N_S_spi_200_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_spi_200_S_nafe13388_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_spi_200_ORD 76
#define DT_N_S_spi_200_ORD_STR_SORTABLE 00076

/* Ordinals for what this node depends on directly: */
#define DT_N_S_spi_200_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_spi_200_SUPPORTS_ORDS \
	77, /* /spi@200/nafe13388@0 */

/* Existence and alternate IDs: */
#define DT_N_S_spi_200_EXISTS 1
#define DT_N_ALIAS_spi_0                       DT_N_S_spi_200
#define DT_N_INST_0_zephyr_spi_emul_controller DT_N_S_spi_200
#define DT_N_NODELABEL_spi0                    DT_N_S_spi_200

/* Macros for properties that are special in the specification: */
#define DT_N_S_spi_200_REG_NUM 1
#define DT_N_S_spi_200_REG_IDX_0_EXISTS 1
#define DT_N_S_spi_200_REG_IDX_0_VAL_ADDRESS 512 /* 0x200 */
#define DT_N_S_spi_200_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_spi_200_RANGES_NUM 0
#define DT_N_S_spi_200_FOREACH_RANGE(fn) 
#define DT_N_S_spi_200_IRQ_NUM 0
#define DT_N_S_spi_200_IRQ_LEVEL 0
#define DT_N_S_spi_200_COMPAT_MATCHES_zephyr_spi_emul_controller 1
#define DT_N_S_spi_200_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_spi_200_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_spi_200_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_spi_200_COMPAT_MODEL_IDX_0 "spi-emul-controller"
#define DT_N_S_spi_200_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_spi_200_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_spi_200_P_wakeup_source 0
#define DT_N_S_spi_200_P_wakeup_source_EXISTS 1
#define DT_N_S_spi_200_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_spi_200_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_spi_200_P_status "okay"
#define DT_N_S_spi_200_P_status_STRING_UNQUOTED okay
#define DT_N_S_spi_200_P_status_STRING_TOKEN okay
#define DT_N_S_spi_200_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_spi_200_P_status_IDX_0 "okay"
#define DT_N_S_spi_200_P_status_IDX_0_EXISTS 1
#define DT_N_S_spi_200_P_status_ENUM_IDX 1
#define DT_N_S_spi_200_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_spi_200_P_status_ENUM_TOKEN okay
#define DT_N_S_spi_200_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_spi_200_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_spi_200, status, 0)
#define DT_N_S_spi_200_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_spi_200, status, 0)
#define DT_N_S_spi_200_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_spi_200, status, 0, __VA_ARGS__)
#define DT_N_S_spi_200_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_spi_200, status, 0, __VA_ARGS__)
#define DT_N_S_spi_200_P_status_LEN 1
#define DT_N_S_spi_200_P_status_EXISTS 1
#define DT_N_S_spi_200_P_compatible {"zephyr,spi-emul-controller"}
#define DT_N_S_spi_200_P_compatible_IDX_0 "zephyr,spi-emul-controller"
#define DT_N_S_spi_200_P_compatible_IDX_0_STRING_UNQUOTED zephyr,spi-emul-controller
#define DT_N_S_spi_200_P_compatible_IDX_0_STRING_TOKEN zephyr_spi_emul_controller
#define DT_N_S_spi_200_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_SPI_EMUL_CONTROLLER
#define DT_N_S_spi_200_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_spi_200_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_spi_200, compatible, 0)
#define DT_N_S_spi_200_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_spi_200, compatible, 0)
#define DT_N_S_spi_200_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_spi_200, compatible, 0, __VA_ARGS__)
#define DT_N_S_spi_200_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_spi_200, compatible, 0, __VA_ARGS__)
#define DT_N_S_spi_200_P_compatible_LEN 1
#define DT_N_S_spi_200_P_compatible_EXISTS 1
#define DT_N_S_spi_200_P_reg {512 /* 0x200 */, 4 /* 0x4 */}
#define DT_N_S_spi_200_P_reg_IDX_0 512
#define DT_N_S_spi_200_P_reg_IDX_0_EXISTS 1
#define DT_N_S_spi_200_P_reg_IDX_1 4
#define DT_N_S_spi_200_P_reg_IDX_1_EXISTS 1
#define DT_N_S_spi_200_P_reg_EXISTS 1
#define DT_N_S_spi_200_P_zephyr_deferred_init 0
#define DT_N_S_spi_200_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_spi_200_P_clock_frequency 50000000
#define DT_N_S_spi_200_P_clock_frequency_EXISTS 1

/*
 * Devicetree node: /spi@200/nafe13388@0
 *
 * Node identifier: DT_N_S_spi_200_S_nafe13388_0
 *
 * Binding (compatible = nxp,nafe13388emul):
 *   /home/user/C4.3_firmware/C4.3_workspace/dts/bindings/nafe13388_emul/nxp,nafe13388.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_spi_200_S_nafe13388_0_PATH "/spi@200/nafe13388@0"

/* Node's name with unit-address: */
#define DT_N_S_spi_200_S_nafe13388_0_FULL_NAME "nafe13388@0"

/* Node parent (/spi@200) identifier: */
#define DT_N_S_spi_200_S_nafe13388_0_PARENT DT_N_S_spi_200

/* Node's index in its parent's list of children: */
#define DT_N_S_spi_200_S_nafe13388_0_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_spi_200_S_nafe13388_0_NODELABEL_NUM 1
#define DT_N_S_spi_200_S_nafe13388_0_FOREACH_NODELABEL(fn) fn(nafe13388)
#define DT_N_S_spi_200_S_nafe13388_0_FOREACH_NODELABEL_VARGS(fn, ...) fn(nafe13388, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_spi_200_S_nafe13388_0_CHILD_NUM 0
#define DT_N_S_spi_200_S_nafe13388_0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_spi_200_S_nafe13388_0_FOREACH_CHILD(fn) 
#define DT_N_S_spi_200_S_nafe13388_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_spi_200_S_nafe13388_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_spi_200_S_nafe13388_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_spi_200_S_nafe13388_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_spi_200_S_nafe13388_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_spi_200_S_nafe13388_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_spi_200_S_nafe13388_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_spi_200_S_nafe13388_0_ORD 77
#define DT_N_S_spi_200_S_nafe13388_0_ORD_STR_SORTABLE 00077

/* Ordinals for what this node depends on directly: */
#define DT_N_S_spi_200_S_nafe13388_0_REQUIRES_ORDS \
	30, /* /gpio@800 */ \
	76, /* /spi@200 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_spi_200_S_nafe13388_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_spi_200_S_nafe13388_0_EXISTS 1
#define DT_N_INST_0_nxp_nafe13388emul DT_N_S_spi_200_S_nafe13388_0
#define DT_N_NODELABEL_nafe13388      DT_N_S_spi_200_S_nafe13388_0

/* Bus info (controller: '/spi@200', type: '['spi']') */
#define DT_N_S_spi_200_S_nafe13388_0_BUS_spi 1
#define DT_N_S_spi_200_S_nafe13388_0_BUS DT_N_S_spi_200

/* Macros for properties that are special in the specification: */
#define DT_N_S_spi_200_S_nafe13388_0_REG_NUM 1
#define DT_N_S_spi_200_S_nafe13388_0_REG_IDX_0_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_spi_200_S_nafe13388_0_RANGES_NUM 0
#define DT_N_S_spi_200_S_nafe13388_0_FOREACH_RANGE(fn) 
#define DT_N_S_spi_200_S_nafe13388_0_IRQ_NUM 0
#define DT_N_S_spi_200_S_nafe13388_0_IRQ_LEVEL 0
#define DT_N_S_spi_200_S_nafe13388_0_COMPAT_MATCHES_nxp_nafe13388emul 1
#define DT_N_S_spi_200_S_nafe13388_0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_spi_200_S_nafe13388_0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_COMPAT_MODEL_IDX_0 "nafe13388emul"
#define DT_N_S_spi_200_S_nafe13388_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_spi_200_S_nafe13388_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_spi_200_S_nafe13388_0_P_wakeup_source 0
#define DT_N_S_spi_200_S_nafe13388_0_P_wakeup_source_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_spi_200_S_nafe13388_0_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_status "okay"
#define DT_N_S_spi_200_S_nafe13388_0_P_status_STRING_UNQUOTED okay
#define DT_N_S_spi_200_S_nafe13388_0_P_status_STRING_TOKEN okay
#define DT_N_S_spi_200_S_nafe13388_0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_spi_200_S_nafe13388_0_P_status_IDX_0 "okay"
#define DT_N_S_spi_200_S_nafe13388_0_P_status_IDX_0_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_status_ENUM_IDX 1
#define DT_N_S_spi_200_S_nafe13388_0_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_status_ENUM_TOKEN okay
#define DT_N_S_spi_200_S_nafe13388_0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_spi_200_S_nafe13388_0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_spi_200_S_nafe13388_0, status, 0)
#define DT_N_S_spi_200_S_nafe13388_0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_spi_200_S_nafe13388_0, status, 0)
#define DT_N_S_spi_200_S_nafe13388_0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_spi_200_S_nafe13388_0, status, 0, __VA_ARGS__)
#define DT_N_S_spi_200_S_nafe13388_0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_spi_200_S_nafe13388_0, status, 0, __VA_ARGS__)
#define DT_N_S_spi_200_S_nafe13388_0_P_status_LEN 1
#define DT_N_S_spi_200_S_nafe13388_0_P_status_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_compatible {"nxp,nafe13388emul"}
#define DT_N_S_spi_200_S_nafe13388_0_P_compatible_IDX_0 "nxp,nafe13388emul"
#define DT_N_S_spi_200_S_nafe13388_0_P_compatible_IDX_0_STRING_UNQUOTED nxp,nafe13388emul
#define DT_N_S_spi_200_S_nafe13388_0_P_compatible_IDX_0_STRING_TOKEN nxp_nafe13388emul
#define DT_N_S_spi_200_S_nafe13388_0_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_NAFE13388EMUL
#define DT_N_S_spi_200_S_nafe13388_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_spi_200_S_nafe13388_0, compatible, 0)
#define DT_N_S_spi_200_S_nafe13388_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_spi_200_S_nafe13388_0, compatible, 0)
#define DT_N_S_spi_200_S_nafe13388_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_spi_200_S_nafe13388_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_spi_200_S_nafe13388_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_spi_200_S_nafe13388_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_spi_200_S_nafe13388_0_P_compatible_LEN 1
#define DT_N_S_spi_200_S_nafe13388_0_P_compatible_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_reg {0 /* 0x0 */}
#define DT_N_S_spi_200_S_nafe13388_0_P_reg_IDX_0 0
#define DT_N_S_spi_200_S_nafe13388_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_reg_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_zephyr_deferred_init 1
#define DT_N_S_spi_200_S_nafe13388_0_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_spi_max_frequency 1000000
#define DT_N_S_spi_200_S_nafe13388_0_P_spi_max_frequency_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_duplex 0
#define DT_N_S_spi_200_S_nafe13388_0_P_duplex_ENUM_IDX 0
#define DT_N_S_spi_200_S_nafe13388_0_P_duplex_ENUM_VAL_0_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_duplex_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_frame_format 0
#define DT_N_S_spi_200_S_nafe13388_0_P_frame_format_ENUM_IDX 0
#define DT_N_S_spi_200_S_nafe13388_0_P_frame_format_ENUM_VAL_0_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_frame_format_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_spi_cpol 0
#define DT_N_S_spi_200_S_nafe13388_0_P_spi_cpol_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_spi_cpha 0
#define DT_N_S_spi_200_S_nafe13388_0_P_spi_cpha_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_spi_hold_cs 0
#define DT_N_S_spi_200_S_nafe13388_0_P_spi_hold_cs_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_reset_gpios_IDX_0_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_reset_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_spi_200_S_nafe13388_0_P_reset_gpios_IDX_0_VAL_pin 28
#define DT_N_S_spi_200_S_nafe13388_0_P_reset_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_reset_gpios_IDX_0_VAL_flags 0
#define DT_N_S_spi_200_S_nafe13388_0_P_reset_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_reset_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_spi_200_S_nafe13388_0, reset_gpios, 0)
#define DT_N_S_spi_200_S_nafe13388_0_P_reset_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_spi_200_S_nafe13388_0, reset_gpios, 0)
#define DT_N_S_spi_200_S_nafe13388_0_P_reset_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_spi_200_S_nafe13388_0, reset_gpios, 0, __VA_ARGS__)
#define DT_N_S_spi_200_S_nafe13388_0_P_reset_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_spi_200_S_nafe13388_0, reset_gpios, 0, __VA_ARGS__)
#define DT_N_S_spi_200_S_nafe13388_0_P_reset_gpios_LEN 1
#define DT_N_S_spi_200_S_nafe13388_0_P_reset_gpios_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_drdy_gpios_IDX_0_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_drdy_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_spi_200_S_nafe13388_0_P_drdy_gpios_IDX_0_VAL_pin 30
#define DT_N_S_spi_200_S_nafe13388_0_P_drdy_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_drdy_gpios_IDX_0_VAL_flags 0
#define DT_N_S_spi_200_S_nafe13388_0_P_drdy_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_drdy_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_spi_200_S_nafe13388_0, drdy_gpios, 0)
#define DT_N_S_spi_200_S_nafe13388_0_P_drdy_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_spi_200_S_nafe13388_0, drdy_gpios, 0)
#define DT_N_S_spi_200_S_nafe13388_0_P_drdy_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_spi_200_S_nafe13388_0, drdy_gpios, 0, __VA_ARGS__)
#define DT_N_S_spi_200_S_nafe13388_0_P_drdy_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_spi_200_S_nafe13388_0, drdy_gpios, 0, __VA_ARGS__)
#define DT_N_S_spi_200_S_nafe13388_0_P_drdy_gpios_LEN 1
#define DT_N_S_spi_200_S_nafe13388_0_P_drdy_gpios_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_int_gpios_IDX_0_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_int_gpios_IDX_0_PH DT_N_S_gpio_800
#define DT_N_S_spi_200_S_nafe13388_0_P_int_gpios_IDX_0_VAL_pin 29
#define DT_N_S_spi_200_S_nafe13388_0_P_int_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_int_gpios_IDX_0_VAL_flags 0
#define DT_N_S_spi_200_S_nafe13388_0_P_int_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_int_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_spi_200_S_nafe13388_0, int_gpios, 0)
#define DT_N_S_spi_200_S_nafe13388_0_P_int_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_spi_200_S_nafe13388_0, int_gpios, 0)
#define DT_N_S_spi_200_S_nafe13388_0_P_int_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_spi_200_S_nafe13388_0, int_gpios, 0, __VA_ARGS__)
#define DT_N_S_spi_200_S_nafe13388_0_P_int_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_spi_200_S_nafe13388_0, int_gpios, 0, __VA_ARGS__)
#define DT_N_S_spi_200_S_nafe13388_0_P_int_gpios_LEN 1
#define DT_N_S_spi_200_S_nafe13388_0_P_int_gpios_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_spi_addr 0
#define DT_N_S_spi_200_S_nafe13388_0_P_spi_addr_ENUM_IDX 0
#define DT_N_S_spi_200_S_nafe13388_0_P_spi_addr_ENUM_VAL_0_EXISTS 1
#define DT_N_S_spi_200_S_nafe13388_0_P_spi_addr_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_console                 DT_N_S_uart
#define DT_CHOSEN_zephyr_console_EXISTS          1
#define DT_CHOSEN_zephyr_shell_uart              DT_N_S_uart
#define DT_CHOSEN_zephyr_shell_uart_EXISTS       1
#define DT_CHOSEN_zephyr_uart_mcumgr             DT_N_S_uart
#define DT_CHOSEN_zephyr_uart_mcumgr_EXISTS      1
#define DT_CHOSEN_zephyr_flash                   DT_N_S_flash_controller_0_S_flash_0
#define DT_CHOSEN_zephyr_flash_EXISTS            1
#define DT_CHOSEN_zephyr_entropy                 DT_N_S_rng
#define DT_CHOSEN_zephyr_entropy_EXISTS          1
#define DT_CHOSEN_zephyr_flash_controller        DT_N_S_flash_controller_0
#define DT_CHOSEN_zephyr_flash_controller_EXISTS 1
#define DT_CHOSEN_zephyr_display                 DT_N_S_sdl_dc
#define DT_CHOSEN_zephyr_display_EXISTS          1
#define DT_CHOSEN_zephyr_canbus                  DT_N_S_can_loopback0
#define DT_CHOSEN_zephyr_canbus_EXISTS           1
#define DT_CHOSEN_zephyr_code_partition          DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000
#define DT_CHOSEN_zephyr_code_partition_EXISTS   1
#define DT_CHOSEN_zephyr_touch                   DT_N_S_input_sdl_touch
#define DT_CHOSEN_zephyr_touch_EXISTS            1

/* Macros for iterating over all nodes and enabled nodes */
#define DT_FOREACH_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_leds) fn(DT_N_S_leds_S_led_0) fn(DT_N_S_lvgl_pointer) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_flash_controller_0) fn(DT_N_S_flash_controller_0_S_flash_0) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000) fn(DT_N_S_eeprom) fn(DT_N_S_i2c_100) fn(DT_N_S_spi_200) fn(DT_N_S_spi_200_S_nafe13388_0) fn(DT_N_S_espi_300) fn(DT_N_S_uart) fn(DT_N_S_uart_1) fn(DT_N_S_rng) fn(DT_N_S_counter) fn(DT_N_S_gpio_800) fn(DT_N_S_gpio_900) fn(DT_N_S_gpio_900_S_sdl_gpio) fn(DT_N_S_udc0) fn(DT_N_S_sdl_dc) fn(DT_N_S_input_sdl_touch) fn(DT_N_S_can_loopback0) fn(DT_N_S_can) fn(DT_N_S_rtc) fn(DT_N_S_adc) fn(DT_N_S_dma) fn(DT_N_S_qdec) fn(DT_N_S_keys) fn(DT_N_S_keys_S_button0) fn(DT_N_S_keys_S_button1) fn(DT_N_S_keys_S_encoder_button) fn(DT_N_S_keys_S_button_left) fn(DT_N_S_keys_S_button_right) fn(DT_N_S_keys_S_button_enter) fn(DT_N_S_lvgl_button_input) fn(DT_N_S_lvgl_encoder_input) fn(DT_N_S_lvgl_keypad_input) fn(DT_N_S_lpuart_10) fn(DT_N_S_lpuart_10_S_modbus_0) fn(DT_N_S_drv8844) fn(DT_N_S_lp5018) fn(DT_N_S_i2c_21) fn(DT_N_S_fake_io) fn(DT_N_S_fake_io_S_display_power) fn(DT_N_S_fake_io_S_bkled) fn(DT_N_S_fake_io_S_display_reset) fn(DT_N_S_fake_io_S_power_5v_enable) fn(DT_N_S_fake_io_S_nafe_pwr_en) fn(DT_N_S_fake_io_S_can1_stb) fn(DT_N_S_fake_io_S_vref_ctrl) fn(DT_N_S_fake_io_S_bm0_button) fn(DT_N_S_fake_io_S_bm1_button) fn(DT_N_S_fake_io_S_buzzer_en) fn(DT_N_S_fake_io_S_board_button_0) fn(DT_N_S_fake_io_S_board_button_1) fn(DT_N_S_fake_io_S_board_button_2) fn(DT_N_S_fake_io_S_board_button_3) fn(DT_N_S_fake_io_S_board_button_4) fn(DT_N_S_fake_io_S_usb_id_input) fn(DT_N_S_fake_io_S_ignition_input) fn(DT_N_S_fake_io_S_digital_in_1_hi) fn(DT_N_S_fake_io_S_digital_in_1_low) fn(DT_N_S_fake_io_S_digital_in_2_hi) fn(DT_N_S_fake_io_S_digital_in_2_low) fn(DT_N_S_fake_io_S_digital_in_3_hi) fn(DT_N_S_fake_io_S_digital_in_3_low) fn(DT_N_S_fake_io_S_digital_in_4_hi) fn(DT_N_S_fake_io_S_digital_in_4_low)
#define DT_FOREACH_OKAY_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_leds) fn(DT_N_S_leds_S_led_0) fn(DT_N_S_lvgl_pointer) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_flash_controller_0) fn(DT_N_S_flash_controller_0_S_flash_0) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000) fn(DT_N_S_eeprom) fn(DT_N_S_i2c_100) fn(DT_N_S_spi_200) fn(DT_N_S_spi_200_S_nafe13388_0) fn(DT_N_S_espi_300) fn(DT_N_S_uart) fn(DT_N_S_uart_1) fn(DT_N_S_rng) fn(DT_N_S_counter) fn(DT_N_S_gpio_800) fn(DT_N_S_gpio_900) fn(DT_N_S_gpio_900_S_sdl_gpio) fn(DT_N_S_udc0) fn(DT_N_S_sdl_dc) fn(DT_N_S_input_sdl_touch) fn(DT_N_S_can) fn(DT_N_S_rtc) fn(DT_N_S_adc) fn(DT_N_S_dma) fn(DT_N_S_qdec) fn(DT_N_S_keys) fn(DT_N_S_keys_S_button0) fn(DT_N_S_keys_S_button1) fn(DT_N_S_keys_S_encoder_button) fn(DT_N_S_keys_S_button_left) fn(DT_N_S_keys_S_button_right) fn(DT_N_S_keys_S_button_enter) fn(DT_N_S_lvgl_button_input) fn(DT_N_S_lvgl_encoder_input) fn(DT_N_S_lvgl_keypad_input) fn(DT_N_S_lpuart_10) fn(DT_N_S_lpuart_10_S_modbus_0) fn(DT_N_S_drv8844) fn(DT_N_S_lp5018) fn(DT_N_S_i2c_21) fn(DT_N_S_fake_io_S_display_power) fn(DT_N_S_fake_io_S_bkled) fn(DT_N_S_fake_io_S_display_reset) fn(DT_N_S_fake_io_S_power_5v_enable) fn(DT_N_S_fake_io_S_nafe_pwr_en) fn(DT_N_S_fake_io_S_can1_stb) fn(DT_N_S_fake_io_S_vref_ctrl) fn(DT_N_S_fake_io_S_bm0_button) fn(DT_N_S_fake_io_S_bm1_button) fn(DT_N_S_fake_io_S_buzzer_en) fn(DT_N_S_fake_io_S_board_button_0) fn(DT_N_S_fake_io_S_board_button_1) fn(DT_N_S_fake_io_S_board_button_2) fn(DT_N_S_fake_io_S_board_button_3) fn(DT_N_S_fake_io_S_board_button_4) fn(DT_N_S_fake_io_S_usb_id_input) fn(DT_N_S_fake_io_S_ignition_input) fn(DT_N_S_fake_io_S_digital_in_1_hi) fn(DT_N_S_fake_io_S_digital_in_1_low) fn(DT_N_S_fake_io_S_digital_in_2_hi) fn(DT_N_S_fake_io_S_digital_in_2_low) fn(DT_N_S_fake_io_S_digital_in_3_hi) fn(DT_N_S_fake_io_S_digital_in_3_low) fn(DT_N_S_fake_io_S_digital_in_4_hi) fn(DT_N_S_fake_io_S_digital_in_4_low)
#define DT_FOREACH_VARGS_HELPER(fn, ...) fn(DT_N, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_leds_S_led_0, __VA_ARGS__) fn(DT_N_S_lvgl_pointer, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_flash_controller_0, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000, __VA_ARGS__) fn(DT_N_S_eeprom, __VA_ARGS__) fn(DT_N_S_i2c_100, __VA_ARGS__) fn(DT_N_S_spi_200, __VA_ARGS__) fn(DT_N_S_spi_200_S_nafe13388_0, __VA_ARGS__) fn(DT_N_S_espi_300, __VA_ARGS__) fn(DT_N_S_uart, __VA_ARGS__) fn(DT_N_S_uart_1, __VA_ARGS__) fn(DT_N_S_rng, __VA_ARGS__) fn(DT_N_S_counter, __VA_ARGS__) fn(DT_N_S_gpio_800, __VA_ARGS__) fn(DT_N_S_gpio_900, __VA_ARGS__) fn(DT_N_S_gpio_900_S_sdl_gpio, __VA_ARGS__) fn(DT_N_S_udc0, __VA_ARGS__) fn(DT_N_S_sdl_dc, __VA_ARGS__) fn(DT_N_S_input_sdl_touch, __VA_ARGS__) fn(DT_N_S_can_loopback0, __VA_ARGS__) fn(DT_N_S_can, __VA_ARGS__) fn(DT_N_S_rtc, __VA_ARGS__) fn(DT_N_S_adc, __VA_ARGS__) fn(DT_N_S_dma, __VA_ARGS__) fn(DT_N_S_qdec, __VA_ARGS__) fn(DT_N_S_keys, __VA_ARGS__) fn(DT_N_S_keys_S_button0, __VA_ARGS__) fn(DT_N_S_keys_S_button1, __VA_ARGS__) fn(DT_N_S_keys_S_encoder_button, __VA_ARGS__) fn(DT_N_S_keys_S_button_left, __VA_ARGS__) fn(DT_N_S_keys_S_button_right, __VA_ARGS__) fn(DT_N_S_keys_S_button_enter, __VA_ARGS__) fn(DT_N_S_lvgl_button_input, __VA_ARGS__) fn(DT_N_S_lvgl_encoder_input, __VA_ARGS__) fn(DT_N_S_lvgl_keypad_input, __VA_ARGS__) fn(DT_N_S_lpuart_10, __VA_ARGS__) fn(DT_N_S_lpuart_10_S_modbus_0, __VA_ARGS__) fn(DT_N_S_drv8844, __VA_ARGS__) fn(DT_N_S_lp5018, __VA_ARGS__) fn(DT_N_S_i2c_21, __VA_ARGS__) fn(DT_N_S_fake_io, __VA_ARGS__) fn(DT_N_S_fake_io_S_display_power, __VA_ARGS__) fn(DT_N_S_fake_io_S_bkled, __VA_ARGS__) fn(DT_N_S_fake_io_S_display_reset, __VA_ARGS__) fn(DT_N_S_fake_io_S_power_5v_enable, __VA_ARGS__) fn(DT_N_S_fake_io_S_nafe_pwr_en, __VA_ARGS__) fn(DT_N_S_fake_io_S_can1_stb, __VA_ARGS__) fn(DT_N_S_fake_io_S_vref_ctrl, __VA_ARGS__) fn(DT_N_S_fake_io_S_bm0_button, __VA_ARGS__) fn(DT_N_S_fake_io_S_bm1_button, __VA_ARGS__) fn(DT_N_S_fake_io_S_buzzer_en, __VA_ARGS__) fn(DT_N_S_fake_io_S_board_button_0, __VA_ARGS__) fn(DT_N_S_fake_io_S_board_button_1, __VA_ARGS__) fn(DT_N_S_fake_io_S_board_button_2, __VA_ARGS__) fn(DT_N_S_fake_io_S_board_button_3, __VA_ARGS__) fn(DT_N_S_fake_io_S_board_button_4, __VA_ARGS__) fn(DT_N_S_fake_io_S_usb_id_input, __VA_ARGS__) fn(DT_N_S_fake_io_S_ignition_input, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_1_hi, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_1_low, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_2_hi, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_2_low, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_3_hi, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_3_low, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_4_hi, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_4_low, __VA_ARGS__)
#define DT_FOREACH_OKAY_VARGS_HELPER(fn, ...) fn(DT_N, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_leds_S_led_0, __VA_ARGS__) fn(DT_N_S_lvgl_pointer, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_flash_controller_0, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000, __VA_ARGS__) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000, __VA_ARGS__) fn(DT_N_S_eeprom, __VA_ARGS__) fn(DT_N_S_i2c_100, __VA_ARGS__) fn(DT_N_S_spi_200, __VA_ARGS__) fn(DT_N_S_spi_200_S_nafe13388_0, __VA_ARGS__) fn(DT_N_S_espi_300, __VA_ARGS__) fn(DT_N_S_uart, __VA_ARGS__) fn(DT_N_S_uart_1, __VA_ARGS__) fn(DT_N_S_rng, __VA_ARGS__) fn(DT_N_S_counter, __VA_ARGS__) fn(DT_N_S_gpio_800, __VA_ARGS__) fn(DT_N_S_gpio_900, __VA_ARGS__) fn(DT_N_S_gpio_900_S_sdl_gpio, __VA_ARGS__) fn(DT_N_S_udc0, __VA_ARGS__) fn(DT_N_S_sdl_dc, __VA_ARGS__) fn(DT_N_S_input_sdl_touch, __VA_ARGS__) fn(DT_N_S_can, __VA_ARGS__) fn(DT_N_S_rtc, __VA_ARGS__) fn(DT_N_S_adc, __VA_ARGS__) fn(DT_N_S_dma, __VA_ARGS__) fn(DT_N_S_qdec, __VA_ARGS__) fn(DT_N_S_keys, __VA_ARGS__) fn(DT_N_S_keys_S_button0, __VA_ARGS__) fn(DT_N_S_keys_S_button1, __VA_ARGS__) fn(DT_N_S_keys_S_encoder_button, __VA_ARGS__) fn(DT_N_S_keys_S_button_left, __VA_ARGS__) fn(DT_N_S_keys_S_button_right, __VA_ARGS__) fn(DT_N_S_keys_S_button_enter, __VA_ARGS__) fn(DT_N_S_lvgl_button_input, __VA_ARGS__) fn(DT_N_S_lvgl_encoder_input, __VA_ARGS__) fn(DT_N_S_lvgl_keypad_input, __VA_ARGS__) fn(DT_N_S_lpuart_10, __VA_ARGS__) fn(DT_N_S_lpuart_10_S_modbus_0, __VA_ARGS__) fn(DT_N_S_drv8844, __VA_ARGS__) fn(DT_N_S_lp5018, __VA_ARGS__) fn(DT_N_S_i2c_21, __VA_ARGS__) fn(DT_N_S_fake_io_S_display_power, __VA_ARGS__) fn(DT_N_S_fake_io_S_bkled, __VA_ARGS__) fn(DT_N_S_fake_io_S_display_reset, __VA_ARGS__) fn(DT_N_S_fake_io_S_power_5v_enable, __VA_ARGS__) fn(DT_N_S_fake_io_S_nafe_pwr_en, __VA_ARGS__) fn(DT_N_S_fake_io_S_can1_stb, __VA_ARGS__) fn(DT_N_S_fake_io_S_vref_ctrl, __VA_ARGS__) fn(DT_N_S_fake_io_S_bm0_button, __VA_ARGS__) fn(DT_N_S_fake_io_S_bm1_button, __VA_ARGS__) fn(DT_N_S_fake_io_S_buzzer_en, __VA_ARGS__) fn(DT_N_S_fake_io_S_board_button_0, __VA_ARGS__) fn(DT_N_S_fake_io_S_board_button_1, __VA_ARGS__) fn(DT_N_S_fake_io_S_board_button_2, __VA_ARGS__) fn(DT_N_S_fake_io_S_board_button_3, __VA_ARGS__) fn(DT_N_S_fake_io_S_board_button_4, __VA_ARGS__) fn(DT_N_S_fake_io_S_usb_id_input, __VA_ARGS__) fn(DT_N_S_fake_io_S_ignition_input, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_1_hi, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_1_low, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_2_hi, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_2_low, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_3_hi, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_3_low, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_4_hi, __VA_ARGS__) fn(DT_N_S_fake_io_S_digital_in_4_low, __VA_ARGS__)
#define DT_COMPAT_fixed_partitions_LABEL_mcuboot DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_0
#define DT_COMPAT_fixed_partitions_LABEL_mcuboot_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_0 DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_c000
#define DT_COMPAT_fixed_partitions_LABEL_image_0_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_1 DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_75000
#define DT_COMPAT_fixed_partitions_LABEL_image_1_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_scratch DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_de000
#define DT_COMPAT_fixed_partitions_LABEL_image_scratch_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_storage DT_N_S_flash_controller_0_S_flash_0_S_partitions_S_partition_fc000
#define DT_COMPAT_fixed_partitions_LABEL_storage_EXISTS 1

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_zephyr_posix 1
#define DT_COMPAT_HAS_OKAY_gpio_leds 1
#define DT_COMPAT_HAS_OKAY_zephyr_lvgl_pointer_input 1
#define DT_COMPAT_HAS_OKAY_zephyr_native_posix_cpu 1
#define DT_COMPAT_HAS_OKAY_zephyr_sim_flash 1
#define DT_COMPAT_HAS_OKAY_soc_nv_flash 1
#define DT_COMPAT_HAS_OKAY_fixed_partitions 1
#define DT_COMPAT_HAS_OKAY_zephyr_sim_eeprom 1
#define DT_COMPAT_HAS_OKAY_zephyr_i2c_emul_controller 1
#define DT_COMPAT_HAS_OKAY_zephyr_spi_emul_controller 1
#define DT_COMPAT_HAS_OKAY_nxp_nafe13388emul 1
#define DT_COMPAT_HAS_OKAY_zephyr_espi_emul_controller 1
#define DT_COMPAT_HAS_OKAY_zephyr_native_tty_uart 1
#define DT_COMPAT_HAS_OKAY_zephyr_native_posix_uart 1
#define DT_COMPAT_HAS_OKAY_zephyr_native_posix_rng 1
#define DT_COMPAT_HAS_OKAY_zephyr_native_posix_counter 1
#define DT_COMPAT_HAS_OKAY_zephyr_gpio_emul 1
#define DT_COMPAT_HAS_OKAY_zephyr_gpio_emul_sdl 1
#define DT_COMPAT_HAS_OKAY_zephyr_native_posix_udc 1
#define DT_COMPAT_HAS_OKAY_zephyr_sdl_dc 1
#define DT_COMPAT_HAS_OKAY_zephyr_input_sdl_touch 1
#define DT_COMPAT_HAS_OKAY_zephyr_native_linux_can 1
#define DT_COMPAT_HAS_OKAY_zephyr_rtc_emul 1
#define DT_COMPAT_HAS_OKAY_zephyr_adc_emul 1
#define DT_COMPAT_HAS_OKAY_zephyr_dma_emul 1
#define DT_COMPAT_HAS_OKAY_gpio_qdec 1
#define DT_COMPAT_HAS_OKAY_gpio_keys 1
#define DT_COMPAT_HAS_OKAY_zephyr_lvgl_button_input 1
#define DT_COMPAT_HAS_OKAY_zephyr_lvgl_encoder_input 1
#define DT_COMPAT_HAS_OKAY_zephyr_lvgl_keypad_input 1
#define DT_COMPAT_HAS_OKAY_zephyr_modbus_serial 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_zephyr_posix_NUM_OKAY 1
#define DT_N_INST_gpio_leds_NUM_OKAY 1
#define DT_N_INST_zephyr_lvgl_pointer_input_NUM_OKAY 1
#define DT_N_INST_zephyr_native_posix_cpu_NUM_OKAY 1
#define DT_N_INST_zephyr_sim_flash_NUM_OKAY 1
#define DT_N_INST_soc_nv_flash_NUM_OKAY 1
#define DT_N_INST_fixed_partitions_NUM_OKAY 1
#define DT_N_INST_zephyr_sim_eeprom_NUM_OKAY 1
#define DT_N_INST_zephyr_i2c_emul_controller_NUM_OKAY 2
#define DT_N_INST_zephyr_spi_emul_controller_NUM_OKAY 1
#define DT_N_INST_nxp_nafe13388emul_NUM_OKAY 1
#define DT_N_INST_zephyr_espi_emul_controller_NUM_OKAY 1
#define DT_N_INST_zephyr_native_tty_uart_NUM_OKAY 1
#define DT_N_INST_zephyr_native_posix_uart_NUM_OKAY 2
#define DT_N_INST_zephyr_native_posix_rng_NUM_OKAY 1
#define DT_N_INST_zephyr_native_posix_counter_NUM_OKAY 1
#define DT_N_INST_zephyr_gpio_emul_NUM_OKAY 4
#define DT_N_INST_zephyr_gpio_emul_sdl_NUM_OKAY 1
#define DT_N_INST_zephyr_native_posix_udc_NUM_OKAY 1
#define DT_N_INST_zephyr_sdl_dc_NUM_OKAY 1
#define DT_N_INST_zephyr_input_sdl_touch_NUM_OKAY 1
#define DT_N_INST_zephyr_native_linux_can_NUM_OKAY 1
#define DT_N_INST_zephyr_rtc_emul_NUM_OKAY 1
#define DT_N_INST_zephyr_adc_emul_NUM_OKAY 1
#define DT_N_INST_zephyr_dma_emul_NUM_OKAY 1
#define DT_N_INST_gpio_qdec_NUM_OKAY 1
#define DT_N_INST_gpio_keys_NUM_OKAY 1
#define DT_N_INST_zephyr_lvgl_button_input_NUM_OKAY 1
#define DT_N_INST_zephyr_lvgl_encoder_input_NUM_OKAY 1
#define DT_N_INST_zephyr_lvgl_keypad_input_NUM_OKAY 1
#define DT_N_INST_zephyr_modbus_serial_NUM_OKAY 1
#define DT_FOREACH_OKAY_zephyr_posix(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_zephyr_posix(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_posix(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_posix(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_gpio_leds(fn) fn(DT_N_S_leds)
#define DT_FOREACH_OKAY_VARGS_gpio_leds(fn, ...) fn(DT_N_S_leds, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_gpio_leds(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_gpio_leds(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_lvgl_pointer_input(fn) fn(DT_N_S_lvgl_pointer)
#define DT_FOREACH_OKAY_VARGS_zephyr_lvgl_pointer_input(fn, ...) fn(DT_N_S_lvgl_pointer, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_lvgl_pointer_input(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_lvgl_pointer_input(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_native_posix_cpu(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_FOREACH_OKAY_VARGS_zephyr_native_posix_cpu(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_native_posix_cpu(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_native_posix_cpu(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_sim_flash(fn) fn(DT_N_S_flash_controller_0)
#define DT_FOREACH_OKAY_VARGS_zephyr_sim_flash(fn, ...) fn(DT_N_S_flash_controller_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_sim_flash(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_sim_flash(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_soc_nv_flash(fn) fn(DT_N_S_flash_controller_0_S_flash_0)
#define DT_FOREACH_OKAY_VARGS_soc_nv_flash(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_soc_nv_flash(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_soc_nv_flash(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_fixed_partitions(fn) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions)
#define DT_FOREACH_OKAY_VARGS_fixed_partitions(fn, ...) fn(DT_N_S_flash_controller_0_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_fixed_partitions(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_fixed_partitions(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_sim_eeprom(fn) fn(DT_N_S_eeprom)
#define DT_FOREACH_OKAY_VARGS_zephyr_sim_eeprom(fn, ...) fn(DT_N_S_eeprom, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_sim_eeprom(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_sim_eeprom(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_i2c_emul_controller(fn) fn(DT_N_S_i2c_100) fn(DT_N_S_i2c_21)
#define DT_FOREACH_OKAY_VARGS_zephyr_i2c_emul_controller(fn, ...) fn(DT_N_S_i2c_100, __VA_ARGS__) fn(DT_N_S_i2c_21, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_i2c_emul_controller(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_i2c_emul_controller(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_spi_emul_controller(fn) fn(DT_N_S_spi_200)
#define DT_FOREACH_OKAY_VARGS_zephyr_spi_emul_controller(fn, ...) fn(DT_N_S_spi_200, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_spi_emul_controller(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_spi_emul_controller(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_nafe13388emul(fn) fn(DT_N_S_spi_200_S_nafe13388_0)
#define DT_FOREACH_OKAY_VARGS_nxp_nafe13388emul(fn, ...) fn(DT_N_S_spi_200_S_nafe13388_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_nafe13388emul(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_nafe13388emul(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_espi_emul_controller(fn) fn(DT_N_S_espi_300)
#define DT_FOREACH_OKAY_VARGS_zephyr_espi_emul_controller(fn, ...) fn(DT_N_S_espi_300, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_espi_emul_controller(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_espi_emul_controller(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_native_tty_uart(fn) fn(DT_N_S_uart)
#define DT_FOREACH_OKAY_VARGS_zephyr_native_tty_uart(fn, ...) fn(DT_N_S_uart, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_native_tty_uart(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_native_tty_uart(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_native_posix_uart(fn) fn(DT_N_S_uart_1) fn(DT_N_S_lpuart_10)
#define DT_FOREACH_OKAY_VARGS_zephyr_native_posix_uart(fn, ...) fn(DT_N_S_uart_1, __VA_ARGS__) fn(DT_N_S_lpuart_10, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_native_posix_uart(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_native_posix_uart(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_native_posix_rng(fn) fn(DT_N_S_rng)
#define DT_FOREACH_OKAY_VARGS_zephyr_native_posix_rng(fn, ...) fn(DT_N_S_rng, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_native_posix_rng(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_native_posix_rng(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_native_posix_counter(fn) fn(DT_N_S_counter)
#define DT_FOREACH_OKAY_VARGS_zephyr_native_posix_counter(fn, ...) fn(DT_N_S_counter, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_native_posix_counter(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_native_posix_counter(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_gpio_emul(fn) fn(DT_N_S_gpio_800) fn(DT_N_S_gpio_900) fn(DT_N_S_drv8844) fn(DT_N_S_lp5018)
#define DT_FOREACH_OKAY_VARGS_zephyr_gpio_emul(fn, ...) fn(DT_N_S_gpio_800, __VA_ARGS__) fn(DT_N_S_gpio_900, __VA_ARGS__) fn(DT_N_S_drv8844, __VA_ARGS__) fn(DT_N_S_lp5018, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_gpio_emul(fn) fn(0) fn(1) fn(2) fn(3)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_gpio_emul(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__) fn(2, __VA_ARGS__) fn(3, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_gpio_emul_sdl(fn) fn(DT_N_S_gpio_900_S_sdl_gpio)
#define DT_FOREACH_OKAY_VARGS_zephyr_gpio_emul_sdl(fn, ...) fn(DT_N_S_gpio_900_S_sdl_gpio, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_gpio_emul_sdl(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_gpio_emul_sdl(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_native_posix_udc(fn) fn(DT_N_S_udc0)
#define DT_FOREACH_OKAY_VARGS_zephyr_native_posix_udc(fn, ...) fn(DT_N_S_udc0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_native_posix_udc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_native_posix_udc(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_sdl_dc(fn) fn(DT_N_S_sdl_dc)
#define DT_FOREACH_OKAY_VARGS_zephyr_sdl_dc(fn, ...) fn(DT_N_S_sdl_dc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_sdl_dc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_sdl_dc(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_input_sdl_touch(fn) fn(DT_N_S_input_sdl_touch)
#define DT_FOREACH_OKAY_VARGS_zephyr_input_sdl_touch(fn, ...) fn(DT_N_S_input_sdl_touch, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_input_sdl_touch(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_input_sdl_touch(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_native_linux_can(fn) fn(DT_N_S_can)
#define DT_FOREACH_OKAY_VARGS_zephyr_native_linux_can(fn, ...) fn(DT_N_S_can, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_native_linux_can(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_native_linux_can(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_rtc_emul(fn) fn(DT_N_S_rtc)
#define DT_FOREACH_OKAY_VARGS_zephyr_rtc_emul(fn, ...) fn(DT_N_S_rtc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_rtc_emul(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_rtc_emul(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_adc_emul(fn) fn(DT_N_S_adc)
#define DT_FOREACH_OKAY_VARGS_zephyr_adc_emul(fn, ...) fn(DT_N_S_adc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_adc_emul(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_adc_emul(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_dma_emul(fn) fn(DT_N_S_dma)
#define DT_FOREACH_OKAY_VARGS_zephyr_dma_emul(fn, ...) fn(DT_N_S_dma, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_dma_emul(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_dma_emul(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_gpio_qdec(fn) fn(DT_N_S_qdec)
#define DT_FOREACH_OKAY_VARGS_gpio_qdec(fn, ...) fn(DT_N_S_qdec, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_gpio_qdec(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_gpio_qdec(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_gpio_keys(fn) fn(DT_N_S_keys)
#define DT_FOREACH_OKAY_VARGS_gpio_keys(fn, ...) fn(DT_N_S_keys, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_gpio_keys(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_gpio_keys(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_lvgl_button_input(fn) fn(DT_N_S_lvgl_button_input)
#define DT_FOREACH_OKAY_VARGS_zephyr_lvgl_button_input(fn, ...) fn(DT_N_S_lvgl_button_input, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_lvgl_button_input(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_lvgl_button_input(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_lvgl_encoder_input(fn) fn(DT_N_S_lvgl_encoder_input)
#define DT_FOREACH_OKAY_VARGS_zephyr_lvgl_encoder_input(fn, ...) fn(DT_N_S_lvgl_encoder_input, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_lvgl_encoder_input(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_lvgl_encoder_input(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_lvgl_keypad_input(fn) fn(DT_N_S_lvgl_keypad_input)
#define DT_FOREACH_OKAY_VARGS_zephyr_lvgl_keypad_input(fn, ...) fn(DT_N_S_lvgl_keypad_input, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_lvgl_keypad_input(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_lvgl_keypad_input(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_modbus_serial(fn) fn(DT_N_S_lpuart_10_S_modbus_0)
#define DT_FOREACH_OKAY_VARGS_zephyr_modbus_serial(fn, ...) fn(DT_N_S_lpuart_10_S_modbus_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_modbus_serial(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_modbus_serial(fn, ...) fn(0, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
#define DT_COMPAT_nxp_nafe13388emul_BUS_spi 1
#define DT_COMPAT_zephyr_modbus_serial_BUS_uart 1
